<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Ria</name>
    </assembly>
    <members>
        <member name="T:System.Web.Ria.Data.CompositionAttribute">
            <summary>
            Attribute applied to an association member to indicate that the
            association is a compositional relationship.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.ApplicationServices.AuthenticationEventArgs">
            <summary>
            Event args for events raised by the <see cref="T:System.Windows.Ria.ApplicationServices.AuthenticationService"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationEventArgs.#ctor(System.Security.Principal.IPrincipal)">
            <summary>
            Initiailizes a new instance of the AuthenticationEventArgs class.
            </summary>
            <param name="user">The user at the time the event occurred</param>
            <exception cref="T:System.ArgumentNullException"> is thrown if <paramref name="user"/> is null.
            </exception>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.AuthenticationEventArgs.User">
            <summary>
            Gets the user at the time the event occurred
            </summary>
        </member>
        <member name="T:System.Windows.Ria.ApplicationServices.AuthenticationOperation">
            <summary>
            Abstract subclass of the <see cref="T:System.Windows.Ria.OperationBase"/> class
            that is the base operation type for all the operations supported
            by <see cref="T:System.Windows.Ria.ApplicationServices.AuthenticationService"/>.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.OperationBase">
            <summary>
            Class representing an asynchronous operation.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.OperationBase.#ctor(System.Delegate,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Ria.OperationBase"/> class.
            </summary>
            <param name="completeAction">Optional action to execute when the operation completes.
            The callback must be a delegate taking a single parameter that can accept an instance
            of the operation Type.</param>
            <param name="userState">Optional user state.</param>
            <exception cref="T:System.ArgumentException">is thrown if the <paramref name="completeAction"/> specified
            has an incorrect signature.</exception>
        </member>
        <member name="M:System.Windows.Ria.OperationBase.MarkErrorAsHandled">
            <summary>
            For an operation in error, this method marks the error as handled. If this method is
            not called for a failed operation, an exception will be thrown.
            </summary>
            <exception cref="T:System.InvalidOperationException"> is thrown if <see cref="P:System.Windows.Ria.OperationBase.HasError"/> <c>false</c>.</exception>
        </member>
        <member name="M:System.Windows.Ria.OperationBase.Cancel">
            <summary>
            Cancels the operation.
            </summary>
            <remarks>
            Upon completion of the operation, check the IsCanceled property to determine whether 
            or not the operation was successfully canceled. Note that successful cancellation
            does not guarantee state changes were prevented from happening on the server.
            </remarks>
            <exception cref="T:System.NotSupportedException"> is thrown when <see cref="P:System.Windows.Ria.OperationBase.SupportsCancellation"/>
            is <c>false</c>.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.OperationBase.CancelCore">
            <summary>
            Override this method to provide a Cancel implementation
            for operations that support cancellation.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.OperationBase.Complete(System.Object)">
            <summary>
            Successfully completes the operation.
            </summary>
            <param name="result">The operation result.</param>
        </member>
        <member name="M:System.Windows.Ria.OperationBase.Complete(System.Exception)">
            <summary>
            Completes the operation with the specified error.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:System.Windows.Ria.OperationBase.InvokeCompleteAction">
            <summary>
            Invoke the completion callback if present.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.OperationBase.EnsureNotCompleted">
            <summary>
            Ensures an operation has not been completed or canceled. If
            it has been completed, an exception is thrown.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.OperationBase.ValidateCallbackSignature(System.String,System.Delegate)">
            <summary>
            Verifies that the specified callback has a valid signature and
            throws an exception if it is not.
            </summary>
            <param name="paramName">The name of the callback parameter being validated.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:System.Windows.Ria.OperationBase.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when an property has changed on the operation.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:System.Windows.Ria.OperationBase.RaisePropertyChanged(System.String)">
            <summary>
            Called to raise the PropertyChanged event
            </summary>
            <param name="propertyName">The name of the property that has changed</param>
        </member>
        <member name="P:System.Windows.Ria.OperationBase.IsErrorHandled">
            <summary>
            Gets or sets a value indicating whether the operation error has been marked as
            handled by calling <see cref="M:System.Windows.Ria.OperationBase.MarkErrorAsHandled"/>.
            </summary>
        </member>
        <member name="E:System.Windows.Ria.OperationBase.Completed">
            <summary>
            Event raised when the operation completes.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.OperationBase.SupportsCancellation">
            <summary>
            Gets a value indicating whether this operation supports cancellation.
            If overridden to return true, <see cref="M:System.Windows.Ria.OperationBase.CancelCore"/> must also be overridden.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.OperationBase.CanCancel">
            <summary>
            Gets a value indicating whether this operation is currently in a state
            where it can be canceled.
            <remarks>If <see cref="P:System.Windows.Ria.OperationBase.SupportsCancellation"/> is false,
            this operation doesn't support cancellation, and <see cref="P:System.Windows.Ria.OperationBase.CanCancel"/>
            will always return false.</remarks>
            </summary>
        </member>
        <member name="P:System.Windows.Ria.OperationBase.IsCanceled">
            <summary>
            Gets a value indicating whether this operation has been canceled.
            </summary>
            <remarks>
            Note that successful cancellation of this operation does not guarantee 
            state changes were prevented from happening on the server.
            </remarks>
        </member>
        <member name="P:System.Windows.Ria.OperationBase.Error">
            <summary>
            Gets the operation error if the operation failed.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.OperationBase.HasError">
            <summary>
            Gets a value indicating whether the operation has failed. If
            true, inspect the Error property for details.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.OperationBase.IsComplete">
            <summary>
            Gets a value indicating whether this operation has completed.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.OperationBase.Result">
            <summary>
            Gets the result of the async operation.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.OperationBase.UserState">
            <summary>
            Gets the optional user state for this operation.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationOperation.#ctor(System.Windows.Ria.ApplicationServices.AuthenticationService,System.Delegate,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Ria.ApplicationServices.AuthenticationOperation"/> class.
            </summary>
            <param name="service">The service this operation will use to implement Begin, Cancel, and End</param>
            <param name="completeAction">The action to execute when the operation completes.</param>
            <param name="userState">Optional user state.</param>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationOperation.Start">
            <summary>
            Starts the operation.
            </summary>
            <remarks>
            This method will invoke <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationOperation.BeginCore(System.AsyncCallback)"/> and will allow all
            exceptions thrown from <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationOperation.BeginCore(System.AsyncCallback)"/> to pass through.
            </remarks>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationOperation.BeginCore(System.AsyncCallback)">
            <summary>
            Template method for invoking the corresponding Begin method in the
            underlying async result implementation.
            </summary>
            <remarks>
            This method is invoked from <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationOperation.Start"/>. Any exceptions thrown
            will be passed through.
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> to invoke when the
            async call has completed. This can be passed directly to the underlying
            Begin method.
            </param>
            <returns>The async result returned by the underlying Begin call</returns>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationOperation.HandleAsyncCompleted(System.IAsyncResult)">
            <summary>
            Handles completion of the underlying async call.
            </summary>
            <remarks>
            If <see cref="P:System.Windows.Ria.ApplicationServices.AuthenticationOperation.AsyncResult"/> is null (as in the case of a synchronous
            completion), it will be set to <paramref name="asyncResult"/>.
            </remarks>
            <param name="asyncResult">The async result returned by the underlying Begin call</param>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationOperation.End(System.IAsyncResult)">
            <summary>
            Completes the operation.
            </summary>
            <remarks>
            This method will invoke <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationOperation.EndCore(System.IAsyncResult)"/> and will funnel all
            exceptions throw from <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationOperation.EndCore(System.IAsyncResult)"/> into the operation.
            </remarks>
            <param name="result">The async result returned by the underlying Begin call</param>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationOperation.EndCore(System.IAsyncResult)">
            <summary>
            Template method for invoking the corresponding End method in the
            underlying async result implementation.
            </summary>
            <remarks>
            This method is invoked by the callback passed into <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationOperation.BeginCore(System.AsyncCallback)"/>.
            Any exceptions thrown will be captured in the <see cref="P:System.Windows.Ria.OperationBase.Error"/>.
            </remarks>
            <param name="asyncResult">The async result returned by the underlying Begin call</param>
            <returns>The result of the End call to store in <see cref="P:System.Windows.Ria.OperationBase.Result"/></returns>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationOperation.RunInSynchronizationContext(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Runs the callback in the synchronization context the operation was created in.
            </summary>
            <param name="callback">The callback to run in the synchronization context</param>
            <param name="state">The optional state to pass to the callback</param>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationOperation.RaiseCompletionPropertyChanges">
            <summary>
            Raises property changes after the operation has completed.
            </summary>
            <remarks>
            This method is invoked by the callback passed into <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationOperation.BeginCore(System.AsyncCallback)"/> once
            <see cref="P:System.Windows.Ria.OperationBase.Result"/> and <see cref="P:System.Windows.Ria.OperationBase.Error"/> have
            been set. Change notifications for any properties that have been affected by the
            state changes should occur here.
            </remarks>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.AuthenticationOperation.AsyncResult">
            <summary>
            Gets the async result returned from <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationOperation.BeginCore(System.AsyncCallback)"/>.
            </summary>
            <remarks>
            If <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationOperation.BeginCore(System.AsyncCallback)"/> has not been called, this may be null.
            </remarks>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.AuthenticationOperation.Service">
            <summary>
            Gets the service this operation will use to implement Begin, Cancel, and End.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.AuthenticationOperation.SupportsCancellation">
            <summary>
            Gets a value that indicates whether the operation supports cancellation.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.AuthenticationOperation.Result">
            <summary>
            Gets the result as an <see cref="T:System.Windows.Ria.ApplicationServices.AuthenticationResult"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.AuthenticationOperation.User">
            <summary>
            Gets the user principal.
            </summary>
            <remarks>
            This value will be <c>null</c> before the operation completes, if the operation
            is canceled, or if the operation has errors.
            </remarks>
        </member>
        <member name="T:System.Windows.Ria.ApplicationServices.AuthenticationResult">
            <summary>
            Abstract base type for all the results returned by End calls for
            asynchronous operations in <see cref="T:System.Windows.Ria.ApplicationServices.AuthenticationService"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationResult.#ctor(System.Security.Principal.IPrincipal)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Ria.ApplicationServices.AuthenticationResult"/> class.
            </summary>
            <param name="user">The user principal.</param>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.AuthenticationResult.User">
            <summary>
            Gets the user
            </summary>
        </member>
        <member name="T:System.Windows.Ria.ApplicationServices.FormsAuthentication">
            <summary>
            <see cref="T:System.Windows.Ria.ApplicationServices.AuthenticationService"/> that performs Forms authentication using
            a <see cref="T:System.Windows.Ria.DomainContext"/> generated from a domain service
            implementing <c>System.Web.Ria.ApplicationServices.IAuthentication&lt;T&gt;</c>.
            </summary>
            <remarks>
            This implementation sets the user authentication type to <c>"Forms"</c>.
            </remarks>
        </member>
        <member name="T:System.Windows.Ria.ApplicationServices.WebAuthenticationService">
            <summary>
            Abstract extension of the <see cref="T:System.Windows.Ria.ApplicationServices.AuthenticationService"/> that
            interacts with a <see cref="P:System.Windows.Ria.ApplicationServices.WebAuthenticationService.DomainContext"/> generated from a domain
            service implementing
            <c>System.Web.Ria.ApplicationServices.IAuthentication&lt;T&gt;</c>.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.ApplicationServices.AuthenticationService">
            <summary>
            Service that is responsible for authenticating, loading, and saving the current user. 
            </summary>
            <remarks>
            This abstract base exposes <c>Login</c>, <c>Logout</c>, <c>LoadUser</c>, and
            <c>SaveUser</c> as asynchronous operations. It also provides a number of properties
            that can be bound to including <see cref="P:System.Windows.Ria.ApplicationServices.AuthenticationService.IsBusy"/> and <see cref="P:System.Windows.Ria.ApplicationServices.AuthenticationService.User"/>.
            <para>
            Concrete implementations will have a much different view of this class through a
            number of abstract template methods. These methods follow the async result pattern
            and are presented in Begin/End pairs for each operation. Optionally, cancel methods
            for each operation can also be implemented.
            </para>
            </remarks>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Ria.ApplicationServices.AuthenticationService"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.Login(System.String,System.String)">
            <summary>
            Asynchronously authenticates and logs in to the server with the specified parameters.
            </summary>
            <remarks>
            This method starts an operation with no complete action or user state. If this method
            returns normally, a <see cref="E:System.Windows.Ria.ApplicationServices.AuthenticationService.LoggedIn"/> event may be raised. Also, successful
            completion of this operation will update the <see cref="P:System.Windows.Ria.ApplicationServices.AuthenticationService.User"/>.
            </remarks>
            <param name="userName">The username associated with the user to authenticate</param>
            <param name="password">the password associated with the user to authenticate</param>
            <returns>Returns the login operation.</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if this method is called while
            another asynchronous operation is still being processed.
            </exception>
            <seealso cref="E:System.Windows.Ria.ApplicationServices.AuthenticationService.LoggedIn"/>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.Login(System.Windows.Ria.ApplicationServices.LoginParameters)">
            <summary>
            Asynchronously authenticates and logs in to the server with the specified parameters.
            </summary>
            <remarks>
            This method starts an operation with no complete action or user state. If this method
            returns normally, a <see cref="E:System.Windows.Ria.ApplicationServices.AuthenticationService.LoggedIn"/> event may be raised. Also, successful
            completion of this operation will update the <see cref="P:System.Windows.Ria.ApplicationServices.AuthenticationService.User"/>.
            </remarks>
            <returns>Returns the login operation.</returns>
            <param name="parameters">Login parameters that specify the user to authenticate</param>
            <exception cref="T:System.InvalidOperationException"> is thrown if this method is called while
            another asynchronous operation is still being processed.
            </exception>
            <seealso cref="E:System.Windows.Ria.ApplicationServices.AuthenticationService.LoggedIn"/>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.Login(System.Windows.Ria.ApplicationServices.LoginParameters,System.Action{System.Windows.Ria.ApplicationServices.LoginOperation},System.Object)">
            <summary>
            Asynchronously authenticates and logs in to the server with the specified parameters.
            </summary>
            <remarks>
            If this method returns normally, a <see cref="E:System.Windows.Ria.ApplicationServices.AuthenticationService.LoggedIn"/> event may be raised. Also,
            successful completion of this operation will update the <see cref="P:System.Windows.Ria.ApplicationServices.AuthenticationService.User"/>.
            </remarks>
            <param name="parameters">Login parameters that specify the user to authenticate</param>
            <param name="completeAction">This action will be invoked immediately after the operation
            completes and is called in all cases including success, cancellation, and error. This
            parameter is optional.
            </param>
            <param name="userState">This state will be set into
            <see cref="P:System.Windows.Ria.OperationBase.UserState"/>. This parameter is optional.
            </param>
            <returns>Returns the login operation.</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if this method is called while
            another asynchronous operation is still being processed.
            </exception>
            <seealso cref="E:System.Windows.Ria.ApplicationServices.AuthenticationService.LoggedIn"/>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.Logout(System.Boolean)">
            <summary>
            Asynchronously logs an authenticated user out from the server.
            </summary>
            <remarks>
            This method starts an operation with no complete action or user state. If this method
            returns normally, a <see cref="E:System.Windows.Ria.ApplicationServices.AuthenticationService.LoggedOut"/> event may be raised. Also, successful
            completion of this operation will update the <see cref="P:System.Windows.Ria.ApplicationServices.AuthenticationService.User"/>.
            </remarks>
            <param name="throwOnError">True if an unhandled error should result in an exception, false otherwise.
            To handle an operation error, <see cref="M:System.Windows.Ria.OperationBase.MarkErrorAsHandled"/> can be called from the
            operation completion callback or from a <see cref="E:System.Windows.Ria.OperationBase.Completed"/> event handler.
            </param>
            <returns>Returns the logout operation.</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if this method is called while
            another asynchronous operation is still being processed.
            </exception>
            <seealso cref="E:System.Windows.Ria.ApplicationServices.AuthenticationService.LoggedOut"/>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.Logout(System.Action{System.Windows.Ria.ApplicationServices.LogoutOperation},System.Object)">
            <summary>
            Asynchronously logs an authenticated user out from the server.
            </summary>
            <remarks>
            If this method returns normally, a <see cref="E:System.Windows.Ria.ApplicationServices.AuthenticationService.LoggedOut"/> event may be raised. Also,
            successful completion of this operation will update the <see cref="P:System.Windows.Ria.ApplicationServices.AuthenticationService.User"/>.
            </remarks>
            <param name="completeAction">This action will be invoked immediately after the operation
            completes and is called in all cases including success, cancellation, and error. This
            parameter is optional.
            </param>
            <param name="userState">This state will be set into
            <see cref="P:System.Windows.Ria.OperationBase.UserState"/>. This parameter is optional.
            </param>
            <returns>Returns the logout operation.</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if this method is called while
            another asynchronous operation is still being processed.
            </exception>
            <seealso cref="E:System.Windows.Ria.ApplicationServices.AuthenticationService.LoggedOut"/>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.LoadUser">
            <summary>
            Asynchronously loads the authenticated user from the server.
            </summary>
            <remarks>
            This method starts an operation with no complete action or user state. Successful
            completion of this operation will update the <see cref="P:System.Windows.Ria.ApplicationServices.AuthenticationService.User"/>.
            </remarks>
            <returns>Returns the load user operation.</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if this method is called while
            another asynchronous operation is still being processed.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.LoadUser(System.Action{System.Windows.Ria.ApplicationServices.LoadUserOperation},System.Object)">
            <summary>
            Asynchronously loads the authenticated user from the server.
            </summary>
            <remarks>
            Successful completion of this operation will update the <see cref="P:System.Windows.Ria.ApplicationServices.AuthenticationService.User"/>.
            </remarks>
            <param name="completeAction">This action will be invoked immediately after the operation
            completes and is called in all cases including success, cancellation, and error. This
            parameter is optional.
            </param>
            <param name="userState">This state will be set into
            <see cref="P:System.Windows.Ria.OperationBase.UserState"/>. This parameter is optional.
            </param>
            <returns>Returns the load user operation.</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if this method is called while
            another asynchronous operation is still being processed.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.SaveUser(System.Boolean)">
            <summary>
            Asynchronously saves the authenticated user to the server.
            </summary>
            <remarks>
            This method starts an operation with no complete action or user state.
            </remarks>
            <param name="throwOnError">True if an unhandled error should result in an exception, false otherwise.
            To handle an operation error, <see cref="M:System.Windows.Ria.OperationBase.MarkErrorAsHandled"/> can be called from the
            operation completion callback or from a <see cref="E:System.Windows.Ria.OperationBase.Completed"/> event handler.
            </param>
            <returns>Returns the save user operation.</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if this method is called while
            another asynchronous operation is still being processed.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.SaveUser(System.Action{System.Windows.Ria.ApplicationServices.SaveUserOperation},System.Object)">
            <summary>
            Asynchronously saves the authenticated user to the server.
            </summary>
            <param name="completeAction">This action will be invoked immediately after the operation
            completes and is called in all cases including success, cancellation, and error. This
            parameter is optional.
            </param>
            <param name="userState">This state will be set into
            <see cref="P:System.Windows.Ria.OperationBase.UserState"/>. This parameter is optional.
            </param>
            <returns>Returns the save user operation.</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if this method is called while
            another asynchronous operation is still being processed.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.WrapCompleteAction(System.Delegate)">
            <summary>
            Wraps the specified action so the <see cref="T:System.Windows.Ria.ApplicationServices.AuthenticationService"/> can complete
            processing of the operation before invoking the <paramref name="completeAction"/>.
            </summary>
            <param name="completeAction">The action to invoke once the service finishes
            processing the operation. This parameter is optional.
            </param>
            <returns>An action that will complete processing of the operation before invoking
            the wrapped action.
            </returns>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.StartOperation(System.Windows.Ria.ApplicationServices.AuthenticationOperation)">
            <summary>
            Starts an asynchronous operation if one is not already in progress
            </summary>
            <param name="operation">The operation to start</param>
            <exception cref="T:System.InvalidOperationException"> is returned if this method is called while
            another asynchronous operation is still being processed.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.GetBusyPropertyName(System.Windows.Ria.ApplicationServices.AuthenticationOperation)">
            <summary>
            Returns the name of the "busy" property for the specified operation
            </summary>
            <param name="operation">The operation to get the property name for</param>
            <returns>The name of the "busy" property for the operation</returns>
            <seealso cref="P:System.Windows.Ria.ApplicationServices.AuthenticationService.IsLoggingIn"/>
            <seealso cref="P:System.Windows.Ria.ApplicationServices.AuthenticationService.IsLoggingOut"/>
            <seealso cref="P:System.Windows.Ria.ApplicationServices.AuthenticationService.IsLoadingUser"/>
            <seealso cref="P:System.Windows.Ria.ApplicationServices.AuthenticationService.IsSavingUser"/>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.RunInSynchronizationContext(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Runs the callback in the synchronization context
            </summary>
            <param name="callback">The callback to run</param>
            <param name="state">The state to pass to the callback</param>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.RaisePropertyChanged(System.String)">
            <summary>
            Raises a <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event for the specified property.
            </summary>
            <param name="propertyName">The property to raise an event for</param>
            <exception cref="T:System.ArgumentNullException"> is thrown if the <paramref name="propertyName"/>
            is null.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises a <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <param name="e">The event to raise</param>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.OnLoggedIn(System.Windows.Ria.ApplicationServices.AuthenticationEventArgs)">
            <summary>
            Raises a <see cref="E:System.Windows.Ria.ApplicationServices.AuthenticationService.LoggedIn"/> event.
            </summary>
            <param name="e">The event to raise</param>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.OnLoggedOut(System.Windows.Ria.ApplicationServices.AuthenticationEventArgs)">
            <summary>
            Raises a <see cref="E:System.Windows.Ria.ApplicationServices.AuthenticationService.LoggedOut"/> event.
            </summary>
            <param name="e">The event to raise</param>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.HandleOperationError(System.Windows.Ria.ApplicationServices.AuthenticationOperation)">
            <summary>
            Marks an operation in error as handled.
            </summary>
            <param name="ao">The operation in error.</param>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.CreateDefaultUser">
            <summary>
            Creates a default user.
            </summary>
            <remarks>
            This method will be invoked by <see cref="P:System.Windows.Ria.ApplicationServices.AuthenticationService.User"/> when it is accessed before the value
            is set. The returned value is then stored and return on all subsequent gets until a
            <c>Login</c>, <c>Logout</c>, or <c>LoadUser</c> operation completes successfully.
            </remarks>
            <returns>A default user. This value may not be null.</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown from <see cref="P:System.Windows.Ria.ApplicationServices.AuthenticationService.User"/> if
            this operation returns null.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginLogin(System.Windows.Ria.ApplicationServices.LoginParameters,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous <c>Login</c> operation.
            </summary>
            <remarks>
            This method is invoked from <c>Login</c>. Exceptions thrown from this method will
            prevent the operation from starting and then be thrown from <c>Login</c>.
            </remarks>
            <param name="parameters">Login parameters that specify the user to authenticate. This
            parameter is optional.</param>
            <param name="callback">This callback should be invoked when the asynchronous call completes.
            If the asynchronous call is canceled, the callback should not be invoked. This parameter
            is optional.
            </param>
            <param name="state">The state should be set into the <see cref="T:System.IAsyncResult"/> this
            method returns. This parameter is optional.
            </param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous call and
            will be passed to the cancel and end methods.
            </returns>
            <seealso cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.CancelLogin(System.IAsyncResult)"/>
            <seealso cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.EndLogin(System.IAsyncResult)"/>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.CancelLogin(System.IAsyncResult)">
            <summary>
            Cancels an asynchronous <c>Login</c> operation.
            </summary>
            <remarks>
            The default implementation throws a <see cref="T:System.NotSupportedException"/> when
            <see cref="P:System.Windows.Ria.ApplicationServices.AuthenticationService.SupportsCancellation"/> is <c>false</c> and does not need to be called from
            overridden implementations. This method is invoked when a <c>Login</c> operation is
            canceled. Either this or <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.EndLogin(System.IAsyncResult)"/> will be invoked to conclude the operation
            but not both. After <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.CancelLogin(System.IAsyncResult)"/> is called, the callback passed in to
            <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginLogin(System.Windows.Ria.ApplicationServices.LoginParameters,System.AsyncCallback,System.Object)"/> should not be invoked. Exceptions thrown from this method will
            be available in <see cref="P:System.Windows.Ria.OperationBase.Error"/>.
            </remarks>
            <param name="asyncResult">A result returned from <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginLogin(System.Windows.Ria.ApplicationServices.LoginParameters,System.AsyncCallback,System.Object)"/> that represents
            the asynchronous call to cancel.
            </param>
            <exception cref="T:System.InvalidOperationException"> is thrown if <paramref name="asyncResult"/>
            was not returned from <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginLogin(System.Windows.Ria.ApplicationServices.LoginParameters,System.AsyncCallback,System.Object)"/> or the asynchronous call has already been
            concluded with a previous call to cancel or end.
            </exception>
            <seealso cref="M:System.Windows.Ria.OperationBase.Cancel"/>
            <seealso cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginLogin(System.Windows.Ria.ApplicationServices.LoginParameters,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.EndLogin(System.IAsyncResult)"/>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.EndLogin(System.IAsyncResult)">
            <summary>
            Ends an asynchronous <c>Login</c> operation.
            </summary>
            <remarks>
            This method is invoked when a <c>Login</c> operation completes. Either this or
            <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.CancelLogin(System.IAsyncResult)"/> will be invoked to conclude the operation but not both.
            Exceptions thrown from this method will be available in
            <see cref="P:System.Windows.Ria.OperationBase.Error"/>.
            </remarks>
            <param name="asyncResult">A result returned from <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginLogin(System.Windows.Ria.ApplicationServices.LoginParameters,System.AsyncCallback,System.Object)"/> that represents
            the asynchronous call to conclude.
            </param>
            <returns>The result of the asynchronous <c>Login</c> call</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if <paramref name="asyncResult"/>
            was not returned from <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginLogin(System.Windows.Ria.ApplicationServices.LoginParameters,System.AsyncCallback,System.Object)"/> or the asynchronous call has already been
            concluded with a previous call to cancel or end.
            </exception>
            <seealso cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginLogin(System.Windows.Ria.ApplicationServices.LoginParameters,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.CancelLogin(System.IAsyncResult)"/>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginLogout(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous <c>Logout</c> operation.
            </summary>
            <remarks>
            This method is invoked from <c>Logout</c>. Exceptions thrown from this method will
            prevent the operation from starting and then be thrown from <c>Logout</c>.
            </remarks>
            <param name="callback">This callback should be invoked when the asynchronous call completes.
            If the asynchronous call is canceled, the callback should not be invoked. This parameter
            is optional.
            </param>
            <param name="state">The state should be set into the <see cref="T:System.IAsyncResult"/> this
            method returns. This parameter is optional.
            </param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous call and
            will be passed to the cancel and end methods.
            </returns>
            <seealso cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.CancelLogout(System.IAsyncResult)"/>
            <seealso cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.EndLogout(System.IAsyncResult)"/>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.CancelLogout(System.IAsyncResult)">
            <summary>
            Cancels an asynchronous <c>Logout</c> operation.
            </summary>
            <remarks>
            The default implementation throws a <see cref="T:System.NotSupportedException"/> when
            <see cref="P:System.Windows.Ria.ApplicationServices.AuthenticationService.SupportsCancellation"/> is <c>false</c> and does not need to be called from
            overridden implementations. This method is invoked when a <c>Logout</c> operation is
            canceled. Either this or <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.EndLogout(System.IAsyncResult)"/> will be invoked to conclude the operation
            but not both. After <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.CancelLogout(System.IAsyncResult)"/> is called, the callback passed in to
            <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginLogout(System.AsyncCallback,System.Object)"/> should not be invoked. Exceptions thrown from this method will
            be available in <see cref="P:System.Windows.Ria.OperationBase.Error"/>.
            </remarks>
            <param name="asyncResult">A result returned from <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginLogout(System.AsyncCallback,System.Object)"/> that represents
            the asynchronous call to cancel.
            </param>
            <exception cref="T:System.InvalidOperationException"> is thrown if <paramref name="asyncResult"/>
            was not returned from <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginLogout(System.AsyncCallback,System.Object)"/> or the asynchronous call has already been
            concluded with a previous call to cancel or end.
            </exception>
            <seealso cref="M:System.Windows.Ria.OperationBase.Cancel"/>
            <seealso cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginLogout(System.AsyncCallback,System.Object)"/>
            <seealso cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.EndLogout(System.IAsyncResult)"/>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.EndLogout(System.IAsyncResult)">
            <summary>
            Ends an asynchronous <c>Logout</c> operation.
            </summary>
            <remarks>
            This method is invoked when a <c>Logout</c> operation completes. Either this or
            <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.CancelLogout(System.IAsyncResult)"/> will be invoked to conclude the operation but not both.
            Exceptions thrown from this method will be available in
            <see cref="P:System.Windows.Ria.OperationBase.Error"/>.
            </remarks>
            <param name="asyncResult">A result returned from <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginLogout(System.AsyncCallback,System.Object)"/> that represents
            the asynchronous call to conclude.
            </param>
            <returns>The result of the asynchronous <c>Logout</c> call</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if <paramref name="asyncResult"/>
            was not returned from <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginLogout(System.AsyncCallback,System.Object)"/> or the asynchronous call has already been
            concluded with a previous call to cancel or end.
            </exception>
            <seealso cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginLogout(System.AsyncCallback,System.Object)"/>
            <seealso cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.CancelLogout(System.IAsyncResult)"/>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginLoadUser(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous <c>LoadUser</c> operation.
            </summary>
            <remarks>
            This method is invoked from <c>LoadUser</c>. Exceptions thrown from this method will
            prevent the operation from starting and then be thrown from <c>LoadUser</c>.
            </remarks>
            <param name="callback">This callback should be invoked when the asynchronous call completes.
            If the asynchronous call is canceled, the callback should not be invoked. This parameter
            is optional.
            </param>
            <param name="state">The state should be set into the <see cref="T:System.IAsyncResult"/> this
            method returns. This parameter is optional.
            </param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous call and
            will be passed to the cancel and end methods.
            </returns>
            <seealso cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.CancelLoadUser(System.IAsyncResult)"/>
            <seealso cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.EndLoadUser(System.IAsyncResult)"/>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.CancelLoadUser(System.IAsyncResult)">
            <summary>
            Cancels an asynchronous <c>LoadUser</c> operation.
            </summary>
            <remarks>
            The default implementation throws a <see cref="T:System.NotSupportedException"/> when
            <see cref="P:System.Windows.Ria.ApplicationServices.AuthenticationService.SupportsCancellation"/> is <c>false</c> and does not need to be called from
            overridden implementations. This method is invoked when a <c>LoadUser</c> operation is
            canceled. Either this or <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.EndLoadUser(System.IAsyncResult)"/> will be invoked to conclude the operation
            but not both. After <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.CancelLoadUser(System.IAsyncResult)"/> is called, the callback passed in to
            <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginLoadUser(System.AsyncCallback,System.Object)"/> should not be invoked. Exceptions thrown from this method will
            be available in <see cref="P:System.Windows.Ria.OperationBase.Error"/>.
            </remarks>
            <param name="asyncResult">A result returned from <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginLoadUser(System.AsyncCallback,System.Object)"/> that represents
            the asynchronous call to cancel.
            </param>
            <exception cref="T:System.InvalidOperationException"> is thrown if <paramref name="asyncResult"/>
            was not returned from <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginLoadUser(System.AsyncCallback,System.Object)"/> or the asynchronous call has already been
            concluded with a previous call to cancel or end.
            </exception>
            <seealso cref="M:System.Windows.Ria.OperationBase.Cancel"/>
            <seealso cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginLoadUser(System.AsyncCallback,System.Object)"/>
            <seealso cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.EndLoadUser(System.IAsyncResult)"/>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.EndLoadUser(System.IAsyncResult)">
            <summary>
            Ends an asynchronous <c>LoadUser</c> operation.
            </summary>
            <remarks>
            This method is invoked when a <c>LoadUser</c> operation completes. Either this or
            <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.CancelLoadUser(System.IAsyncResult)"/> will be invoked to conclude the operation but not both.
            Exceptions thrown from this method will be available in
            <see cref="P:System.Windows.Ria.OperationBase.Error"/>.
            </remarks>
            <param name="asyncResult">A result returned from <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginLoadUser(System.AsyncCallback,System.Object)"/> that represents
            the asynchronous call to conclude.
            </param>
            <returns>The result of the asynchronous <c>LoadUser</c> call</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if <paramref name="asyncResult"/>
            was not returned from <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginLoadUser(System.AsyncCallback,System.Object)"/> or the asynchronous call has already been
            concluded with a previous call to cancel or end.
            </exception>
            <seealso cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginLoadUser(System.AsyncCallback,System.Object)"/>
            <seealso cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.CancelLoadUser(System.IAsyncResult)"/>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginSaveUser(System.Security.Principal.IPrincipal,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous <c>SaveUser</c> operation.
            </summary>
            <remarks>
            This method is invoked from <c>SaveUser</c>. Exceptions thrown from this method will
            prevent the operation from starting and then be thrown from <c>SaveUser</c>.
            </remarks>
            <param name="user">The user to save. This parameter will not be null.</param>
            <param name="callback">This callback should be invoked when the asynchronous call completes.
            If the asynchronous call is canceled, the callback should not be invoked. This parameter
            is optional.
            </param>
            <param name="state">The state should be set into the <see cref="T:System.IAsyncResult"/> this
            method returns. This parameter is optional.
            </param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous call and
            will be passed to the cancel and end methods.
            </returns>
            <seealso cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.CancelSaveUser(System.IAsyncResult)"/>
            <seealso cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.EndSaveUser(System.IAsyncResult)"/>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.CancelSaveUser(System.IAsyncResult)">
            <summary>
            Cancels an asynchronous <c>SaveUser</c> operation.
            </summary>
            <remarks>
            The default implementation throws a <see cref="T:System.NotSupportedException"/> when
            <see cref="P:System.Windows.Ria.ApplicationServices.AuthenticationService.SupportsCancellation"/> is <c>false</c> and does not need to be called from
            overridden implementations. This method is invoked when a <c>SaveUser</c> operation is
            canceled. Either this or <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.EndSaveUser(System.IAsyncResult)"/> will be invoked to conclude the operation
            but not both. After <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.CancelSaveUser(System.IAsyncResult)"/> is called, the callback passed in to
            <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginSaveUser(System.Security.Principal.IPrincipal,System.AsyncCallback,System.Object)"/> should not be invoked. Exceptions thrown from this method will
            be available in <see cref="P:System.Windows.Ria.OperationBase.Error"/>.
            </remarks>
            <param name="asyncResult">A result returned from <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginSaveUser(System.Security.Principal.IPrincipal,System.AsyncCallback,System.Object)"/> that represents
            the asynchronous call to cancel.
            </param>
            <exception cref="T:System.InvalidOperationException"> is thrown if <paramref name="asyncResult"/>
            was not returned from <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginSaveUser(System.Security.Principal.IPrincipal,System.AsyncCallback,System.Object)"/> or the asynchronous call has already been
            concluded with a previous call to cancel or end.
            </exception>
            <seealso cref="M:System.Windows.Ria.OperationBase.Cancel"/>
            <seealso cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginSaveUser(System.Security.Principal.IPrincipal,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.EndSaveUser(System.IAsyncResult)"/>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationService.EndSaveUser(System.IAsyncResult)">
            <summary>
            Ends an asynchronous <c>SaveUser</c> operation.
            </summary>
            <remarks>
            This method is invoked when a <c>SaveUser</c> operation completes. Either this or
            <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.CancelSaveUser(System.IAsyncResult)"/> will be invoked to conclude the operation but not both.
            Exceptions thrown from this method will be available in
            <see cref="P:System.Windows.Ria.OperationBase.Error"/>.
            </remarks>
            <param name="asyncResult">A result returned from <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginSaveUser(System.Security.Principal.IPrincipal,System.AsyncCallback,System.Object)"/> that represents
            the asynchronous call to conclude.
            </param>
            <returns>The result of the asynchronous <c>SaveUser</c> call</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if <paramref name="asyncResult"/>
            was not returned from <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginSaveUser(System.Security.Principal.IPrincipal,System.AsyncCallback,System.Object)"/> or the asynchronous call has already been
            concluded with a previous call to cancel or end.
            </exception>
            <seealso cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.BeginSaveUser(System.Security.Principal.IPrincipal,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.CancelSaveUser(System.IAsyncResult)"/>
        </member>
        <member name="E:System.Windows.Ria.ApplicationServices.AuthenticationService.LoggedIn">
            <summary>
            Raised when a new user is successfully logged in.
            </summary>
            <remarks>
            This event is raised either when <see cref="P:System.Windows.Ria.ApplicationServices.AuthenticationService.User"/> changes from anonymous to
            authenticated or when it changes from one authenticated identity to another.
            </remarks>
        </member>
        <member name="E:System.Windows.Ria.ApplicationServices.AuthenticationService.LoggedOut">
            <summary>
            Raised when a user is successfully logged out.
            </summary>
            <remarks>
            This event is raised when <see cref="P:System.Windows.Ria.ApplicationServices.AuthenticationService.User"/> changes from authenticated to
            anonymous.
            </remarks>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.AuthenticationService.IsBusy">
            <summary>
            Gets a value indicating whether an asynchronous operation is in progress
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.AuthenticationService.IsLoggingIn">
            <summary>
            Gets a value indicating whether an asynchronous <c>Login</c> operation is in progress
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.AuthenticationService.IsLoggingOut">
            <summary>
            Gets a value indicating whether an asynchronous <c>Logout</c> operation is in progress
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.AuthenticationService.IsLoadingUser">
            <summary>
            Gets a value indicating whether an asynchronous <c>LoadUser</c> operation is in progress
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.AuthenticationService.IsSavingUser">
            <summary>
            Gets a value indicating whether an asynchronous <c>SaveUser</c> operation is in progress
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.AuthenticationService.User">
            <summary>
            Gets a principal representing the authenticated user.
            </summary>
            <remarks>
            This value may be updated by the <c>Login</c>, <c>Logout</c>, and <c>LoadUser</c>
            operations. If none of the aforementioned methods has completed successfully, this
            property will contain a default user.
            </remarks>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.AuthenticationService.Operation">
            <summary>
            Gets and sets the current operation.
            </summary>
            <remarks>
            Only one operation can be active at a time. This property should not be set directly
            but instead can be modified via the <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.StartOperation(System.Windows.Ria.ApplicationServices.AuthenticationOperation)"/> method.
            </remarks>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.AuthenticationService.SupportsCancellation">
            <summary>
            Gets a value indicating whether this authentication implementation supports
            cancellation.
            </summary>
            <remarks>
            This value is <c>false</c> by default. When a derived class sets it to true, it is
            assumed that all cancellation methods have also been implemented.
            </remarks>
        </member>
        <member name="E:System.Windows.Ria.ApplicationServices.AuthenticationService.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            Raised every time a property value changes. See <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Ria.ApplicationServices.WebAuthenticationService"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.CreateDefaultUser">
            <summary>
            Creates a default user.
            </summary>
            <remarks>
            Creates a user by deserializing one from the application init params. If no
            user was included, one will be created using the default constructor.
            </remarks>
            <returns>A default user</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the
            <see cref="P:System.Windows.Ria.ApplicationServices.WebAuthenticationService.DomainContext"/> is <c>null</c> and a new instance
            cannot be created.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.BeginLogin(System.Windows.Ria.ApplicationServices.LoginParameters,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous <c>Login</c> operation.
            </summary>
            <param name="parameters">Login parameters that specify the user to authenticate</param>
            <param name="callback">The callback to invoke when the asynchronous call completes</param>
            <param name="state">The optional result state</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous call</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the
            <see cref="P:System.Windows.Ria.ApplicationServices.WebAuthenticationService.DomainContext"/> is <c>null</c> and a new instance
            cannot be created.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.CancelLogin(System.IAsyncResult)">
            <summary>
            Cancels an asynchronous <c>Login</c> operation.
            </summary>
            <param name="asyncResult">A result returned from <see cref="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.BeginLogin(System.Windows.Ria.ApplicationServices.LoginParameters,System.AsyncCallback,System.Object)"/> that represents
            the asynchronous call to cancel.
            </param>
            <exception cref="T:System.InvalidOperationException"> is thrown if <paramref name="asyncResult"/>
            was not returned from <see cref="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.BeginLogin(System.Windows.Ria.ApplicationServices.LoginParameters,System.AsyncCallback,System.Object)"/> or the asynchronous call has already been
            concluded with a previous call to cancel or end.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.EndLogin(System.IAsyncResult)">
            <summary>
            Ends an asynchronous <c>Login</c> operation.
            </summary>
            <param name="asyncResult">A result returned from <see cref="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.BeginLogin(System.Windows.Ria.ApplicationServices.LoginParameters,System.AsyncCallback,System.Object)"/> that represents
            the asynchronous call to conclude.
            </param>
            <returns>The result of the asynchronous <c>Login</c> call</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if <paramref name="asyncResult"/>
            was not returned from <see cref="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.BeginLogin(System.Windows.Ria.ApplicationServices.LoginParameters,System.AsyncCallback,System.Object)"/> or the asynchronous call has already been
            concluded with a previous call to cancel or end.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.BeginLogout(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous <c>Logout</c> operation.
            </summary>
            <param name="callback">The callback to invoke when the asynchronous call completes</param>
            <param name="state">The optional result state</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous call</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the
            <see cref="P:System.Windows.Ria.ApplicationServices.WebAuthenticationService.DomainContext"/> is <c>null</c> and a new instance
            cannot be created.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.CancelLogout(System.IAsyncResult)">
            <summary>
            Cancels an asynchronous <c>Logout</c> operation.
            </summary>
            <param name="asyncResult">A result returned from <see cref="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.BeginLogout(System.AsyncCallback,System.Object)"/> that represents
            the asynchronous call to cancel.
            </param>
            <exception cref="T:System.InvalidOperationException"> is thrown if <paramref name="asyncResult"/>
            was not returned from <see cref="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.BeginLogout(System.AsyncCallback,System.Object)"/> or the asynchronous call has already been
            concluded with a previous call to cancel or end.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.EndLogout(System.IAsyncResult)">
            <summary>
            Ends an asynchronous <c>Logout</c> operation.
            </summary>
            <param name="asyncResult">A result returned from <see cref="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.BeginLogout(System.AsyncCallback,System.Object)"/> that represents
            the asynchronous call to conclude.
            </param>
            <returns>The result of the asynchronous <c>Logout</c> call</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if <paramref name="asyncResult"/>
            was not returned from <see cref="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.BeginLogout(System.AsyncCallback,System.Object)"/> or the asynchronous call has already been
            concluded with a previous call to cancel or end.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.BeginLoadUser(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous <c>LoadUser</c> operation.
            </summary>
            <param name="callback">The callback to invoke when the asynchronous call completes</param>
            <param name="state">The optional result state</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous call</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the
            <see cref="P:System.Windows.Ria.ApplicationServices.WebAuthenticationService.DomainContext"/> is <c>null</c> and a new instance
            cannot be created.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.CancelLoadUser(System.IAsyncResult)">
            <summary>
            Cancels an asynchronous <c>LoadUser</c> operation.
            </summary>
            <param name="asyncResult">A result returned from <see cref="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.BeginLoadUser(System.AsyncCallback,System.Object)"/> that represents
            the asynchronous call to cancel.
            </param>
            <exception cref="T:System.InvalidOperationException"> is thrown if <paramref name="asyncResult"/>
            was not returned from <see cref="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.BeginLoadUser(System.AsyncCallback,System.Object)"/> or the asynchronous call has already been
            concluded with a previous call to cancel or end.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.EndLoadUser(System.IAsyncResult)">
            <summary>
            Ends an asynchronous <c>LoadUser</c> operation.
            </summary>
            <param name="asyncResult">A result returned from <see cref="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.BeginLoadUser(System.AsyncCallback,System.Object)"/> that represents
            the asynchronous call to conclude.
            </param>
            <returns>The result of the asynchronous <c>LoadUser</c> call</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if <paramref name="asyncResult"/>
            was not returned from <see cref="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.BeginLoadUser(System.AsyncCallback,System.Object)"/> or the asynchronous call has already been
            concluded with a previous call to cancel or end.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.BeginSaveUser(System.Security.Principal.IPrincipal,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous <c>SaveUser</c> operation.
            </summary>
            <param name="user">The authenticated user to save</param>
            <param name="callback">The callback to invoke when the asynchronous call completes</param>
            <param name="state">The optional result state</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous call</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the user is anonymous.</exception>
            <exception cref="T:System.InvalidOperationException"> is thrown if the
            <see cref="P:System.Windows.Ria.ApplicationServices.WebAuthenticationService.DomainContext"/> is <c>null</c> and a new instance
            cannot be created.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.CancelSaveUser(System.IAsyncResult)">
            <summary>
            Cancels an asynchronous <c>SaveUser</c> operation.
            </summary>
            <param name="asyncResult">A result returned from <see cref="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.BeginSaveUser(System.Security.Principal.IPrincipal,System.AsyncCallback,System.Object)"/> that represents
            the asynchronous call to cancel.
            </param>
            <exception cref="T:System.InvalidOperationException"> is thrown if <paramref name="asyncResult"/>
            was not returned from <see cref="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.BeginSaveUser(System.Security.Principal.IPrincipal,System.AsyncCallback,System.Object)"/> or the asynchronous call has already been
            concluded with a previous call to cancel or end.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.EndSaveUser(System.IAsyncResult)">
            <summary>
            Ends an asynchronous <c>SaveUser</c> operation.
            </summary>
            <param name="asyncResult">A result returned from <see cref="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.BeginSaveUser(System.Security.Principal.IPrincipal,System.AsyncCallback,System.Object)"/> that represents
            the asynchronous call to conclude.
            </param>
            <returns>The result of the asynchronous <c>SaveUser</c> call</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if <paramref name="asyncResult"/>
            was not returned from <see cref="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.BeginSaveUser(System.Security.Principal.IPrincipal,System.AsyncCallback,System.Object)"/> or the asynchronous call has already been
            concluded with a previous call to cancel or end.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.HandleOperationComplete(System.Windows.Ria.OperationBase)">
            <summary>
            Handles completion of the underlying operation in the <see cref="P:System.Windows.Ria.ApplicationServices.WebAuthenticationService.DomainContext"/>.
            </summary>
            <param name="operation">The operation that completed</param>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.Initialize">
            <summary>
            Initializes this authentication service.
            </summary>
            <remarks>
            This method is invoked before the service is used for the first time from
            <see cref="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.CreateDefaultUser"/> and the <c>BeginXx</c> methods. It can also
            be called earlier to ensure the service is ready for use. Subsequent
            invocations will not reinitialize the service.
            </remarks>
            <exception cref="T:System.InvalidOperationException"> is thrown if the
            <see cref="P:System.Windows.Ria.ApplicationServices.WebAuthenticationService.DomainContext"/> is <c>null</c> and a new instance
            cannot be created.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.InitializeDomainContext">
            <summary>
            Initializes the domain context.
            </summary>
            <remarks>
            If the domain context has not already been set, this method trys to instantiate
            one specified by the <see cref="P:System.Windows.Ria.ApplicationServices.WebAuthenticationService.DomainContextType"/> string.
            </remarks>
            <exception cref="T:System.InvalidOperationException"> is thrown if the
            <see cref="P:System.Windows.Ria.ApplicationServices.WebAuthenticationService.DomainContext"/> is <c>null</c> and a new instance
            cannot be created.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.AssertIsNotActive">
            <summary>
            Throws an exception if the service is active.
            </summary>
            <exception cref="T:System.InvalidOperationException"> is thrown if the service is active.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.PrepareUser(System.Security.Principal.IPrincipal)">
            <summary>
            Prepares the deserialized user to return from an End method.
            </summary>
            <remarks>
            This methods ensures only a single user is present in the entity set of the
            <see cref="P:System.Windows.Ria.ApplicationServices.WebAuthenticationService.DomainContext"/>.
            </remarks>
            <param name="user">The user to prepare</param>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.WebAuthenticationService.ClearOldUsers(System.Security.Principal.IPrincipal)">
            <summary>
            Clears all users but the one specified from the user entity set in the <see cref="P:System.Windows.Ria.ApplicationServices.WebAuthenticationService.DomainContext"/>.
            </summary>
            <param name="user">The single user to keep in the user entity set</param>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.WebAuthenticationService.DomainContextType">
            <summary>
            Gets and sets the type of the domain context.
            </summary>
            <remarks>
            If the <see cref="P:System.Windows.Ria.ApplicationServices.WebAuthenticationService.DomainContext"/> is not set when this service is
            started, it will instantiate a context specified by the
            <see cref="P:System.Windows.Ria.ApplicationServices.WebAuthenticationService.DomainContextType"/>. In determining the type, this
            string is treated as the full name of a type in the application 
            assembly. If the initial search does not return a valid type, this 
            string is treated as the assembly qualified name of a type.
            </remarks>
            <exception cref="T:System.InvalidOperationException"> is thrown if this
            property is set after the service is started.
            </exception>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.WebAuthenticationService.DomainContext">
            <summary>
            Gets the domain context this service delegates authenticating, loading, 
            and saving to.
            </summary>
            <exception cref="T:System.InvalidOperationException"> is thrown if this
            property is set after the service is started.
            </exception>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.WebAuthenticationService.SupportsCancellation">
            <summary>
            Gets a value that indicates whether this service supports cancellation.
            </summary>
            <remarks>
            This implementation always returns <c>true</c>.
            </remarks>
        </member>
        <member name="T:System.Windows.Ria.ApplicationServices.WebAuthenticationService.WebAsyncResult">
            <summary>
            The <see cref="T:System.IAsyncResult"/> type used by this authentication service.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.AsyncResultBase">
            <summary>
            Internal type used as a common <see cref="T:System.IAsyncResult"/> base for all cancellable asynchronous operations.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.AsyncResultBase.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="callback">Optional callback to invoke upon completion.</param>
            <param name="asyncState">Optional user state to pass to <paramref name="callback"/>.</param>
        </member>
        <member name="M:System.Windows.Ria.AsyncResultBase.EndAsyncOperation``1(System.IAsyncResult)">
            <summary>
            Transitions an <see cref="T:System.IAsyncResult"/> instance to mark the operation as ended.
            </summary>
            <typeparam name="TAsyncResult">The <see cref="T:System.Windows.Ria.AsyncResultBase"/> type expected.</typeparam>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> to examine.</param>
            <returns>The <paramref name="asyncResult"/> cast as the <typeparamref name="TAsyncResult"/> type expected.</returns>
            <exception cref="T:System.ArgumentNullException"> if <paramref name="asyncResult"/> is null.</exception>
            <exception cref="T:System.ArgumentException"> if <paramref name="asyncResult"/> is not of type <typeparamref name="TAsyncResult"/>.</exception>
            <exception cref="T:System.InvalidOperationException"> if <paramref name="asyncResult"/> has been canceled.</exception>
            <exception cref="T:System.InvalidOperationException"> if <paramref name="asyncResult"/>'s End* method has already been invoked.</exception>
        </member>
        <member name="M:System.Windows.Ria.AsyncResultBase.EndAsyncOperation``1(System.IAsyncResult,System.Boolean)">
            <summary>
            Transitions an <see cref="T:System.IAsyncResult"/> instance to mark the operation as ended (and optionally canceled).
            </summary>
            <typeparam name="TAsyncResult">The <see cref="T:System.Windows.Ria.AsyncResultBase"/> type expected.</typeparam>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> to examine.</param>
            <param name="cancel">Indicates whether the operation should be canceled.</param>
            <returns>The <paramref name="asyncResult"/> cast as the <typeparamref name="TAsyncResult"/> type expected.</returns>
            <exception cref="T:System.ArgumentNullException"> if <paramref name="asyncResult"/> is null.</exception>
            <exception cref="T:System.ArgumentException"> if <paramref name="asyncResult"/> is not of type <typeparamref name="TAsyncResult"/>.</exception>
            <exception cref="T:System.InvalidOperationException"> if <paramref name="asyncResult"/> has been canceled.</exception>
            <exception cref="T:System.InvalidOperationException"> if <paramref name="asyncResult"/>'s End* method has already been invoked.</exception>
            <exception cref="T:System.InvalidOperationException"> if <paramref name="asyncResult"/> has not completed.</exception>
        </member>
        <member name="M:System.Windows.Ria.AsyncResultBase.Complete">
            <summary>
            Signals that the asynchronous operation has completed and invokes the callback.
            </summary>
            <exception cref="T:System.InvalidOperationException"> if Complete has already been called.</exception>
        </member>
        <member name="M:System.Windows.Ria.AsyncResultBase.Cancel">
            <summary>
            Signals a cancellation request for this operation.
            </summary>
            <remarks>
            If this operation is completing or has already completed, this method returns without modifying any state.
            Cancellation is not guaranteed.
            </remarks>
        </member>
        <member name="M:System.Windows.Ria.AsyncResultBase.SetEndMethodInvokedFlag">
            <summary>
            Signals that the asynchronous EndXxx method has been invoked.
            </summary>
            <exception cref="T:System.InvalidOperationException"> if SetEndMethodInvokedFlag has already been called.</exception>
        </member>
        <member name="P:System.Windows.Ria.AsyncResultBase.AsyncState">
            <summary>
            Gets the optional user state.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.AsyncResultBase.AsyncWaitHandle">
            <summary>
            Gets the assoicated <see cref="T:System.Threading.WaitHandle"/>.  Not supported.
            </summary>
            <exception cref="T:System.NotSupportedException"> is always thrown.</exception>
        </member>
        <member name="P:System.Windows.Ria.AsyncResultBase.CompletedSynchronously">
            <summary>
            Gets a value indicating whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.AsyncResultBase.IsCompleted">
            <summary>
            Gets a value indicating whether the asynchronous operation is complete.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.AsyncResultBase.CancellationRequested">
            <summary>
            Gets a value indicating whether cancellation was requested.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.AsyncResultBase.InnerAsyncResult">
            <summary>
            Gets the inner <see cref="T:System.IAsyncResult"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.FormsAuthentication.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Ria.ApplicationServices.FormsAuthentication"/> class.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.ApplicationServices.LoadUserOperation">
            <summary>
            Operation type returned from <c>LoadUser</c> operations on <see cref="T:System.Windows.Ria.ApplicationServices.AuthenticationService"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.LoadUserOperation.BeginCore(System.AsyncCallback)">
            <summary>
            Begins a load operation
            </summary>
            <param name="callback">The callback invoked when the operation completes</param>
            <returns>The async result for the operation</returns>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.LoadUserOperation.CancelCore">
            <summary>
            Cancels a load operation
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.LoadUserOperation.EndCore(System.IAsyncResult)">
            <summary>
            Ends a load operation
            </summary>
            <param name="asyncResult">The async result for the operation</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="T:System.Windows.Ria.ApplicationServices.LoadUserResult">
            <summary>
            Result returned from <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.EndLoadUser(System.IAsyncResult)"/>
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.LoadUserResult.#ctor(System.Security.Principal.IPrincipal)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Ria.ApplicationServices.LoadUserResult"/> class.
            </summary>
            <param name="user">The loaded user</param>
        </member>
        <member name="T:System.Windows.Ria.ApplicationServices.LoginOperation">
            <summary>
            Operation type returned from <c>Login</c> operations on <see cref="T:System.Windows.Ria.ApplicationServices.AuthenticationService"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.LoginOperation.BeginCore(System.AsyncCallback)">
            <summary>
            Begins a login operation
            </summary>
            <param name="callback">The callback invoked when the operation completes</param>
            <returns>The async result for the operation</returns>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.LoginOperation.CancelCore">
            <summary>
            Cancels a login operation
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.LoginOperation.EndCore(System.IAsyncResult)">
            <summary>
            Ends a login operation
            </summary>
            <param name="asyncResult">The async result for the operation</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.LoginOperation.RaiseCompletionPropertyChanges">
            <summary>
            Raises property changes after the operation has completed.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.LoginOperation.LoginParameters">
            <summary>
            Gets the login parameters used when invoking this operation.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.LoginOperation.LoginSuccess">
            <summary>
            Gets a value indicating whether this operation was able to successfully login.
            </summary>
            <remarks>
            This value will be <c>false</c> before the operation completes, if the operation
            is canceled, or if the operation has errors.
            </remarks>
        </member>
        <member name="T:System.Windows.Ria.ApplicationServices.LoginResult">
            <summary>
            Result returned from <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.EndLogin(System.IAsyncResult)"/>
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.LoginResult.#ctor(System.Security.Principal.IPrincipal,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Ria.ApplicationServices.LoginResult"/> class.
            </summary>
            <param name="user">The logged in user or null if authentication failed</param>
            <param name="loginSuccess">Whether the <c>Login</c> call completed successfully</param>
            <exception cref="T:System.InvalidOperationException"> is thrown if the <paramref name="user"/> is
            not authenticated when the <c>Login</c> call has finished successfully.
            </exception>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.LoginResult.LoginSuccess">
            <summary>
            Gets a value indicating whether the <c>Login</c> call completed successfully.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.ApplicationServices.LogoutOperation">
            <summary>
            Operation type returned from <c>Logout</c> operations on <see cref="T:System.Windows.Ria.ApplicationServices.AuthenticationService"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.LogoutOperation.BeginCore(System.AsyncCallback)">
            <summary>
            Begins a logout operation
            </summary>
            <param name="callback">The callback invoked when the operation completes</param>
            <returns>The async result for the operation</returns>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.LogoutOperation.CancelCore">
            <summary>
            Cancels a logout operation
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.LogoutOperation.EndCore(System.IAsyncResult)">
            <summary>
            Ends a logout operation
            </summary>
            <param name="asyncResult">The async result for the operation</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="T:System.Windows.Ria.ApplicationServices.LogoutResult">
            <summary>
            Result returned from <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.EndLogout(System.IAsyncResult)"/>
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.LogoutResult.#ctor(System.Security.Principal.IPrincipal)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Ria.ApplicationServices.LogoutResult"/> class.
            </summary>
            <param name="user">The anonymous user</param>
        </member>
        <member name="T:System.Windows.Ria.ApplicationServices.SaveUserOperation">
            <summary>
            Operation type returned from <c>SaveUser</c> operations on <see cref="T:System.Windows.Ria.ApplicationServices.AuthenticationService"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.SaveUserOperation.BeginCore(System.AsyncCallback)">
            <summary>
            Begins a save operation
            </summary>
            <param name="callback">The callback invoked when the operation completes</param>
            <returns>The async result for the operation</returns>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.SaveUserOperation.CancelCore">
            <summary>
            Cancels a save operation
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.SaveUserOperation.EndCore(System.IAsyncResult)">
            <summary>
            Ends a save operation
            </summary>
            <param name="asyncResult">The async result for the operation</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="T:System.Windows.Ria.ApplicationServices.SaveUserResult">
            <summary>
            Result returned from <see cref="M:System.Windows.Ria.ApplicationServices.AuthenticationService.EndSaveUser(System.IAsyncResult)"/>
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.SaveUserResult.#ctor(System.Security.Principal.IPrincipal)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Ria.ApplicationServices.SaveUserResult"/> class.
            </summary>
            <param name="user">The saved user</param>
        </member>
        <member name="T:System.Windows.Ria.ApplicationServices.AuthenticationDomainContextBase">
            <summary>
            <see cref="T:System.Windows.Ria.DomainContext"/> generated as the base class for providers implementing
            <c>System.Web.Ria.ApplicationServices.IAuthentication&lt;T&gt;</c>.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.DomainContext">
            <summary>
            A <see cref="T:System.Windows.Ria.DomainContext"/> is a stateful client side representation of a DomainService, providing
            access to all the functionality of the DomainService.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.DomainContext.#ctor(System.Windows.Ria.Services.DomainClient)">
            <summary>
            Protected constructor
            </summary>
            <param name="domainClient">The <see cref="P:System.Windows.Ria.DomainContext.DomainClient"/> instance this <see cref="T:System.Windows.Ria.DomainContext"/> should use</param>
        </member>
        <member name="M:System.Windows.Ria.DomainContext.CreateEntityContainer">
            <summary>
            Creates and returns an entity container configured with <see cref="T:System.Windows.Ria.EntitySet"/>s for all 
            entities this context will provide access to. The return must be non-null.
            </summary>
            <returns>The container</returns>
        </member>
        <member name="M:System.Windows.Ria.DomainContext.AddReference(System.Type,System.Windows.Ria.DomainContext)">
            <summary>
            Adds a reference to an external <see cref="T:System.Windows.Ria.DomainContext"/>.  Once a reference is established, referenced
            DomainContext instances will be consulted when resolving the <see cref="T:System.Windows.Ria.EntitySet"/> for an <see cref="T:System.Windows.Ria.Entity"/> type.
            </summary>
            <param name="entityType">The entity type to lookup in the <paramref name="domainContext"/>.</param>
            <param name="domainContext">A <see cref="T:System.Windows.Ria.DomainContext"/> to register as an external reference.</param>
        </member>
        <member name="M:System.Windows.Ria.DomainContext.RejectChanges">
            <summary>
            Revert all pending changes for this <see cref="T:System.Windows.Ria.DomainContext"/>
            </summary>
        </member>
        <member name="M:System.Windows.Ria.DomainContext.SubmitChanges">
            <summary>
            Submit all pending changes to the DomainService. If the submit fails,
            an exception will be thrown.
            </summary>
            <returns>The <see cref="T:System.Windows.Ria.SubmitOperation"/>.</returns>
        </member>
        <member name="M:System.Windows.Ria.DomainContext.SubmitChanges(System.Action{System.Windows.Ria.SubmitOperation},System.Object)">
            <summary>
            Submit all pending changes to the DomainService.
            </summary>
            <param name="callback">Optional callback for the submit operation</param>
            <param name="userState">Optional user state to associate with the operation.
            </param>
            <returns>The <see cref="T:System.Windows.Ria.SubmitOperation"/>.</returns>
        </member>
        <member name="M:System.Windows.Ria.DomainContext.CreateQuery``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
            Creates an <see cref="T:System.Windows.Ria.EntityQuery"/>.
            </summary>
            <typeparam name="TEntity">The entity Type the query applies to.</typeparam>
            <param name="queryName">The name of the query method.</param>
            <param name="parameters">Optional parameters to the query method. Specify null
            if the query operation takes no parameters.</param>
            <param name="hasSideEffects">True if the query has side-effects, false otherwise.</param>
            <param name="isComposable">True if the query supports composition, false otherwise.</param>
            <returns>The query.</returns>
        </member>
        <member name="M:System.Windows.Ria.DomainContext.Load``1(System.Windows.Ria.EntityQuery{``0})">
            <summary>
            Initiates a load operation for the specified query. If the operation fails, an
            exception will be thrown.
            </summary>
            <typeparam name="TEntity">The entity Type being loaded.</typeparam>
            <param name="query">The query to invoke.</param>
            <returns>The load operation.</returns>
        </member>
        <member name="M:System.Windows.Ria.DomainContext.Load``1(System.Windows.Ria.EntityQuery{``0},System.Boolean)">
            <summary>
            Initiates a load operation for the specified query.
            </summary>
            <typeparam name="TEntity">The entity Type being loaded.</typeparam>
            <param name="query">The query to invoke.</param>
            <param name="throwOnError">True if an unhandled error should result in an exception, false otherwise.
            To handle an operation error, <see cref="M:System.Windows.Ria.OperationBase.MarkErrorAsHandled"/> can be called from the
            operation completion callback or from a <see cref="E:System.Windows.Ria.OperationBase.Completed"/> event handler.
            </param>
            <returns>The load operation.</returns>
        </member>
        <member name="M:System.Windows.Ria.DomainContext.Load``1(System.Windows.Ria.EntityQuery{``0},System.Windows.Ria.LoadBehavior,System.Boolean)">
            <summary>
            Initiates a load operation for the specified query.
            </summary>
            <typeparam name="TEntity">The entity Type to be loaded.</typeparam>
            <param name="query">The query to invoke.</param>
            <param name="loadBehavior">The <see cref="T:System.Windows.Ria.LoadBehavior"/> to apply.</param>
            <param name="throwOnError">True if an unhandled error should result in an exception, false otherwise.
            To handle an operation error, <see cref="M:System.Windows.Ria.OperationBase.MarkErrorAsHandled"/> can be called from the
            operation completion callback or from a <see cref="E:System.Windows.Ria.OperationBase.Completed"/> event handler.
            </param>
            <returns>The load operation.</returns>
        </member>
        <member name="M:System.Windows.Ria.DomainContext.Load``1(System.Windows.Ria.EntityQuery{``0},System.Action{System.Windows.Ria.LoadOperation{``0}},System.Object)">
            <summary>
            Initiates a load operation for the specified query.
            </summary>
            <typeparam name="TEntity">The entity Type being loaded.</typeparam>
            <param name="query">The query to invoke.</param>
            <param name="callback">Optional callback to be called when the load operation completes.</param>
            <param name="userState">Optional user state.</param>
            <returns>The load operation.</returns>
        </member>
        <member name="M:System.Windows.Ria.DomainContext.Load``1(System.Windows.Ria.EntityQuery{``0},System.Windows.Ria.LoadBehavior,System.Action{System.Windows.Ria.LoadOperation{``0}},System.Object)">
            <summary>
            Initiates a load operation for the specified query.
            </summary>
            <typeparam name="TEntity">The entity Type being loaded.</typeparam>
            <param name="query">The query to invoke.</param>
            <param name="loadBehavior">The <see cref="T:System.Windows.Ria.LoadBehavior"/> to apply.</param>
            <param name="callback">Optional callback to be called when the load operation completes.</param>
            <param name="userState">Optional user state.</param>
            <returns>The load operation.</returns>
        </member>
        <member name="M:System.Windows.Ria.DomainContext.Load(System.Windows.Ria.EntityQuery,System.Windows.Ria.LoadBehavior,System.Delegate,System.Object)">
            <summary>
            Initiates a load operation for the specified query.
            </summary>
            <param name="query">The query to invoke.</param>
            <param name="loadBehavior">The <see cref="T:System.Windows.Ria.LoadBehavior"/> to apply.</param>
            <param name="callback">Optional callback to be called when the load operation completes. The callback must
            be a delegate taking a single parameter that can accept an instance of the <see cref="T:System.Windows.Ria.LoadOperation"/> Type returned.</param>
            <param name="userState">Optional user state.</param>
            <returns>The load operation.</returns>
        </member>
        <member name="M:System.Windows.Ria.DomainContext.ProcessSubmitResults(System.Windows.Ria.EntityChangeSet,System.Collections.Generic.IEnumerable{System.Windows.Ria.ChangeSetEntry})">
            <summary>
            Process the submit results by handling any validation or conflict errors, performing any required
            member auto-sync, etc. If there were no errors, all changes are accepted.
            </summary>
            <param name="changeSet">The submitted <see cref="T:System.Windows.Ria.EntityChangeSet"/>.</param>
            <param name="changeSetResults">The operation results returned from the submit request.</param>
        </member>
        <member name="M:System.Windows.Ria.DomainContext.AddEntityErrors(System.Windows.Ria.Entity,System.Collections.Generic.IEnumerable{System.Web.Ria.Data.OperationError},System.Collections.Generic.Dictionary{System.Windows.Ria.Entity,System.Collections.Generic.List{System.ComponentModel.DataAnnotations.ValidationResult}})">
            <summary>
            Add a list of <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> to the entity's <see cref="P:System.Windows.Ria.Entity.ValidationErrors"/> collection.
            </summary>
            <param name="failedEntity">entity that has failed</param>
            <param name="errors">list of errors that have occurred during the operation</param>
            <param name="entityErrorMap">dictionary of accumulated entity error mapping</param>
        </member>
        <member name="M:System.Windows.Ria.DomainContext.ApplyMemberSynchronizations(System.Collections.Generic.IEnumerable{System.Windows.Ria.ChangeSetEntry})">
            <summary>
            Apply any member synchronizations specified in the results.
            </summary>
            <param name="changeSetResults">The operation results to process</param>
        </member>
        <member name="M:System.Windows.Ria.DomainContext.EntityContainerPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Event handler for property changed events on our EntityContainer
            </summary>
            <param name="sender">The EntityContainer</param>
            <param name="e">The event args</param>
        </member>
        <member name="M:System.Windows.Ria.DomainContext.CompleteSubmitChanges(System.IAsyncResult)">
            <summary>
            Completes an event-based asynchronous <see cref="M:System.Windows.Ria.DomainContext.SubmitChanges"/> operation.
            </summary>
            <param name="asyncResult">The asynchronous result that identifies the underlying Load operation.</param>
        </member>
        <member name="M:System.Windows.Ria.DomainContext.InvokeOperation(System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Delegate,System.Object)">
            <summary>
            Invokes an invoke operation.
            </summary>
            <param name="operationName">The name of the operation.</param>
            <param name="returnType">The return Type of the operation.</param>
            <param name="parameters">Optional parameters to the operation. Specify null
            if the operation takes no parameters.</param>
            <param name="hasSideEffects">True if the operation has side-effects, false otherwise.</param>
            <param name="callback">Optional callback to be called when the operation completes. The callback must
            be a delegate taking a single parameter that can accept an instance of the <see cref="T:System.Windows.Ria.InvokeOperation"/> Type returned.</param>
            <param name="userState">Optional user state for the operation.</param>
            <returns>The invoke operation.</returns>
        </member>
        <member name="M:System.Windows.Ria.DomainContext.RaisePropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event for the indicated property
            </summary>
            <param name="propertyName">The property to raise the event for</param>
        </member>
        <member name="M:System.Windows.Ria.DomainContext.ValidateChangeset(System.Windows.Ria.EntityChangeSet)">
            <summary>
            Validates the specified changeset.
            </summary>
            <param name="changeSet">The changeset to validate</param>
            <returns>True if the changeset is valid, false otherwise</returns>
        </member>
        <member name="M:System.Windows.Ria.DomainContext.ValidateMethod(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Validates a method call.
            </summary>
            <param name="methodName">The method to validate.</param>
            <param name="parameters">The parameters to the method.</param>
        </member>
        <member name="E:System.Windows.Ria.DomainContext.PropertyChanged">
            <summary>
            Event raised whenever a <see cref="T:System.Windows.Ria.DomainContext"/> property changes
            </summary>
        </member>
        <member name="P:System.Windows.Ria.DomainContext.DomainClient">
            <summary>
            Gets the DomainClient for this context, performing any
            required initialization
            </summary>
        </member>
        <member name="P:System.Windows.Ria.DomainContext.IsLoading">
            <summary>
            Gets a value indicating whether this context is currently performing a Load operation.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.DomainContext.IsSubmitting">
            <summary>
            Gets a value indicating whether this context is currently performing a SubmitChanges operation.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.DomainContext.EntityContainer">
            <summary>
            Gets the <see cref="P:System.Windows.Ria.DomainContext.EntityContainer"/> holding all entities loaded by this context.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.DomainContext.HasChanges">
            <summary>
            Gets a value indicating whether this context has any pending changes
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.AuthenticationDomainContextBase.#ctor(System.Windows.Ria.Services.DomainClient)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Ria.ApplicationServices.AuthenticationDomainContextBase"/> class.
            </summary>
            <param name="domainClient">The <see cref="T:System.Windows.Ria.Services.DomainClient"/> instance this <see cref="T:System.Windows.Ria.ApplicationServices.AuthenticationDomainContextBase"/> should use</param>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.AuthenticationDomainContextBase.UserType">
            <summary>
            Gets the type of the user entity.
            </summary>
            <remarks>
            Since the user type is only declared in the generated class, this accessor
            allows the <see cref="T:System.Windows.Ria.ApplicationServices.WebAuthenticationService"/> to take type-specific actions.
            </remarks>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.AuthenticationDomainContextBase.UserSet">
            <summary>
            Gets the <see cref="T:System.Windows.Ria.EntitySet"/> for the user entity.
            </summary>
            <remarks>
            This allows <see cref="T:System.Windows.Ria.ApplicationServices.WebAuthenticationService"/> to deal with users in a
            type-agnostic way.
            </remarks>
        </member>
        <member name="T:System.Windows.Ria.ApplicationServices.WindowsAuthentication">
            <summary>
            <see cref="T:System.Windows.Ria.ApplicationServices.AuthenticationService"/> that performs Windows authentication using
            a <see cref="T:System.Windows.Ria.DomainContext"/> generated from a domain service
            implementing <c>System.Web.Ria.ApplicationServices.IAuthentication&lt;T&gt;</c>.
            </summary>
            <remarks>
            This implementation sets the user authentication type to <c>"Windows"</c>.
            </remarks>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.WindowsAuthentication.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Ria.ApplicationServices.WindowsAuthentication"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.WindowsAuthentication.BeginLogin(System.Windows.Ria.ApplicationServices.LoginParameters,System.AsyncCallback,System.Object)">
            <summary>
            <c>Login</c> is not an operation supported for Windows authentication
            </summary>
            <param name="parameters">The parameter is not used.</param>
            <param name="callback">The parameter is not used.</param>
            <param name="state">The parameter is not used.</param>
            <returns>The result.</returns>
            <exception cref="T:System.NotSupportedException"> is always thrown.</exception>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.WindowsAuthentication.BeginLogout(System.AsyncCallback,System.Object)">
            <summary>
            <c>Logout</c> is not an operation supported for Windows authentication
            </summary>
            <param name="callback">The parameter is not used.</param>
            <param name="state">The parameter is not used.</param>
            <returns>The result.</returns>
            <exception cref="T:System.NotSupportedException"> is always thrown.</exception>
        </member>
        <member name="T:System.Windows.Ria.Services.SoapQueryHeader">
            <summary>
            Provides a SOAP query header that can represent an <see cref="T:System.Linq.IQueryable"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Services.SoapQueryHeader.#ctor(System.Linq.IQueryable)">
            <summary>
            Public constructor
            </summary>
            <param name="queryable">The <see cref="T:System.Linq.IQueryable"/> to represent.</param>
        </member>
        <member name="M:System.Windows.Ria.Services.SoapQueryHeader.OnWriteHeaderContents(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
            <summary>
            Called when the header content is serialized using the specified XML writer.
            </summary>
            <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter"/>.</param>
            <param name="messageVersion">Contains information related to the version of SOAP associated with a message 
            and its exchange.</param>
        </member>
        <member name="P:System.Windows.Ria.Services.SoapQueryHeader.Name">
            <summary>
            Gets the name of the message header.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.SoapQueryHeader.Namespace">
            <summary>
            Gets the namespace of the message header.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.Services.DomainServiceFault">
            <summary>
            Message type used to communicate exception results between server and client.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainServiceFault.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainServiceFault.GetValidationErrors">
            <summary>
            Get the validation errors 
            </summary>
            <returns>
            Collection of validation errors as <see cref="T:System.Collections.IEnumerable"/>.
            </returns>
        </member>
        <member name="P:System.Windows.Ria.Services.DomainServiceFault.ErrorCode">
            <summary>
            Gets or sets the custom code for the error.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.DomainServiceFault.ErrorMessage">
            <summary>
            Gets or sets the message giving details on the error.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.DomainServiceFault.IsDomainException">
            <summary>
            Gets or sets a value indicating whether the fault indicates that the error information 
            should be reconstructed on the client as a <see cref="T:System.Windows.Ria.DomainException"/> type.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.DomainServiceFault.StackTrace">
            <summary>
            Gets or sets the stack trace for the error.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.DomainServiceFault.OperationErrors">
            <summary>
            Gets or sets the validation errors that occurred during this request.
            </summary>
            <remarks>This is only used when a request invokes a single method, such as an invoke operation.</remarks>
        </member>
        <member name="T:System.Windows.Ria.EntityVisitor">
            <summary>
            Visits all EntityCollection/EntityRef members of an entity, allowing
            subclasses to perform work in overridden methods.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.EntityVisitor.Visit(System.Windows.Ria.Entity)">
            <summary>
            Visit members of the entity, calling the corresponding visit methods for each
            </summary>
            <param name="entity">The entity to visit</param>
        </member>
        <member name="M:System.Windows.Ria.EntityVisitor.VisitEntityCollection(System.Windows.Ria.IEntityCollection,System.Reflection.PropertyInfo)">
            <summary>
            Visit the specified <see cref="T:System.Windows.Ria.IEntityCollection"/>.
            </summary>
            <param name="entityCollection">The <see cref="T:System.Windows.Ria.IEntityCollection"/>.</param>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> for the collection member.</param>
        </member>
        <member name="M:System.Windows.Ria.EntityVisitor.VisitEntityRef(System.Windows.Ria.IEntityRef,System.Windows.Ria.Entity,System.Reflection.PropertyInfo)">
            <summary>
            Visit an <see cref="T:System.Windows.Ria.EntityRef`1"/> member
            </summary>
            <param name="entityRef">The EntityRef to visit.</param>
            <param name="parent">The parent of the reference member</param>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> for the reference member</param>
        </member>
        <member name="T:System.Windows.Ria.Services.ServiceQuery">
            <summary>
            Represents an <see cref="T:System.Linq.IQueryable"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.ServiceQuery.QueryParts">
            <summary>
            Gets or sets a list of query parts.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.Services.ServiceQueryPart">
            <summary>
            Represents a single query operator to be applied to a query
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Services.ServiceQueryPart.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Services.ServiceQueryPart.ToString">
            <summary>
            Returns a string representation of this <see cref="T:System.Windows.Ria.Services.ServiceQueryPart"/>
            </summary>
            <returns>The string representation of this <see cref="T:System.Windows.Ria.Services.ServiceQueryPart"/></returns>
        </member>
        <member name="P:System.Windows.Ria.Services.ServiceQueryPart.QueryOperator">
            <summary>
            Gets or sets the query operator. Must be one of the supported operators : "where", "orderby", "skip", or "take".
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.ServiceQueryPart.Expression">
            <summary>
            Gets or sets the query expression.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.Services.WebDomainClientAsyncResult`1">
            <summary>
            Internal <see cref="T:System.IAsyncResult"/> used during <see cref="T:System.Windows.Ria.Services.WebDomainClient`1"/> operations.
            </summary>
            <typeparam name="TContract">The contract type.</typeparam>
        </member>
        <member name="T:System.Windows.Ria.Services.DomainClientAsyncResult">
            <summary>
            Internal <see cref="T:System.IAsyncResult"/> used during <see cref="P:System.Windows.Ria.Services.DomainClientAsyncResult.DomainClient"/> operations.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClientAsyncResult.#ctor(System.Windows.Ria.Services.DomainClient,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new <see cref="T:System.Windows.Ria.Services.DomainClientAsyncResult"/> instance used for Query operations.
            </summary>
            <param name="domainClient">The associated <see cref="P:System.Windows.Ria.Services.DomainClientAsyncResult.DomainClient"/>.</param>
            <param name="callback">Optional <see cref="T:System.AsyncCallback"/> to invoke upon completion.</param>
            <param name="asyncState">Optional user state information that will be passed to the <paramref name="callback"/>.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="domainClient"/> is null.</exception>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClientAsyncResult.#ctor(System.Windows.Ria.Services.DomainClient,System.Windows.Ria.EntityChangeSet,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new <see cref="T:System.Windows.Ria.Services.DomainClientAsyncResult"/> instance used for Submit operations.
            </summary>
            <param name="domainClient">The associated <see cref="P:System.Windows.Ria.Services.DomainClientAsyncResult.DomainClient"/>.</param>
            <param name="entityChangeSet">The Submit operation <see cref="P:System.Windows.Ria.Services.DomainClientAsyncResult.EntityChangeSet"/>.</param>
            <param name="callback">Optional <see cref="T:System.AsyncCallback"/> to invoke upon completion.</param>
            <param name="asyncState">Optional user state information that will be passed to the <paramref name="callback"/>.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="domainClient"/> is null.</exception>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClientAsyncResult.#ctor(System.Windows.Ria.Services.DomainClient,System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new <see cref="T:System.Windows.Ria.Services.DomainClientAsyncResult"/> instance used for Invoke operations.
            </summary>
            <param name="domainClient">The associated <see cref="P:System.Windows.Ria.Services.DomainClientAsyncResult.DomainClient"/>.</param>
            <param name="parameters">The Invoke operation parameters.</param>
            <param name="returnType">The Invoke operation return type.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> to invoke upon completion.</param>
            <param name="asyncState">Optional user state information that will be passed to the <paramref name="callback"/>.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="domainClient"/> is null.</exception>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClientAsyncResult.CreateQueryResult(System.Windows.Ria.Services.DomainClient,System.AsyncCallback,System.Object)">
            <summary>
            Creates a new <see cref="T:System.Windows.Ria.Services.DomainClientAsyncResult"/> used for Query operations.
            </summary>
            <param name="domainClient">The <see cref="P:System.Windows.Ria.Services.DomainClientAsyncResult.DomainClient"/> associated with this result.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> to invoke upon completion.</param>
            <param name="asyncState">Optional user state information that will be passed to the <paramref name="callback"/>.</param>
            <returns>A <see cref="T:System.Windows.Ria.Services.DomainClientAsyncResult"/> used for Query operations</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClientAsyncResult.CreateSubmitResult(System.Windows.Ria.Services.DomainClient,System.Windows.Ria.EntityChangeSet,System.AsyncCallback,System.Object)">
            <summary>
            Creates a new <see cref="T:System.Windows.Ria.Services.DomainClientAsyncResult"/> used for Submit operations.
            </summary>
            <param name="domainClient">The associated <see cref="P:System.Windows.Ria.Services.DomainClientAsyncResult.DomainClient"/>.</param>
            <param name="entityChangeSet">The Submit operation <see cref="P:System.Windows.Ria.Services.DomainClientAsyncResult.EntityChangeSet"/>.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> to invoke upon completion.</param>
            <param name="asyncState">Optional user state information that will be passed to the <paramref name="callback"/>.</param>
            <returns>A <see cref="T:System.Windows.Ria.Services.DomainClientAsyncResult"/> used for Submit operations</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClientAsyncResult.CreateInvokeResult(System.Windows.Ria.Services.DomainClient,System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.AsyncCallback,System.Object)">
            <summary>
            Creates a new <see cref="T:System.Windows.Ria.Services.DomainClientAsyncResult"/> used for Invoke operations.
            </summary>
            <param name="domainClient">The associated <see cref="P:System.Windows.Ria.Services.DomainClientAsyncResult.DomainClient"/>.</param>
            <param name="parameters">The Invoke operation parameters.</param>
            <param name="returnType">The Invoke operation return type.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> to invoke upon completion.</param>
            <param name="asyncState">Optional user state information that will be passed to the <paramref name="callback"/>.</param>
            <returns>A <see cref="T:System.Windows.Ria.Services.DomainClientAsyncResult"/> used for Invoke operations</returns>
        </member>
        <member name="P:System.Windows.Ria.Services.DomainClientAsyncResult.DomainClient">
            <summary>
            Gets the <see cref="P:System.Windows.Ria.Services.DomainClientAsyncResult.DomainClient"/> associated with this result.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.DomainClientAsyncResult.EntityChangeSet">
            <summary>
            Gets the <see cref="P:System.Windows.Ria.Services.DomainClientAsyncResult.EntityChangeSet"/> used with Submit operations.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.DomainClientAsyncResult.ReturnType">
            <summary>
            Gets the return type used with Invoke operations.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.DomainClientAsyncResult.Parameters">
            <summary>
            Gets the parameters associated used with Invoke operations.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.DomainClientAsyncResult.AsyncOperationType">
            <summary>
            Gets the <see cref="P:System.Windows.Ria.Services.DomainClientAsyncResult.AsyncOperationType"/> describing this operation.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Services.WebDomainClientAsyncResult`1.#ctor(System.Windows.Ria.Services.WebDomainClient{`0},`0,System.Reflection.MethodInfo,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new <see cref="T:System.Windows.Ria.Services.WebDomainClientAsyncResult`1"/> instance used for Query operations.
            </summary>
            <param name="domainClient">The <see cref="T:System.Windows.Ria.Services.WebDomainClient`1"/> associated with this result.</param>
            <param name="channel">The channel used to communicate with the server.</param>
            <param name="endOperationMethod">The method that completes an asynchronous operation.</param>
            <param name="callback">Optional <see cref="T:System.AsyncCallback"/> to invoke upon completion.</param>
            <param name="asyncState">Optional user state information that will be passed to the <paramref name="callback"/>.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="domainClient"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="endOperationMethod"/> is null.</exception>
        </member>
        <member name="M:System.Windows.Ria.Services.WebDomainClientAsyncResult`1.#ctor(System.Windows.Ria.Services.WebDomainClient{`0},`0,System.Reflection.MethodInfo,System.Windows.Ria.EntityChangeSet,System.Collections.Generic.IEnumerable{System.Windows.Ria.ChangeSetEntry},System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new <see cref="T:System.Windows.Ria.Services.WebDomainClientAsyncResult`1"/> instance used for Submit operations.
            </summary>
            <param name="domainClient">The <see cref="T:System.Windows.Ria.Services.WebDomainClient`1"/> associated with this result.</param>
            <param name="channel">The channel used to communicate with the server.</param>
            <param name="endOperationMethod">The method that completes an asynchronous operation.</param>
            <param name="entityChangeSet">The Submit operation <see cref="T:System.Windows.Ria.EntityChangeSet"/>.</param>
            <param name="changeSetEntries">The collection of <see cref="T:System.Windows.Ria.ChangeSetEntry"/>s to submit.</param>
            <param name="callback">Optional <see cref="T:System.AsyncCallback"/> to invoke upon completion.</param>
            <param name="asyncState">Optional user state information that will be passed to the <paramref name="callback"/>.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="domainClient"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="endOperationMethod"/> is null.</exception>
        </member>
        <member name="M:System.Windows.Ria.Services.WebDomainClientAsyncResult`1.#ctor(System.Windows.Ria.Services.WebDomainClient{`0},`0,System.Reflection.MethodInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new <see cref="T:System.Windows.Ria.Services.WebDomainClientAsyncResult`1"/> instance used for Invoke operations.
            </summary>
            <param name="domainClient">The <see cref="T:System.Windows.Ria.Services.WebDomainClient`1"/> associated with this result.</param>
            <param name="channel">The channel used to communicate with the server.</param>
            <param name="endOperationMethod">The method that completes an asynchronous operation.</param>
            <param name="parameters">The Invoke operation parameters.</param>
            <param name="returnType">The Invoke operation return type.</param>
            <param name="callback">Optional <see cref="T:System.AsyncCallback"/> to invoke upon completion.</param>
            <param name="asyncState">Optional user state information that will be passed to the <paramref name="callback"/>.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="domainClient"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="endOperationMethod"/> is null.</exception>
        </member>
        <member name="M:System.Windows.Ria.Services.WebDomainClientAsyncResult`1.CreateQueryResult(System.Windows.Ria.Services.WebDomainClient{`0},`0,System.Reflection.MethodInfo,System.AsyncCallback,System.Object)">
            <summary>
            Creates a new <see cref="T:System.Windows.Ria.Services.WebDomainClientAsyncResult`1"/> used for Query operations.
            </summary>
            <param name="domainClient">The <see cref="T:System.Windows.Ria.Services.WebDomainClient`1"/> associated with this result.</param>
            <param name="channel">The channel used to communicate with the server.</param>
            <param name="endOperationMethod">The method that completes an asynchronous operation.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> to invoke upon completion.</param>
            <param name="asyncState">Optional user state information that will be passed to the <paramref name="callback"/>.</param>
            <returns>A <see cref="T:System.Windows.Ria.Services.WebDomainClientAsyncResult`1"/> used for Query operations</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.WebDomainClientAsyncResult`1.CreateSubmitResult(System.Windows.Ria.Services.WebDomainClient{`0},`0,System.Reflection.MethodInfo,System.Windows.Ria.EntityChangeSet,System.Collections.Generic.IEnumerable{System.Windows.Ria.ChangeSetEntry},System.AsyncCallback,System.Object)">
            <summary>
            Creates a new <see cref="T:System.Windows.Ria.Services.WebDomainClientAsyncResult`1"/> used for Submit operations.
            </summary>
            <param name="domainClient">The <see cref="T:System.Windows.Ria.Services.WebDomainClient`1"/> associated with this result.</param>
            <param name="channel">The channel used to communicate with the server.</param>
            <param name="endOperationMethod">The method that completes an asynchronous operation.</param>
            <param name="entityChangeSet">The Submit operation <see cref="T:System.Windows.Ria.EntityChangeSet"/>.</param>
            <param name="changeSetEntries">The collection of <see cref="T:System.Windows.Ria.ChangeSetEntry"/>s to submit.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> to invoke upon completion.</param>
            <param name="asyncState">Optional user state information that will be passed to the <paramref name="callback"/>.</param>
            <returns>A <see cref="T:System.Windows.Ria.Services.WebDomainClientAsyncResult`1"/> used for Submit operations</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.WebDomainClientAsyncResult`1.CreateInvokeResult(System.Windows.Ria.Services.WebDomainClient{`0},`0,System.Reflection.MethodInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.AsyncCallback,System.Object)">
            <summary>
            Creates a new <see cref="T:System.Windows.Ria.Services.WebDomainClientAsyncResult`1"/> used for Invoke operations.
            </summary>
            <param name="domainClient">The <see cref="T:System.Windows.Ria.Services.WebDomainClient`1"/> associated with this result.</param>
            <param name="channel">The channel used to communicate with the server.</param>
            <param name="endOperationMethod">The method that completes an asynchronous operation.</param>
            <param name="parameters">The Invoke operation parameters.</param>
            <param name="returnType">The Invoke operation return type.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> to invoke upon completion.</param>
            <param name="asyncState">Optional user state information that will be passed to the <paramref name="callback"/>.</param>
            <returns>A <see cref="T:System.Windows.Ria.Services.WebDomainClientAsyncResult`1"/> used for Invoke operations</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.WebDomainClientAsyncResult`1.Cancel">
            <summary>
            Attempts to cancel this operation and aborts the underlying request if cancellation was successfully requested.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.WebDomainClientAsyncResult`1.ChangeSetEntries">
            <summary>
            Gets a collection of <see cref="T:System.Windows.Ria.ChangeSetEntry"/>s used with Submit operations.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.WebDomainClientAsyncResult`1.Channel">
            <summary>
            Gets the channel used to communicate with the server.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.WebDomainClientAsyncResult`1.EndOperationMethod">
            <summary>
            Gets the method that completes an asynchronous operation.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.Services.WebDomainClient`1">
            <summary>
            Default <see cref="T:System.Windows.Ria.Services.DomainClient"/> implementation using WCF
            </summary>
            <typeparam name="TContract">The contract type.</typeparam>
        </member>
        <member name="T:System.Windows.Ria.Services.DomainClient">
            <summary>
            Base class for all <see cref="T:System.Windows.Ria.Services.DomainClient"/> implementations. A <see cref="T:System.Windows.Ria.Services.DomainClient"/> is
            used to communicate with a data source asynchronously, providing query, method invocation
            and changeset submission functionality.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClient.BeginQuery(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Linq.IQueryable,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Executes an asynchronous query operation.
            </summary>
            <param name="queryName">The name of the query to invoke.</param>
            <param name="parameters">Optional name/value collection of parameters to the method.</param>
            <param name="query">Optional query to be sent to the server for composition over the method results.</param>
            <param name="hasSideEffects">True if the query has side-effects, false otherwise.</param>
            <param name="callback">The callback to invoke when the query has been executed.</param>
            <param name="userState">Optional user state associated with this operation.</param>
            <returns>An asynchronous result that identifies this query.</returns>
            <remarks>
            Queries with side-effects may be invoked differently. For example, clients that invoke a DomainService 
            over HTTP may use POST requests for queries with side-effects, while GET may be used otherwise.
            </remarks>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClient.BeginQueryCore(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Linq.IQueryable,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Method called by the framework to begin the asynchronous query operation
            </summary>
            <param name="queryName">The name of the query to invoke.</param>
            <param name="parameters">Optional name/value collection of parameters to the method.</param>
            <param name="query">Optional query to be sent to the server for composition over the method results.</param>
            <param name="hasSideEffects">True if the query has side-effects, false otherwise.</param>
            <param name="callback">The callback to invoke when the query has been executed.</param>
            <param name="userState">Optional user state associated with this operation.</param>
            <returns>An asynchronous result that identifies this query.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClient.CancelQuery(System.IAsyncResult)">
            <summary>
            Attempts to cancel the query request specified by the <paramref name="asyncResult"/>.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> specifying what query operation to cancel.</param>
            <exception cref="T:System.ArgumentNullException"> if <paramref name="asyncResult"/> is null.</exception>
            <exception cref="T:System.ArgumentException"> if <paramref name="asyncResult"/> is for another operation or was not created by this <see cref="T:System.Windows.Ria.Services.DomainClient"/> instance.</exception>
            <exception cref="T:System.InvalidOperationException"> if the operation associated with <paramref name="asyncResult"/> has been canceled.</exception>
            <exception cref="T:System.InvalidOperationException"> if the operation associated with <paramref name="asyncResult"/> has completed.</exception>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClient.CancelQueryCore(System.IAsyncResult)">
            <summary>
            Attempts to cancel the query request specified by the <paramref name="asyncResult"/>.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> specifying what query operation to cancel.</param>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClient.EndQuery(System.IAsyncResult)">
            <summary>
            Gets the results of an asynchronous query operation.
            </summary>
            <param name="asyncResult">An asynchronous result that identifies a query.</param>
            <returns>The results returned by the query.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClient.EndQueryCore(System.IAsyncResult)">
            <summary>
            Method called by the framework to complete the asynchronous query operation
            </summary>
            <param name="asyncResult">An asynchronous result that identifies a query.</param>
            <returns>The results returned by the query.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClient.BeginSubmit(System.Windows.Ria.EntityChangeSet,System.AsyncCallback,System.Object)">
            <summary>
            Submits the specified change set to the domain service asynchronously.
            </summary>
            <param name="changeSet">The <see cref="T:System.Windows.Ria.EntityChangeSet"/> to submit to the domain service.</param>
            <param name="callback">The callback to invoke when the submit has been executed.</param>
            <param name="userState">Optional user state associated with this operation.</param>
            <returns>An asynchronous result that identifies this submit request.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClient.BeginSubmitCore(System.Windows.Ria.EntityChangeSet,System.AsyncCallback,System.Object)">
            <summary>
            Method called by the framework to asynchronously process the specified changeset.
            Overrides should not call the base method.
            </summary>
            <param name="changeSet">The <see cref="T:System.Windows.Ria.EntityChangeSet"/> to submit to the domain service.</param>
            <param name="callback">The callback to invoke when the submit has been executed.</param>
            <param name="userState">Optional user state associated with this operation.</param>
            <returns>An asynchronous result that identifies this submit request.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClient.CancelSubmit(System.IAsyncResult)">
            <summary>
            Attempts to cancel the submit request specified by the <paramref name="asyncResult"/>.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> specifying what submit operation to cancel.</param>
            <exception cref="T:System.ArgumentNullException"> if <paramref name="asyncResult"/> is null.</exception>
            <exception cref="T:System.ArgumentException"> if <paramref name="asyncResult"/> is for another operation or was not created by this <see cref="T:System.Windows.Ria.Services.DomainClient"/> instance.</exception>
            <exception cref="T:System.InvalidOperationException"> if the operation associated with <paramref name="asyncResult"/> has been canceled.</exception>
            <exception cref="T:System.InvalidOperationException"> if the operation associated with <paramref name="asyncResult"/> has completed.</exception>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClient.CancelSubmitCore(System.IAsyncResult)">
            <summary>
            Attempts to cancel the submit request specified by the <paramref name="asyncResult"/>.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> specifying what submit operation to cancel.</param>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClient.EndSubmit(System.IAsyncResult)">
            <summary>
            Gets the results of a submit.
            </summary>
            <param name="asyncResult">An asynchronous result that identifies a submit request.</param>
            <returns>The results returned by the submit request.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClient.EndSubmitCore(System.IAsyncResult)">
            <summary>
            Method called by the framework to complete an asynchronous submit operation
            </summary>
            <param name="asyncResult">An asynchronous result that identifies a submit request.</param>
            <returns>The results returned by the submit request.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClient.BeginInvoke(System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Invokes an operation asynchronously.
            </summary>
            <param name="operationName">The name of the operation to invoke.</param>
            <param name="returnType">The Type of return value for the method.</param>
            <param name="parameters">Optional name/value collection of parameters to the method.</param>
            <param name="hasSideEffects">True if the operation has side-effects, false otherwise.</param>
            <param name="callback">The callback to invoke when the invocation has been completed.</param>
            <param name="userState">Optional user state associated with this operation.</param>
            <returns>An asynchronous result that identifies this invocation.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClient.BeginInvokeCore(System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Method called by the framework to invoke an invoke operation asynchronously. Overrides
            should not call the base method.
            </summary>
            <param name="operationName">The name of the operation to invoke.</param>
            <param name="returnType">The Type of return value for the method.</param>
            <param name="parameters">Optional name/value collection of parameters to the method.</param>
            <param name="hasSideEffects">True if the operation has side-effects, false otherwise.</param>
            <param name="callback">The callback to invoke when the invocation has been completed.</param>
            <param name="userState">Optional user state associated with this operation.</param>
            <returns>An asynchronous result that identifies this invocation.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClient.CancelInvoke(System.IAsyncResult)">
            <summary>
            Attempts to cancel the invocation request specified by the <paramref name="asyncResult"/>.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> specifying what invocation operation to cancel.</param>
            <exception cref="T:System.ArgumentNullException"> if <paramref name="asyncResult"/> is null.</exception>
            <exception cref="T:System.ArgumentException"> if <paramref name="asyncResult"/> is for another operation or was not created by this <see cref="T:System.Windows.Ria.Services.DomainClient"/> instance.</exception>
            <exception cref="T:System.InvalidOperationException"> if the operation associated with <paramref name="asyncResult"/> has been canceled.</exception>
            <exception cref="T:System.InvalidOperationException"> if the operation associated with <paramref name="asyncResult"/> has completed.</exception>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClient.CancelInvokeCore(System.IAsyncResult)">
            <summary>
            Attempts to cancel the invocation request specified by the <paramref name="asyncResult"/>.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> specifying what invocation operation to cancel.</param>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClient.EndInvoke(System.IAsyncResult)">
            <summary>
            Completes an operation invocation.
            </summary>
            <param name="asyncResult">An asynchronous result that identifies an invocation.</param>
            <returns>The results returned by the invocation.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClient.EndInvokeCore(System.IAsyncResult)">
            <summary>
            Method called by the framework to complete an asynchronous invocation
            </summary>
            <param name="asyncResult">An asynchronous result that identifies an invocation.</param>
            <returns>The results returned by the invocation.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClient.EndAsyncResult(System.IAsyncResult,System.Windows.Ria.Services.AsyncOperationType,System.Boolean)">
            <summary>
            Transitions an <see cref="T:System.IAsyncResult"/> instance to a completed state.
            </summary>
            <param name="asyncResult">An asynchronous result that identifies an invocation.</param>
            <param name="operationType">The expected operation type.</param>
            <param name="cancel">Boolean indicating whether or not the operation has been canceled.</param>
            <returns>A <see cref="T:System.Windows.Ria.Services.DomainClientAsyncResult"/> reference.</returns>
            <exception cref="T:System.ArgumentNullException"> if <paramref name="asyncResult"/> is null.</exception>
            <exception cref="T:System.ArgumentException"> if <paramref name="asyncResult"/> is for another operation or was not created by this <see cref="T:System.Windows.Ria.Services.DomainClient"/> instance.</exception>
            <exception cref="T:System.InvalidOperationException"> if <paramref name="asyncResult"/> has been canceled.</exception>
            <exception cref="T:System.InvalidOperationException"> if <paramref name="asyncResult"/>'s End* method has already been invoked.</exception>
            <exception cref="T:System.InvalidOperationException"> if <paramref name="asyncResult"/> has not completed.</exception>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClient.VerifyCancellationSupport">
            <summary>
            Throws an exception if cancellation is not supported.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.DomainClient.EntityTypes">
            <summary>
            Gets or sets the collection of Entity Types this <see cref="T:System.Windows.Ria.Services.DomainClient"/> will operate on.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.DomainClient.SupportsCancellation">
            <summary>
            Gets a value that indicates whether the <see cref="T:System.Windows.Ria.Services.DomainClient"/> supports cancellation.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Services.WebDomainClient`1.#ctor(System.Uri)">
            <summary>
            Public constructor
            </summary>
            <param name="serviceUri">The domain service Uri</param>
            <exception cref="T:System.ArgumentNullException"> is thrown if <paramref name="serviceUri"/>
            is null.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.Services.WebDomainClient`1.#ctor(System.Uri,System.Boolean)">
            <summary>
            Public constructor
            </summary>
            <param name="serviceUri">The domain service Uri</param>
            <param name="usesHttps">A value indicating whether the client should contact
            the service using an HTTP or HTTPS scheme.
            </param>
            <exception cref="T:System.ArgumentNullException"> is thrown if <paramref name="serviceUri"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException"> is thrown if <paramref name="serviceUri"/>
            is absolute and <paramref name="usesHttps"/> is true.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.Services.WebDomainClient`1.#ctor(System.Uri,System.Boolean,System.ServiceModel.Channels.Binding)">
            <summary>
            Private constructor. Should be made public once we have an end-to-end extensibility story on top of WCF.
            </summary>
            <param name="serviceUri">The domain service Uri</param>
            <param name="usesHttps">A value indicating whether the client should contact
            the service using an HTTP or HTTPS scheme.
            </param>
            <param name="binding">The binding to use to communicate with the server.</param>
            <exception cref="T:System.ArgumentNullException"> is thrown if <paramref name="serviceUri"/>
            is null.
            </exception>
            <exception cref="T:System.ArgumentException"> is thrown if <paramref name="serviceUri"/>
            is absolute and <paramref name="usesHttps"/> is true.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.Services.WebDomainClient`1.CreateChannelFactory">
            <summary>
            Creates a channel factory.
            </summary>
            <returns>The channel used to communicate with the server.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.WebDomainClient`1.BeginQueryCore(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Linq.IQueryable,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Method called by the framework to begin an asynchronous query operation
            </summary>
            <param name="queryName">The name of the query to invoke.</param>
            <param name="parameters">Optional collection of name value parameter value pairs.</param>
            <param name="query">Optional query to filter results by.</param>
            <param name="hasSideEffects">True if the query has side-effects, false otherwise.</param>
            <param name="callback">The callback to invoke when the query has been executed.</param>
            <param name="userState">Optional state associated with this operation.</param>
            <returns>An asynchronous result that identifies this query.</returns>
            <exception cref="T:System.InvalidOperationException">The specified query does not exist.</exception>
        </member>
        <member name="M:System.Windows.Ria.Services.WebDomainClient`1.CancelQueryCore(System.IAsyncResult)">
            <summary>
            Attempts to cancel the query request specified by the <paramref name="asyncResult"/>.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> specifying what query operation to cancel.</param>
        </member>
        <member name="M:System.Windows.Ria.Services.WebDomainClient`1.EndQueryCore(System.IAsyncResult)">
            <summary>
            Gets the results of a query.
            </summary>
            <param name="asyncResult">An asynchronous result that identifies a query.</param>
            <returns>The results returned by the query.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.WebDomainClient`1.BeginSubmitCore(System.Windows.Ria.EntityChangeSet,System.AsyncCallback,System.Object)">
            <summary>
            Submit the specified <see cref="T:System.Windows.Ria.EntityChangeSet"/> to the DomainService, with the results of the operation
            being returned on the SubmitCompleted event args.
            </summary>
            <param name="changeSet">The changeset to submit. If the changeset is empty, an <see cref="T:System.InvalidOperationException"/> will
            be thrown.</param>
            <param name="callback">The callback to invoke when the submit has been executed.</param>
            <param name="userState">Optional state that will flow through to the SubmitCompleted event</param>
            <returns>An asynchronous result that identifies this submit.</returns>
            <exception cref="T:System.InvalidOperationException">The changeset is empty.</exception>
            <exception cref="T:System.InvalidOperationException">The specified query does not exist.</exception>
        </member>
        <member name="M:System.Windows.Ria.Services.WebDomainClient`1.CancelSubmitCore(System.IAsyncResult)">
            <summary>
            Attempts to cancel the submit request specified by the <paramref name="asyncResult"/>.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> specifying what submit operation to cancel.</param>
        </member>
        <member name="M:System.Windows.Ria.Services.WebDomainClient`1.EndSubmitCore(System.IAsyncResult)">
            <summary>
            Gets the results of a submit.
            </summary>
            <param name="asyncResult">An asynchronous result that identifies a submit.</param>
            <returns>The results returned by the submit.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.WebDomainClient`1.BeginInvokeCore(System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Invokes an operation asynchronously.
            </summary>
            <param name="operationName">The name of the operation to invoke.</param>
            <param name="returnType">The <see cref="T:System.Type"/> of the method return value</param>
            <param name="parameters">Optional name/value collection of parameters to the method.</param>
            <param name="hasSideEffects">True if the operation has side-effects, false otherwise.</param>
            <param name="callback">The callback to invoke when the invocation has been completed.</param>
            <param name="userState">Optional user state that will be passed through on the <see cref="T:System.Windows.Ria.InvokeCompletedResult"/>.</param>
            <returns>An asynchronous result that identifies this invocation.</returns>
            <exception cref="T:System.InvalidOperationException">The specified query does not exist.</exception>
        </member>
        <member name="M:System.Windows.Ria.Services.WebDomainClient`1.CancelInvokeCore(System.IAsyncResult)">
            <summary>
            Attempts to cancel the invocation request specified by the <paramref name="asyncResult"/>.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> specifying what invocation operation to cancel.</param>
        </member>
        <member name="M:System.Windows.Ria.Services.WebDomainClient`1.EndInvokeCore(System.IAsyncResult)">
            <summary>
            Gets the results of an invocation.
            </summary>
            <param name="asyncResult">An asynchronous result that identifies an invocation.</param>
            <returns>The results returned by the invocation.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.WebDomainClient`1.EndAsyncResult(System.IAsyncResult,System.Windows.Ria.Services.AsyncOperationType,System.Boolean)">
            <summary>
            Transitions an <see cref="T:System.IAsyncResult"/> instance to a completed state.
            </summary>
            <param name="asyncResult">An asynchronous result that identifies an invocation.</param>
            <param name="operationType">The expected operation type.</param>
            <param name="cancel">Boolean indicating whether or not the operation has been canceled.</param>
            <returns>A <see cref="T:System.Windows.Ria.Services.WebDomainClientAsyncResult`1"/> reference.</returns>
            <exception cref="T:System.ArgumentNullException"> if <paramref name="asyncResult"/> is null.</exception>
            <exception cref="T:System.ArgumentException"> if <paramref name="asyncResult"/> is not of type <typeparamref name="TAsyncResult"/>.</exception>
            <exception cref="T:System.InvalidOperationException"> if <paramref name="asyncResult"/> has been canceled.</exception>
            <exception cref="T:System.InvalidOperationException"> if <paramref name="asyncResult"/>'s End* method has already been invoked.</exception>
            <exception cref="T:System.InvalidOperationException"> if <paramref name="asyncResult"/> has not completed.</exception>
        </member>
        <member name="M:System.Windows.Ria.Services.WebDomainClient`1.GetExceptionFromServiceFault(System.Windows.Ria.Services.DomainServiceFault)">
            <summary>
            Constructs an exception based on a service fault.
            </summary>
            <param name="serviceFault">The fault received from a service.</param>
            <returns>The constructed exception.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.WebDomainClient`1.ComposeAbsoluteServiceUri">
            <summary>
            If the service Uri is relative, this method uses the application
            source to create an absolute Uri.
            </summary>
            <remarks>
            If usesHttps in the constructor was true, the Uri will be created using
            a https scheme instead.
            </remarks>
        </member>
        <member name="P:System.Windows.Ria.Services.WebDomainClient`1.ServiceUri">
            <summary>
            Gets the absolute path to the domain service.
            </summary>
            <remarks>
            The value returned is either the absolute Uri passed into the constructor, or
            an absolute Uri constructed from the relative Uri passed into the constructor.
            Relative Uris will be made absolute using the Application Host source.
            </remarks>
        </member>
        <member name="P:System.Windows.Ria.Services.WebDomainClient`1.SupportsCancellation">
            <summary>
            Gets a value that indicates whether the <see cref="T:System.Windows.Ria.Services.DomainClient"/> supports cancellation.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.WebDomainClient`1.UsesHttps">
            <summary>
            Gets whether a secure connection should be used.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.WebDomainClient`1.KnownTypes">
            <summary>
            Gets the list of known types.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.ChangeSetBuilder">
            <summary>
            Takes a <see cref="T:System.Windows.Ria.EntityChangeSet"/> and builds the corresponding set of 
            <see cref="T:System.Windows.Ria.ChangeSetEntry"/> instances that should be sent to the server.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ChangeSetBuilder.Build(System.Windows.Ria.EntityChangeSet)">
            <summary>
            Builds an operation list for the specified <see cref="T:System.Windows.Ria.EntityChangeSet"/>.
            </summary>
            <param name="changeSet">The <see cref="T:System.Windows.Ria.EntityChangeSet"/>.</param>
            <returns>The list of <see cref="T:System.Windows.Ria.ChangeSetEntry"/> for the specified <see cref="T:System.Windows.Ria.EntityChangeSet"/>.</returns>
        </member>
        <member name="M:System.Windows.Ria.ChangeSetBuilder.BuildOperations(System.Windows.Ria.EntityChangeSet)">
            <summary>
            Builds the list of submit operations from the current <see cref="T:System.Windows.Ria.EntityChangeSet"/>.
            </summary>
            <param name="changeSet">The <see cref="T:System.Windows.Ria.EntityChangeSet"/> to process.</param>
            <returns>The list of <see cref="T:System.Windows.Ria.ChangeSetEntry"/> for the specified <see cref="T:System.Windows.Ria.EntityChangeSet"/>.</returns>
        </member>
        <member name="M:System.Windows.Ria.ChangeSetBuilder.CheckForInvalidUpdates(System.Windows.Ria.EntityChangeSet)">
            <summary>
            Verify that all update operations in the specified <see cref="T:System.Windows.Ria.EntityChangeSet"/> are permitted.
            </summary>
            <param name="changeSet">The <see cref="T:System.Windows.Ria.EntityChangeSet"/> to check.</param>
        </member>
        <member name="T:System.Windows.Ria.ChangeSetBuilder.UnmodifiedOperationAdder">
            <summary>
            This visitor recursively visits all composed entities in a
            changeset and adds ChangeSetEntries for Unmodified entities.
            Note that this visitor forces all compositional associations
            to load.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.ChangeSetBuilder.AssociationMapBuilder">
            <summary>
            Visits all association members of entities in a changeset, setting the
            association maps for each
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ChangeSetBuilder.AssociationMapBuilder.Build(System.Collections.Generic.List{System.Windows.Ria.ChangeSetEntry})">
            <summary>
            Build the association maps for the specified changeset. The goal is to ensure that for all Association
            members in the changeset that reference other entities in the changeset by reference or by FK values,
            these associations are added to the Association map for the parent entities.
            </summary>
            <param name="changeSetEntries">The changeset operations</param>
        </member>
        <member name="M:System.Windows.Ria.ChangeSetBuilder.AssociationMapBuilder.#ctor(System.Collections.Generic.List{System.Windows.Ria.ChangeSetEntry})">
            <summary>
            Private constructor
            </summary>
            <param name="changeSetEntries">The changeset operations</param>
        </member>
        <member name="M:System.Windows.Ria.ChangeSetBuilder.AssociationMapBuilder.Build">
            <summary>
            Build and set the association maps for all operations in the specified changeset
            </summary>
        </member>
        <member name="T:System.Windows.Ria.Services.QueryResult">
            <summary>
            Message type used to communicate query results between server and client.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Services.QueryResult.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Services.QueryResult.GetRootResults">
            <summary>
            Gets the root results.
            </summary>
            <returns>The root results.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.QueryResult.GetIncludedResults">
            <summary>
            Gets the included results.
            </summary>
            <returns>The included results.</returns>
        </member>
        <member name="P:System.Windows.Ria.Services.QueryResult.TotalCount">
            <summary>
            Gets or sets the total number of rows for the original query without any paging applied to it.
            If the value is -1, the server did not support total-counts. If it's -2, the total-count 
            is the same as the number of entities in the result-set.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.QueryResult.ResultCount">
            <summary>
            Gets or sets the total number of rows returned as a result of the query.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.Services.QueryResult`1">
            <summary>
            Message type used to communicate query results between server and client.
            </summary>
            <typeparam name="T">The data type.</typeparam>
        </member>
        <member name="M:System.Windows.Ria.Services.QueryResult`1.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Services.QueryResult`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructs a result with the specified collection of result items.
            </summary>
            <param name="results">The results</param>
        </member>
        <member name="M:System.Windows.Ria.Services.QueryResult`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)">
            <summary>
            Constructs a result with the specified collection of query result items.
            </summary>
            <param name="results">The query results.</param>
            <param name="resultCount">The total number of rows returned as a result of the query.</param>
            <param name="totalCount">The total number of rows based on the input query, but without 
            any paging applied to it.</param>
        </member>
        <member name="M:System.Windows.Ria.Services.QueryResult`1.GetRootResults">
            <summary>
            Gets the root results.
            </summary>
            <returns>The root results.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.QueryResult`1.GetIncludedResults">
            <summary>
            Gets the included results.
            </summary>
            <returns>The included results.</returns>
        </member>
        <member name="P:System.Windows.Ria.Services.QueryResult`1.RootResults">
            <summary>
            Returns the top-level query results.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.QueryResult`1.IncludedResults">
            <summary>
            Returns the included query results.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.Services.AsyncOperationType">
            <summary>
            Internal enumeration used to qualify operation results.
            </summary>
        </member>
        <member name="F:System.Windows.Ria.Services.AsyncOperationType.None">
            <summary>
            No operation.
            </summary>
        </member>
        <member name="F:System.Windows.Ria.Services.AsyncOperationType.Invoke">
            <summary>
            An invoke operation.
            </summary>
        </member>
        <member name="F:System.Windows.Ria.Services.AsyncOperationType.Query">
            <summary>
            A query operation.
            </summary>
        </member>
        <member name="F:System.Windows.Ria.Services.AsyncOperationType.Submit">
            <summary>
            A submit operation.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.Services.DomainClientResult">
            <summary>
            Class representing the result of a <see cref="T:System.Windows.Ria.Services.DomainClient"/> operation.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClientResult.CreateInvokeResult(System.Object,System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Creates an invoke result.
            </summary>
            <param name="returnValue">The return value.</param>
            <param name="validationErrors">Collection of validation errors for the invocation.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClientResult.CreateQueryResult(System.Collections.Generic.IEnumerable{System.Windows.Ria.Entity},System.Collections.Generic.IEnumerable{System.Windows.Ria.Entity},System.Int32,System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Creates a query result.
            </summary>
            <param name="entities">The top level entities returned from the query.</param>
            <param name="allEntities">All entities returned from the query.</param>
            <param name="totalEntityCount">The total server count of entities.</param>
            <param name="validationErrors">Collection of validation errors for the invocation.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.DomainClientResult.CreateSubmitResult">
            <summary>
            Creates a submit result.
            </summary>
            <returns>The submit result.</returns>
        </member>
        <member name="P:System.Windows.Ria.Services.DomainClientResult.Entities">
            <summary>
            Gets the entity results.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.DomainClientResult.AllEntities">
            <summary>
            Gets all entity results, including associated entities.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.DomainClientResult.ReturnValue">
            <summary>
            Gets the return value of an invoke operation. Can be null.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.DomainClientResult.ValidationErrors">
            <summary>
            Gets the colleciton or validation errors.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.DomainClientResult.TotalEntityCount">
            <summary>
            Gets the total server row count for the original query without any paging applied to it.
            If the value is -1, the server did not support total-counts. If it's -2, the total-count 
            is the same as the number of entities in the result-set.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.EntityAction">
            <summary>
            Represents an entity action object
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Ria.EntityAction.#ctor(System.String,System.Object[])">
            <summary>
            Public constructor
            </summary>
            <param name="name">name of the entity action</param>
            <param name="parameters">parameters list to invoke entity action with</param>
        </member>
        <member name="P:System.Windows.Ria.EntityAction.Name">
            <summary>
            Gets the name of the entity action
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntityAction.Parameters">
            <summary>
            Gets the parameters to invoke the entity action with
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntityAction.HasParameters">
            <summary>
            Gets whether any parameters were associated with this action.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.EntityCollectionChangedEventArgs`1">
            <summary>
            Event arguments for strongly typed add/remove notifications for collections
            containing entities.
            </summary>
            <typeparam name="TEntity">The <see cref="P:System.Windows.Ria.EntityCollectionChangedEventArgs`1.Entity"/> type</typeparam>
        </member>
        <member name="M:System.Windows.Ria.EntityCollectionChangedEventArgs`1.#ctor(`0)">
            <summary>
            Public constructor
            </summary>
            <param name="entity">The affected <see cref="P:System.Windows.Ria.EntityCollectionChangedEventArgs`1.Entity"/></param>
        </member>
        <member name="P:System.Windows.Ria.EntityCollectionChangedEventArgs`1.Entity">
            <summary>
            The affected <see cref="P:System.Windows.Ria.EntityCollectionChangedEventArgs`1.Entity"/>
            </summary>
        </member>
        <member name="T:System.Windows.Ria.EntityOperationType">
            <summary>
            Enumeration of the types of operations that can be performed on an <see cref="T:System.Windows.Ria.Entity"/>
            </summary>
        </member>
        <member name="F:System.Windows.Ria.EntityOperationType.None">
            <summary>
            Indicates that no operation is to be performed on the <see cref="T:System.Windows.Ria.Entity"/>
            </summary>
        </member>
        <member name="F:System.Windows.Ria.EntityOperationType.Insert">
            <summary>
            Indicates an insert operation for a new <see cref="T:System.Windows.Ria.Entity"/>
            </summary>
        </member>
        <member name="F:System.Windows.Ria.EntityOperationType.Update">
            <summary>
            Indicates an update operation for an existing <see cref="T:System.Windows.Ria.Entity"/>
            </summary>
        </member>
        <member name="F:System.Windows.Ria.EntityOperationType.Delete">
            <summary>
            Indicates a delete operation for an existing <see cref="T:System.Windows.Ria.Entity"/>
            </summary>
        </member>
        <member name="T:System.Windows.Ria.EntityQuery">
            <summary>
            Class representing a query method invocation. LINQ query operators can
            also be applied to the query.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.EntityQuery.#ctor(System.Windows.Ria.Services.DomainClient,System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
            Public Constructor
            </summary>
            <param name="domainClient">The <see cref="P:System.Windows.Ria.EntityQuery.DomainClient"/> for the query.</param>
            <param name="queryName">The name of the query method.</param>
            <param name="entityType">The Type this query queries over.</param>
            <param name="parameters">Optional parameters to the query method. Specify null
            if the method takes no parameters.</param>
            <param name="hasSideEffects">True if the query has side-effects, false otherwise.</param>
            <param name="isComposable">True if the query supports composition, false otherwise.</param>
        </member>
        <member name="M:System.Windows.Ria.EntityQuery.#ctor(System.Windows.Ria.EntityQuery,System.Linq.IQueryable)">
            <summary>
            Constructor used to create a new query based on an existing "base"
            query. Constructs a query with the same properties as the base query
            using the specified IQueryable as the new query.
            </summary>
            <param name="baseQuery">The existing query.</param>
            <param name="query">The new query.</param>
        </member>
        <member name="P:System.Windows.Ria.EntityQuery.DomainClient">
            <summary>
            Gets the DomainClient for this query.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntityQuery.QueryName">
            <summary>
            Gets the name of the query method.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntityQuery.Parameters">
            <summary>
            Optional parameters required by the query method. Returns null
            if the method takes no parameters.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntityQuery.HasSideEffects">
            <summary>
            Gets a value indicating whether the query has side-effects.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntityQuery.IsComposable">
            <summary>
            Gets a value indicating whether the query supports composition.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntityQuery.Query">
            <summary>
            Gets the LINQ query for the query method invocation. Returns
            null if no query exists.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntityQuery.EntityType">
            <summary>
            Gets the Type this query queries over.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.EntityQuery`1">
            <summary>
            Class representing a LINQ query over a collection of entities.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
        </member>
        <member name="P:System.Windows.Ria.EntityQuery`1.QueryRoot">
            <summary>
            If a query exists it is returned, otherwise a "dummy"
            root is returned.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.EntityQueryable">
            <summary>
            Class containing static extension methods implementing a subset of
            the LINQ pattern for <see cref="T:System.Windows.Ria.EntityQuery"/>
            </summary>
        </member>
        <member name="M:System.Windows.Ria.EntityQueryable.OrderBy``2(System.Windows.Ria.EntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Applies the specified ascending order clause to the source query.
            </summary>
            <typeparam name="TEntity">The entity Type being queried.</typeparam>
            <typeparam name="TKey">The type of the member being ordered by.</typeparam>
            <param name="source">The source query.</param>
            <param name="keySelector">The expression selecting the member to order by.</param>
            <returns>The composed query.</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityQueryable.OrderByDescending``2(System.Windows.Ria.EntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Applies the specified descending order clause to the source query.
            </summary>
            <typeparam name="TEntity">The entity Type being queried.</typeparam>
            <typeparam name="TKey">The type of the member being ordered by.</typeparam>
            <param name="source">The source query.</param>
            <param name="keySelector">The expression selecting the member to order by.</param>
            <returns>The composed query.</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityQueryable.Skip``1(System.Windows.Ria.EntityQuery{``0},System.Int32)">
            <summary>
            Applies the specified skip clause to the source query.
            </summary>
            <typeparam name="TEntity">The entity Type being queried.</typeparam>
            <param name="source">The source query.</param>
            <param name="count">The number to skip.</param>
            <returns>The composed query.</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityQueryable.Take``1(System.Windows.Ria.EntityQuery{``0},System.Int32)">
            <summary>
            Applies the specified take clause to the source query.
            </summary>
            <typeparam name="TEntity">The entity Type being queried.</typeparam>
            <param name="source">The source query.</param>
            <param name="count">The number to take.</param>
            <returns>The composed query.</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityQueryable.ThenBy``2(System.Windows.Ria.EntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Applies the specified ascending order clause to the source query.
            </summary>
            <typeparam name="TEntity">The entity Type being queried.</typeparam>
            <typeparam name="TKey">The type of the member being ordered by.</typeparam>
            <param name="source">The source query.</param>
            <param name="keySelector">The expression selecting the member to order by.</param>
            <returns>The composed query.</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityQueryable.ThenByDescending``2(System.Windows.Ria.EntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Applies the specified descending order clause to the source query.
            </summary>
            <typeparam name="TEntity">The entity Type being queried.</typeparam>
            <typeparam name="TKey">The type of the member being ordered by.</typeparam>
            <param name="source">The source query.</param>
            <param name="keySelector">The expression selecting the member to order by.</param>
            <returns>The composed query.</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityQueryable.Where``1(System.Windows.Ria.EntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Applies the specified filter to the source query.
            </summary>
            <typeparam name="TEntity">The entity Type being queried.</typeparam>
            <param name="source">The source query.</param>
            <param name="predicate">The filter predicate.</param>
            <returns>The composed query.</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityQueryable.Select``1(System.Windows.Ria.EntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            Applies the specified selection to the source query. Only empty selections are supported.
            </summary>
            <typeparam name="TEntity">The entity Type being queried.</typeparam>
            <param name="source">The source query.</param>
            <param name="selector">The selector function. Note that projections are not supported; the
            selection must be the entity itself.</param>
            <returns>The composed query.</returns>
        </member>
        <member name="T:System.Web.Ria.Data.ExternalReferenceAttribute">
            <summary>
            When applied to an entity association member, this attribute indicates that the framework should not
            create a corresponding EntitySet in the generated client-side code output.  Consumers of the
            client-side property will need to add a DomainContext reference to the appropriate DomainContext
            containing the external entity type.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.InvokeOperation">
            <summary>
            Represents an asynchronous invoke operation.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.InvokeOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Delegate,System.Object,System.Delegate)">
            <summary>
            Public Constructor
            </summary>
            <param name="operationName">The operation to invoke.</param>
            <param name="parameters">Optional parameters to the operation. Specify null
            if the operation takes no parameters.</param>
            <param name="completeAction">Optional action to execute when the operation completes.</param>
            <param name="userState">Optional user state for the operation.</param>
            <param name="cancelAction">Action to execute when the operation is canceled. If null, cancellation will not be supported.</param>
        </member>
        <member name="M:System.Windows.Ria.InvokeOperation.Create``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Delegate,System.Object,System.Delegate)">
            <summary>
            Creates a strongly typed <see cref="T:System.Windows.Ria.InvokeOperation"/> for the specified Type.
            </summary>
            <typeparam name="TValue">The return value Type.</typeparam>
            <param name="operationName">The operation to invoke.</param>
            <param name="parameters">Optional parameters to the operation. Specify null
            if the operation takes no parameters.</param>
            <param name="completeAction">Optional action to execute when the operation completes.</param>
            <param name="userState">Optional user state for the operation.</param>
            <param name="cancelAction">Action to execute when the operation is canceled. If null, cancellation will not be supported.</param>
            <returns>The operation instance created.</returns>
        </member>
        <member name="M:System.Windows.Ria.InvokeOperation.CancelCore">
            <summary>
            Invokes the cancel callback.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.InvokeOperation.Complete(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Completes the invoke operation with validation errors.
            </summary>
            <param name="validationErrors">The validation errors.</param>
        </member>
        <member name="M:System.Windows.Ria.InvokeOperation.Complete(System.Exception)">
            <summary>
            Completes the invoke operation with the specified error.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:System.Windows.Ria.InvokeOperation.Complete(System.Windows.Ria.Services.DomainClientResult)">
            <summary>
            Completes the invoke operation with the specified result.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="P:System.Windows.Ria.InvokeOperation.OperationName">
            <summary>
            Gets the name of the operation.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.InvokeOperation.Parameters">
            <summary>
            Gets the collection of parameters to the operation.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.InvokeOperation.SupportsCancellation">
            <summary>
            Gets a value indicating whether this operation supports cancellation.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.InvokeOperation.Result">
            <summary>
            The <see cref="T:System.Windows.Ria.Services.DomainClientResult"/> for this operation.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.InvokeOperation.Value">
            <summary>
            Gets the return value for the invoke operation.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.InvokeOperation.ValidationErrors">
            <summary>
            Gets the validation errors.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.InvokeOperation`1">
            <summary>
            Represents an asynchronous invoke operation.
            </summary>
            <typeparam name="TValue">The Type of the invoke return value.</typeparam>
        </member>
        <member name="M:System.Windows.Ria.InvokeOperation`1.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Delegate,System.Object,System.Delegate)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Ria.InvokeOperation"/> class.
            </summary>
            <param name="operationName">The operation to invoke.</param>
            <param name="parameters">The parameters to the operation.</param>
            <param name="completeAction">Action to execute when the operation completes.</param>
            <param name="userState">Optional user state for the operation.</param>
            <param name="cancelAction">Action to execute when the operation is canceled.</param>
        </member>
        <member name="P:System.Windows.Ria.InvokeOperation`1.Value">
            <summary>
            Gets the return value for the invoke operation.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.DomainOperationException">
            <summary>
            This exception indicates that at least one error has occurred
            during the processing of the data operations on the server.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.DomainOperationException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:System.Windows.Ria.DomainOperationException.#ctor(System.String)">
            <summary>
            Constructor that accepts only a localized exception message
            </summary>
            <param name="message">The localized exception message</param>
        </member>
        <member name="M:System.Windows.Ria.DomainOperationException.#ctor(System.String,System.Windows.Ria.OperationErrorStatus)">
            <summary>
            Constructor that accepts a localized exception message and status
            </summary>
            <param name="message">The localized exception message</param>
            <param name="status">The status of the exception</param>
        </member>
        <member name="M:System.Windows.Ria.DomainOperationException.#ctor(System.String,System.Windows.Ria.OperationErrorStatus,System.Int32)">
            <summary>
            Constructor that accepts a localized exception message, status and custom error code
            </summary>
            <param name="message">The localized exception message</param>
            <param name="status">The status of the exception</param>
            <param name="errorCode">The custom error code</param>
        </member>
        <member name="M:System.Windows.Ria.DomainOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor that accepts a localized exception message and an inner exception
            </summary>
            <param name="message">The localized exception message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:System.Windows.Ria.DomainOperationException.#ctor(System.String,System.Windows.Ria.OperationErrorStatus,System.Int32,System.String)">
            <summary>
            Internal constructor accepting optional localized message, status, 
            custom error code and stack trace of the exception. 
            </summary>
            <param name="message">The localized error message</param>
            <param name="status">status of the exception</param>
            <param name="errorCode">custom error code</param>
            <param name="stackTrace">stack trace of the exception</param>
        </member>
        <member name="M:System.Windows.Ria.DomainOperationException.#ctor(System.String,System.Windows.Ria.DomainOperationException)">
            <summary>
            Internal copy constructor.
            </summary>
            <param name="message">The new error message to use</param>
            <param name="exception">The exception to copy</param>
        </member>
        <member name="P:System.Windows.Ria.DomainOperationException.StackTrace">
            <summary>
            Gets the stack trace of the exception
            </summary>
        </member>
        <member name="P:System.Windows.Ria.DomainOperationException.Status">
            <summary>
            Gets or sets the status code for this exception. See <see cref="T:System.Windows.Ria.OperationErrorStatus"/>
            </summary>
        </member>
        <member name="P:System.Windows.Ria.DomainOperationException.ErrorCode">
            <summary>
            Gets or sets the custom error code for this exception. Can be any user
            defined value.
            </summary>
        </member>
        <member name="T:System.Web.Ria.Data.DomainIdentifierAttribute">
            <summary>
            A tagging attribute used to categorize a Type as being of a particular domain.
            </summary>
        </member>
        <member name="M:System.Web.Ria.Data.DomainIdentifierAttribute.#ctor(System.String)">
            <summary>
            Constructor that accepts the domain identifier name.
            </summary>
            <param name="name">Name of the domain identifier. This string has no framework-level semantics.  It is entirely
            up to the application developer to decide what constitutes uniqueness or whether it is case-sensitive.
            It cannot be null or empty.</param>
        </member>
        <member name="M:System.Web.Ria.Data.DomainIdentifierAttribute.GetHashCode">
            <summary>
            Override of the default <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <remarks>This override exists to circumvent the base class implementation that uses private Reflection and cannot work in partial trust.</remarks>
            <returns>The has code.</returns>
        </member>
        <member name="M:System.Web.Ria.Data.DomainIdentifierAttribute.Equals(System.Object)">
            <summary>
            Override of <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <remarks>This override exists to circumvent the base class implementation that uses private Reflection and cannot work in partial trust.</remarks>
            <param name="obj">The object to compare to the current object.</param>
            <returns><c>true</c> if <paramref name="obj"/> is equal to the current object.</returns>
        </member>
        <member name="P:System.Web.Ria.Data.DomainIdentifierAttribute.Name">
            <summary>
            Gets the name of the domain identifier.
            </summary>
            <exception cref="T:System.InvalidOperationException"> is thrown from the getter if <see cref="P:System.Web.Ria.Data.DomainIdentifierAttribute.Name"/>
            is null or empty.</exception>
        </member>
        <member name="T:System.Windows.Ria.DomainException">
            <summary>
            This exception indicates that an unrecoverable error has occurred 
            during the execution of a domain operation.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.DomainException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.DomainException.#ctor(System.String)">
            <summary>
            Constructor that accepts a localized exception message.
            </summary>
            <param name="message">The localized exception message.</param>
        </member>
        <member name="M:System.Windows.Ria.DomainException.#ctor(System.String,System.Int32)">
            <summary>
            Constructor that accepts a localized exception message and a custom error code.
            </summary>
            <param name="message">The localized exception message.</param>
            <param name="errorCode">The custom error code for the exception.</param>
        </member>
        <member name="M:System.Windows.Ria.DomainException.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Constructor that accepts a localized exception message, a custom error code and a stack trace.
            </summary>
            <param name="message">The localized exception message.</param>
            <param name="errorCode">The custom error code for the exception.</param>
            <param name="stackTrace">The exception's stack trace.</param>
        </member>
        <member name="M:System.Windows.Ria.DomainException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor that accepts a localized exception message and an inner exception.
            </summary>
            <param name="message">The localized exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:System.Windows.Ria.DomainException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Constructor that accepts a localized exception message and an inner exception
            </summary>
            <param name="message">The localized exception message</param>
            <param name="errorCode">The custom error code for the exception</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="P:System.Windows.Ria.DomainException.StackTrace">
            <summary>
            Gets the exception's stack trace.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.DomainException.ErrorCode">
            <summary>
            Gets or sets the custom error code for this exception. Can be any user
            defined value.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.LoadOperation">
            <summary>
            Represents an asynchronous load operation
            </summary>
        </member>
        <member name="M:System.Windows.Ria.LoadOperation.#ctor(System.Windows.Ria.EntityQuery,System.Windows.Ria.LoadBehavior,System.Delegate,System.Object,System.Delegate)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Ria.LoadOperation"/> class.
            </summary>
            <param name="query">The query to load.</param>
            <param name="loadBehavior"><see cref="P:System.Windows.Ria.LoadOperation.LoadBehavior"/> to use for the load operation.</param>
            <param name="completeAction">Action to execute when the operation completes.</param>
            <param name="userState">Optional user state for the operation.</param>
            <param name="cancelAction">Action to execute when the operation is canceled. If null, cancellation will not be supported.</param>
        </member>
        <member name="M:System.Windows.Ria.LoadOperation.Create``1(System.Windows.Ria.EntityQuery{``0},System.Windows.Ria.LoadBehavior,System.Delegate,System.Object,System.Delegate)">
            <summary>
            Creates a strongly typed <see cref="T:System.Windows.Ria.LoadOperation"/> for the specified Type.
            </summary>
            <typeparam name="TEntity">The entity Type.</typeparam>
            <param name="query">The query to load.</param>
            <param name="loadBehavior"><see cref="P:System.Windows.Ria.LoadOperation.LoadBehavior"/> to use for the load operation.</param>
            <param name="completeAction">Action to execute when the operation completes.</param>
            <param name="userState">Optional user state for the operation.</param>
            <param name="cancelAction">Action to execute when the operation is canceled. If null, cancellation will not be supported.</param>
            <returns>The operation instance created.</returns>
        </member>
        <member name="M:System.Windows.Ria.LoadOperation.CancelCore">
            <summary>
            Invokes the cancel callback.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.LoadOperation.Complete(System.Windows.Ria.Services.DomainClientResult)">
            <summary>
            Successfully completes the load operation with the specified result.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:System.Windows.Ria.LoadOperation.Complete(System.Exception)">
            <summary>
            Completes the load operation with the specified error.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:System.Windows.Ria.LoadOperation.Complete(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Completes the load operation with the specified validation errors.
            </summary>
            <param name="validationErrors">The validation errors.</param>
        </member>
        <member name="M:System.Windows.Ria.LoadOperation.UpdateResults(System.Windows.Ria.Services.DomainClientResult)">
            <summary>
            Update the observable result collections.
            TODO : DC_API - is there a better way to provide
            for strongly typed observable collections?
            </summary>
            <param name="result">The results of the completed load operation.</param>
        </member>
        <member name="P:System.Windows.Ria.LoadOperation.Result">
            <summary>
            The <see cref="T:System.Windows.Ria.Services.DomainClientResult"/> for this operation.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.LoadOperation.SupportsCancellation">
            <summary>
            Gets a value indicating whether this operation supports cancellation.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.LoadOperation.EntityQuery">
            <summary>
            The <see cref="P:System.Windows.Ria.LoadOperation.EntityQuery"/> for this load operation.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.LoadOperation.LoadBehavior">
            <summary>
            The <see cref="P:System.Windows.Ria.LoadOperation.LoadBehavior"/> for this load operation.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.LoadOperation.Entities">
            <summary>
            Gets all the top level entities loaded by the operation. The collection returned implements
            <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.LoadOperation.AllEntities">
            <summary>
            Gets all the entities loaded by the operation, including any
            entities referenced by the top level entities. The collection returned implements
            <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.LoadOperation.TotalEntityCount">
            <summary>
            Gets the total server entity count for the query used
            by this operation.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.LoadOperation.ValidationErrors">
            <summary>
            Gets the validation errors.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.LoadOperation`1">
            <summary>
            Represents an asynchronous load operation
            </summary>
            <typeparam name="TEntity">The entity Type being loaded.</typeparam>
        </member>
        <member name="M:System.Windows.Ria.LoadOperation`1.#ctor(System.Windows.Ria.EntityQuery{`0},System.Windows.Ria.LoadBehavior,System.Delegate,System.Object,System.Delegate)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Ria.LoadOperation"/> class.
            </summary>
            <param name="query">The query to load.</param>
            <param name="loadBehavior"><see cref="T:System.Windows.Ria.LoadBehavior"/> to use for the load operation.</param>
            <param name="completeAction">Action to execute when the operation completes.</param>
            <param name="userState">Optional user state for the operation.</param>
            <param name="cancelAction">Action to execute when the operation is canceled.</param>
        </member>
        <member name="M:System.Windows.Ria.LoadOperation`1.UpdateResults(System.Windows.Ria.Services.DomainClientResult)">
            <summary>
            Update the observable result collections.
            TODO : DC_API - is there a better way to provide
            for strongly typed observable collections?
            </summary>
            <param name="result">The results of the completed load operation.</param>
        </member>
        <member name="P:System.Windows.Ria.LoadOperation`1.EntityQuery">
            <summary>
            The <see cref="P:System.Windows.Ria.LoadOperation`1.EntityQuery"/> for this load operation.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.LoadOperation`1.Entities">
            <summary>
            Gets all the entities loaded by the operation, including any
            entities referenced by the top level entities. The collection returned implements
            <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.SubmitOperation">
            <summary>
            Represents an asynchronous submit operation
            </summary>
        </member>
        <member name="M:System.Windows.Ria.SubmitOperation.#ctor(System.Windows.Ria.EntityChangeSet,System.Delegate,System.Object,System.Delegate)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Ria.SubmitOperation"/> class.
            </summary>
            <param name="changeSet">The changeset being submitted.</param>
            <param name="completeAction">Optional action to invoke when the operation completes.</param>
            <param name="userState">Optional user state to associate with the operation.</param>
            <param name="cancelAction">Optional action to invoke when the operation is canceled. If null, cancellation will not be supported.</param>
        </member>
        <member name="M:System.Windows.Ria.SubmitOperation.CancelCore">
            <summary>
            Invokes the cancel callback.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.SubmitOperation.Complete">
            <summary>
            Successfully complete the submit operation.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.SubmitOperation.Complete(System.Exception)">
            <summary>
            Complete the submit operation with the specified error.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="P:System.Windows.Ria.SubmitOperation.SupportsCancellation">
            <summary>
            Gets a value indicating whether this operation supports cancellation.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.SubmitOperation.ChangeSet">
            <summary>
            The changeset being submitted.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.SubmitOperation.EntitiesInError">
            <summary>
            Returns any entities in error after the submit operation completes.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.Entity">
            <summary>
            Base class for all client entity types
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Entity.#ctor">
            <summary>
            Protected constructor since this is an abstract class
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Entity.OnChildUpdate">
            <summary>
            This method is called whenever a child entity changes state.
            We must transition our own state accordingly.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Entity.IsActionInvoked(System.String)">
            <summary>
            Indicates whether the specified action has been invoked.
            </summary>
            <param name="name">The name of the action corresponding to a custom method.</param>
            <returns>True if the custom method has been invoked.</returns>
        </member>
        <member name="M:System.Windows.Ria.Entity.OnLoaded(System.Boolean)">
            <summary>
            Called whenever an entity is loaded into an <see cref="P:System.Windows.Ria.Entity.EntitySet"/>.
            </summary>
            <param name="isInitialLoad">True when the entity is being loaded into the set for the first time, false otherwise.</param>
        </member>
        <member name="M:System.Windows.Ria.Entity.GetOriginal">
            <summary>
            Gets the original state for this entity.
            </summary>
            <returns>The entity in its original state if there is any original state. Null otherwise.</returns>
        </member>
        <member name="M:System.Windows.Ria.Entity.Reset">
            <summary>
            Resets internal entity state. For example, when the entity is 
            being attached (or reattached) to a set.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Entity.StartTracking">
            <summary>
            Begin change tracking this entity
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Entity.StopTracking">
            <summary>
            Stop change tracking this entity
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Entity.AcceptChanges">
            <summary>
            Accept the current changes to this <see cref="T:System.Windows.Ria.Entity"/> applying the proper
            state transition. If this <see cref="T:System.Windows.Ria.Entity"/> has compositional associations,
            any changes made to those associations or the child entities themselves will be
            accepted. 
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Entity.RejectChanges">
            <summary>
            Revert all property changes made to this entity back to their original values. This method
            does not revert <see cref="P:System.Windows.Ria.Entity.EntitySet"/> Add/Remove operations, so if this <see cref="T:System.Windows.Ria.Entity"/>
            is New or Deleted, this method does nothing. This method also reverts any pending custom
            method invocations on the entity. If this <see cref="T:System.Windows.Ria.Entity"/> has compositional associations,
            any changes made to those associations or the child entities themselves will be reverted.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Entity.SetEntityRef(System.String,System.Windows.Ria.IEntityRef)">
            <summary>
            Associates and caches the provided <see cref="T:System.Windows.Ria.IEntityRef"/> for the
            specified EntityRef member.
            </summary>
            <remarks>This method is called when an EntityRef field is initialized,
            and allows us access to the field w/o resorting to private reflection.</remarks>
            <param name="memberName">The name of the EntityRef member.</param>
            <param name="entityRef">The <see cref="T:System.Windows.Ria.IEntityRef"/> to associate.</param>
        </member>
        <member name="M:System.Windows.Ria.Entity.GetEntityRef(System.String)">
            <summary>
            Returns the <see cref="T:System.Windows.Ria.IEntityRef"/> corresponding to the specified
            EntityRef association member name.
            </summary>
            <param name="memberName">The name of the association member to get
            the <see cref="T:System.Windows.Ria.IEntityRef"/> for. If the EntityRef hasn't been initialized
            yet, null is returned.</param>
            <returns>The <see cref="T:System.Windows.Ria.IEntityRef"/> if the reference has been initialized,
            null otherwise.</returns>
        </member>
        <member name="M:System.Windows.Ria.Entity.GetDataMembers">
            <summary>
            Gets the set of persistent data members for this Entity.
            </summary>
            <returns>The set of data members</returns>
        </member>
        <member name="M:System.Windows.Ria.Entity.GetKeyMembers">
            <summary>
            Gets the members marked [Key] for this Entity.
            </summary>
            <returns>The set of key members</returns>
        </member>
        <member name="M:System.Windows.Ria.Entity.ApplyState(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Apply the specified state to this entity instance using the RefreshCurrent
            merge strategy and normal change tracking.
            </summary>
            <param name="entityStateToApply">The state to apply</param>
        </member>
        <member name="M:System.Windows.Ria.Entity.UpdateOriginalValues(System.Windows.Ria.Entity)">
            <summary>
            Updates the original values with those of the specified
            entity. This method is used during refresh loading scenarios
            and conflict resolution to update original with the latest
            store values.
            </summary>
            <param name="entity">Entity with the new original state.</param>
        </member>
        <member name="M:System.Windows.Ria.Entity.Merge(System.Windows.Ria.Entity,System.Windows.Ria.LoadBehavior)">
            <summary>
            Merge differs from ApplyState in that its the merge of an entire
            entity as opposed to an arbitrary set (possibly subset) of values.
            Change tracking is suspended for the entity during the merge.
            </summary>
            <param name="otherEntity">The entity to merge into the current instance</param>
            <param name="loadBehavior">The load behavior to use</param>
        </member>
        <member name="M:System.Windows.Ria.Entity.PropertyHasChanged(System.Reflection.PropertyInfo)">
            <summary>
            Returns true if the specified property has been modified
            </summary>
            <param name="prop">The property to check</param>
            <returns>true if the specified property has been modified</returns>
        </member>
        <member name="M:System.Windows.Ria.Entity.PropertyHasChanged(System.String)">
            <summary>
            Returns true if the specified property has been modified
            </summary>
            <param name="propertyName">The property to check</param>
            <returns>true if the specified property has been modified</returns>
        </member>
        <member name="M:System.Windows.Ria.Entity.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when an <see cref="T:System.Windows.Ria.Entity"/> property has changed.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:System.Windows.Ria.Entity.RaiseDataMemberChanged(System.String)">
            <summary>
            Called from a property setter to notify the framework that an
            <see cref="T:System.Windows.Ria.Entity"/> data member has changed. This method performs 
            any required change tracking and state transitions.
            </summary>
            <param name="propertyName">The name of the property that has changed</param>
        </member>
        <member name="M:System.Windows.Ria.Entity.RaisePropertyChanged(System.String)">
            <summary>
            Called from a property setter to notify the framework that an
            <see cref="T:System.Windows.Ria.Entity"/> member has changed. This method does not
            perform any change tracking operations.
            </summary>
            <param name="propertyName">The name of the property that has changed</param>
        </member>
        <member name="M:System.Windows.Ria.Entity.RaiseDataMemberChanging(System.String)">
            <summary>
            Called from a property setter to notify the framework that an
            <see cref="T:System.Windows.Ria.Entity"/> data member is about to be changed. This
            method performs any required change tracking and state transition
            operations.
            </summary>
            <param name="propertyName">The name of the property that is changing</param>
        </member>
        <member name="M:System.Windows.Ria.Entity.ValidateProperty(System.String,System.Object)">
            <summary>
            Validate whether the specified value is valid for the specified property
            of the current Entity.
            </summary>
            <remarks>
            This method evaluates all the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>s associated with the specified property
            and throws a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> for the first one that signals a validation error.  It also verifies
            the property is not read-only.
            <para>All validation logic is bypassed if this entity is currently being deserialized.</para>
            </remarks>
            <param name="propertyName">The name of the property on this entity to set.  This name cannot be null or empty.</param>
            <param name="value">The value to test. It may be null if null is valid for the given property</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"> is thrown if this value is not valid for the specified property.</exception>
            <exception cref="T:System.InvalidOperationException"> is thrown if this property is marked with <see cref="T:System.ComponentModel.DataAnnotations.EditableAttribute"/> 
            configured to prevent editing.</exception>
        </member>
        <member name="M:System.Windows.Ria.Entity.OnActionStateChanged">
            <summary>
            Method called when the invoked action state changes
            for this entity. 
            </summary>
            <remarks>
            This method is called when the state of CanInvoke 
            changes.</remarks>
        </member>
        <member name="M:System.Windows.Ria.Entity.UpdateActionState(System.Windows.Ria.EntityAction)">
            <summary>
            Invokes the virtual OnActionStateChanged method as required.
            </summary>
            <param name="prevCustomMethodInvocation">The previous custom method
            invocation.</param>
        </member>
        <member name="M:System.Windows.Ria.Entity.UpdateActionState(System.String,System.String,System.String)">
            <summary>
            Called within the context of an <see cref="M:System.Windows.Ria.Entity.OnActionStateChanged"/> override, this
            method will raise the appropriate property changed notifications for the properties
            corresponding to a custom method.
            </summary>
            <param name="name">The custom method name.</param>
            <param name="canInvokePropertyName">The name of the "CanInvoke" guard property for the
            custom method.</param>
            <param name="isInvokedPropertyName">The name of the "IsInvoked" property for the
            custom method.</param>
        </member>
        <member name="M:System.Windows.Ria.Entity.BeginEdit">
            <summary>
            Begin editing this entity
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Entity.CancelEdit">
            <summary>
            Cancel any edits made to this entity since the last call
            to BeginEdit
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Entity.EndEdit">
            <summary>
            Commit the edits made to this entity since the last call
            to BeginEdit
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Entity.InvokeAction(System.String,System.Object[])">
            <summary>
            Called to register an action to be invoked for this entity during SubmitChanges.
            <see cref="T:System.InvalidOperationException"/> is thrown if the custom method invocation
            violates any framework constraints. <see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> is thrown if
            any validation on this object, the custom method or the specified parameters fails.
            </summary>
            <param name="actionName">The name of the action to invoke</param>
            <param name="parameters">The list of parameters values to invoke the specified action with</param>
        </member>
        <member name="M:System.Windows.Ria.Entity.CanInvokeAction(System.String)">
            <summary>
            Gets a value indicating whether the specified action can currently be invoked. 
            </summary>
            <remarks>This property does not actually invoke Validation 
            because we cannot guarantee property changed events
            are raised whenever this state changes. Validation will
            be executed as part of Invoke.</remarks>
            <param name="name">The name of the action corresponding to a custom method</param>
            <returns>True if the action can currently be invoked</returns>
        </member>
        <member name="M:System.Windows.Ria.Entity.GetIdentity">
            <summary>
            Return the entity identity, suitable for hashing.
            </summary>
            <returns>the identity of this entity</returns>
        </member>
        <member name="M:System.Windows.Ria.Entity.ToString">
            <summary>
            Returns a string representation of the current entity.
            </summary>
            <returns>A string representation of the current entity</returns>
        </member>
        <member name="M:System.Windows.Ria.Entity.RegisterSetChangedCallback(System.Action)">
            <summary>
            Register a callback that will be called any time this entity is
            added or removed from an entity set
            </summary>
            <param name="callback">The callback to register.</param>
        </member>
        <member name="M:System.Windows.Ria.Entity.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begin editing this entity
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Entity.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Cancel the edits made to this entity since the last call
            to BeginEdit
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Entity.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Commit the edits made to this entity since the last call
            to BeginEdit
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Entity.System#ComponentModel#IRevertibleChangeTracking#RejectChanges">
            <summary>
            Revert all property changes made to this entity back to their original values. This method
            does not revert <see cref="P:System.Windows.Ria.Entity.EntitySet"/> Add/Remove operations, so if this <see cref="T:System.Windows.Ria.Entity"/>
            is New or Deleted, this method does nothing. This method also reverts any pending custom
            method invocations on the entity. If this <see cref="T:System.Windows.Ria.Entity"/> has compositional associations,
            any changes made to those associations or the child entities themselves will be reverted.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Entity.System#ComponentModel#IChangeTracking#AcceptChanges">
            <summary>
            Accept all changes made to this <see cref="T:System.Windows.Ria.Entity"/>. If this <see cref="T:System.Windows.Ria.Entity"/>
            has compositional associations, any changes made to those associations or the child
            entities themselves will be accepted. 
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Entity.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method called after this entity has been deserialized
            </summary>
            <param name="context">The serialization context</param>
        </member>
        <member name="M:System.Windows.Ria.Entity.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method called when this entity is being deserialized
            </summary>
            <param name="context">The serialization context</param>
        </member>
        <member name="P:System.Windows.Ria.Entity.Parent">
            <summary>
            Gets the parent of this entity, if this entity is part of
            a composition relationship.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Entity.EntityConflict">
            <summary>
            Gets conflict information for this entity after a submit
            operation. Returns null if there are no conflicts.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Entity.IsEditing">
            <summary>
            Gets a value indicating whether there is currently an uncommitted
            edit session in progress for this entity. This is the case when
            BeginEdit has been called, but EndEdit/CancelEdit have not.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Entity.IsInferred">
            <summary>
            Gets or sets a value indicating whether the current entity state
            has been inferred
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Entity.MemberBindingFlags">
            <summary>
            Gets the correct property binding flags to use for data members.
            TODO : (roncain) We need to handle inheritance
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Entity.ValidationErrors">
            <summary>
            Gets the collection of validation errors encountered during the last submit operation. 
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Entity.HasValidationErrors">
            <summary>
            Gets a value indicating whether there were any validation errors encountered during the last submit operation.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Entity.EntityState">
            <summary>
            Gets the current state of this <see cref="T:System.Windows.Ria.Entity"/>
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Entity.HasPropertyChanges">
            <summary>
            Gets a value indicating whether this entity currently has any
            data member updates
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Entity.HasChildChanges">
            <summary>
            Gets a value indicating whether this entity currently has any
            changes to composed children.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Entity.ModifiedProperties">
            <summary>
            Gets the collection of properties that are currently modified
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Entity.EntitySet">
            <summary>
            Gets or sets the <see cref="P:System.Windows.Ria.Entity.EntitySet"/> this <see cref="T:System.Windows.Ria.Entity"/> is a member of. The value will be null
            if the entity is not attached, or has been removed from the set.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Entity.LastSet">
            <summary>
            Gets the last set that this entity was attached to, possibly
            returning null
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Entity.CustomMethodInvocation">
            <summary>
            Gets or sets the custom method invocation on this entity (if any)
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Entity.OriginalValues">
            <summary>
            Gets the original values of this Entity's properties before modification
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Entity.HasChanges">
            <summary>
            Gets a value indicating whether this <see cref="T:System.Windows.Ria.Entity"/> currently has any pending changes.
            If this <see cref="T:System.Windows.Ria.Entity"/> has compositional associations and any children have changes
            <c>true</c> will be returned.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Entity.IsDeserializing">
            <summary>
            Gets a value indicating whether the current entity is currently being deserialized
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Entity.IsReadOnly">
            <summary>
            Gets a value indicating whether this entity is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Entity.IsSubmitting">
            <summary>
            Gets or sets a value indicating whether the entity is part of a submit in progress.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Entity.EntityRefs">
            <summary>
            Gets the map of EntityRef member name to IEntityRef instance.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Entity.EntityActions">
            <summary>
            Gets the list of custom method invocations pending for this entity 
            in the current changeset. The current implementation only supports 
            a single pending invocation.
            </summary>
            <returns>list of custom method invocations pending for this entity</returns>
        </member>
        <member name="E:System.Windows.Ria.Entity.PropertyChanged">
            <summary>
            Event raised whenever an <see cref="T:System.Windows.Ria.Entity"/> property has changed
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Entity.System#ComponentModel#IChangeTracking#IsChanged">
            <summary>
            Gets a value indicating whether this <see cref="T:System.Windows.Ria.Entity"/> currently has any pending changes.
            If this <see cref="T:System.Windows.Ria.Entity"/> has compositional associations and any children have changes
            <c>true</c> will be returned.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.Entity.EditSession">
            <summary>
            Class used to capture state related to an entity Edit session
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Entity.EditSession.LastState">
            <summary>
            Gets or sets the state of the entity when the session began
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Entity.EditSession.Snapshot">
            <summary>
            Gets or sets the Snapshot of current entity values before any 
            modifications are made in the session
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Entity.EditSession.CustomMethodInvocation">
            <summary>
            Gets or sets the custom method invocation that was in place at the
            time the edit session started.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.Entity.EntityAssociationChangeAcceptor">
            <summary>
            Class used to visit all association members on an entity and AcceptChanges
            on any state tracking those members were performing
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Entity.EntityAssociationChangeAcceptor.Accept(System.Windows.Ria.Entity)">
            <summary>
            Accept changes for all association members on the specified entity
            </summary>
            <param name="entity">The entity</param>
        </member>
        <member name="M:System.Windows.Ria.Entity.EntityAssociationChangeAcceptor.VisitEntityCollection(System.Windows.Ria.IEntityCollection,System.Reflection.PropertyInfo)">
            <summary>
            Visit the collection
            </summary>
            <param name="entityCollection">The collection being visited</param>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> for the member</param>
        </member>
        <member name="T:System.Windows.Ria.EntityChangeSet">
            <summary>
            Represents a collection of <see cref="T:System.Windows.Ria.Entity"/> changes
            </summary>
        </member>
        <member name="M:System.Windows.Ria.EntityChangeSet.ToString">
            <summary>
            Returns a textual summary of this change set
            </summary>
            <returns>A textual summary of the change set</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityChangeSet.GetChangeSetEntries">
            <summary>
            Gets a list of changeset entries representing the current changeset.
            </summary>
            <returns>A list of changeset entries.</returns>
        </member>
        <member name="P:System.Windows.Ria.EntityChangeSet.AddedEntities">
            <summary>
            Gets the collection of added Entities
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntityChangeSet.IsEmpty">
            <summary>
            Gets a value indicating whether this changeset has no changes
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntityChangeSet.ModifiedEntities">
            <summary>
            Gets the collection of modified entities
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntityChangeSet.RemovedEntities">
            <summary>
            Gets the collection of removed entities
            </summary>
        </member>
        <member name="T:System.Windows.Ria.IEntityCollection">
            <summary>
            Internal interface providing loosely typed access to <see cref="T:System.Windows.Ria.EntityCollection`1"/> members needed
            by the framework
            </summary>
        </member>
        <member name="M:System.Windows.Ria.IEntityCollection.AcceptChanges">
            <summary>
            Accepts any changes made to this entity collection.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.IEntityCollection.Add(System.Windows.Ria.Entity)">
            <summary>
            Adds the specified entity to the collection.
            </summary>
            <param name="entity">The entity to add.</param>
        </member>
        <member name="M:System.Windows.Ria.IEntityCollection.Remove(System.Windows.Ria.Entity)">
            <summary>
            Removes the specified entity from the collection.
            </summary>
            <param name="entity">The entity to remove.</param>
        </member>
        <member name="P:System.Windows.Ria.IEntityCollection.Entities">
            <summary>
            Gets the collection of entities, loading the collection if it hasn't been loaded
            already. To avoid the deferred load, inspect the HasValues property first.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.IEntityCollection.HasValues">
            <summary>
            Gets a value indicating whether this EntityCollection has been loaded or
            has had entities added to it.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.IEntityCollection.RemovedEntities">
            <summary>
            Gets the collection of entities that have been removed from this
            <see cref="T:System.Windows.Ria.EntityCollection`1"/> since the last AcceptChanges
            </summary>
        </member>
        <member name="T:System.Windows.Ria.EntityCollection`1">
            <summary>
            Represents a collection of associated Entities.
            </summary>
            <typeparam name="TEntity">The type of <see cref="T:System.Windows.Ria.Entity"/> in the collection</typeparam>
        </member>
        <member name="M:System.Windows.Ria.EntityCollection`1.#ctor(System.Windows.Ria.Entity,System.String,System.Func{`0,System.Boolean})">
            <summary>
            Public constructor
            </summary>
            <param name="parent">The entity that this collection is a member of</param>
            <param name="memberName">The name of this EntityCollection member on the parent entity</param>
            <param name="entityPredicate">The function used to filter the associated entities, determining
            which are members of this collection.</param>
        </member>
        <member name="M:System.Windows.Ria.EntityCollection`1.#ctor(System.Windows.Ria.Entity,System.String,System.Func{`0,System.Boolean},System.Action{`0},System.Action{`0})">
            <summary>
            Public constructor
            </summary>
            <param name="parent">The entity that this collection is a member of</param>
            <param name="memberName">The name of this EntityCollection member on the parent entity</param>
            <param name="entityPredicate">The function used to filter the associated entities, determining
            which are members of this collection.</param>
            <param name="attachAction">The function used to establish a back reference from an associated entity
            to the parent entity.</param>
            <param name="detachAction">The function used to remove the back reference from an associated entity
            to the parent entity.</param>
        </member>
        <member name="M:System.Windows.Ria.EntityCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator for this collection
            </summary>
            <returns>An enumerator for this collection</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityCollection`1.Add(`0)">
            <summary>
            Add the specified entity to this collection. If the entity is unattached, it
            will be added to its <see cref="T:System.Windows.Ria.EntitySet"/> automatically.
            </summary>
            <param name="entity">The entity to add</param>
        </member>
        <member name="M:System.Windows.Ria.EntityCollection`1.Remove(`0)">
            <summary>
            Remove the specified entity from this collection.
            </summary>
            <param name="entity">The entity to remove</param>
        </member>
        <member name="M:System.Windows.Ria.EntityCollection`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:System.Windows.Ria.EntityCollection`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the <see cref="T:System.Windows.Ria.EntityCollection`1"/>.</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityCollection`1.AddEntity(`0)">
            <summary>
            Add the specified <paramref name="entity"/> this collection, setting its
            Parent if this is a compositional association. Whenever an
            entity is added to the underlying physical collection, it
            should be done through this method.
            </summary>
            <param name="entity">The <see cref="T:System.Windows.Ria.Entity"/>to add.</param>
        </member>
        <member name="M:System.Windows.Ria.EntityCollection`1.Attach(`0)">
            <summary>
            Calls the attach method to set the entity association reference.
            </summary>
            <param name="entity">entity to attach</param>
        </member>
        <member name="M:System.Windows.Ria.EntityCollection`1.Detach(`0)">
            <summary>
            Calls the detach method to set the entity association reference.
            </summary>
            <param name="entity">entity to detach</param>
        </member>
        <member name="M:System.Windows.Ria.EntityCollection`1.Load">
            <summary>
            If not already loaded, this method runs our predicate against the source
            EntitySet
            </summary>
        </member>
        <member name="M:System.Windows.Ria.EntityCollection`1.Filter(`0)">
            <summary>
            When filtering entities during query execution against the source set, or during
            source set collection changed notifications, we don't want to include New entities, 
            to ensure that we don't get false positives in cases where the entity's
            FK members are auto-generated on the server or haven't been set yet.
            </summary>
            <param name="entity">The entity to filter</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating whether or not the <paramref name="entity"/> should be filtered.</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityCollection`1.ParentEntityPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            PropertyChanged handler for the parent entity
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The property changed event arguments.</param>
        </member>
        <member name="M:System.Windows.Ria.EntityCollection`1.System#Collections#Generic#IEnumerable{TEntity}#GetEnumerator">
            <summary>
            Returns an enumerator for this collection
            </summary>
            <returns>An enumerator for this collection</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityCollection`1.OnEntitySetChanged">
            <summary>
            Called whenever the parent entity's <see cref="T:System.Windows.Ria.EntitySet"/> membership changes,
            allowing us to navigate to our source set for this collection.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.EntityCollection`1.MonitorEntitySet">
            <summary>
            Based on our current load status and our parent's attach status to an <see cref="T:System.Windows.Ria.EntityContainer"/>,
            update our event subscription to the source set's CollectionChanged event, the goal being to monitor
            the source set if and only if our parent is attached and we have loaded entities (this._entitiesLoaded == true)
            and need to keep our cached set in sync.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.EntityCollection`1.OnEntityAssociationUpdated(`0)">
            <summary>
            Callback for when an entity in the source set changes such that we need to reevaluate
            it's membership in our collection. This could be because an FK member for the association
            has changed, or when the entity state transitions to Unmodified.
            </summary>
            <param name="entity">The entity that has changed</param>
        </member>
        <member name="M:System.Windows.Ria.EntityCollection`1.SourceSet_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Whenever the source set changes, we need to run our predicate against the
            added/removed entities and if we get any matches we propagate the event and
            merge the modifications into our cached set if we are in a loaded state.
            </summary>
            <param name="sender">The caller who raised the collection changed event.</param>
            <param name="args">The collection changed event arguments.</param>
        </member>
        <member name="M:System.Windows.Ria.EntityCollection`1.ResetLoadedEntities">
            <summary>
            Removes all non-New entities from the loaded entities collection and raises 
            any required EntityRemoved events.
            </summary>
        </member>
        <member name="E:System.Windows.Ria.EntityCollection`1.EntityAdded">
            <summary>
            Event raised whenever an <see cref="T:System.Windows.Ria.Entity"/> is added to this collection
            </summary>
        </member>
        <member name="E:System.Windows.Ria.EntityCollection`1.EntityRemoved">
            <summary>
            Event raised whenever an <see cref="T:System.Windows.Ria.Entity"/> is removed from this collection
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntityCollection`1.Count">
            <summary>
            Gets the current count of entities in this collection
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntityCollection`1.IsSourceExternal">
            <summary>
            Gets a value indicating whether the EntityCollection source is external.
            </summary>
        </member>
        <member name="E:System.Windows.Ria.EntityCollection`1.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
            <summary>
            Event raised whenever the contents of the collection changes
            </summary>
        </member>
        <member name="E:System.Windows.Ria.EntityCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            Event raised whenever a property on this collection changes
            </summary>
        </member>
        <member name="T:System.Windows.Ria.EntityConflict">
            <summary>
            Represents an entity conflict.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.EntityConflict.#ctor(System.Windows.Ria.Entity,System.Windows.Ria.Entity,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Ria.EntityConflict"/> class.
            </summary>
            <param name="currentEntity">The entity that the user tried to save.</param>
            <param name="storeEntity">The entity that represents the last known state from the store.</param>
            <param name="propertyNames">The names of properties that are in conflict.</param>
            <param name="isDeleted">Whether the entity has already been deleted from the store.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="isDeleted"/> equals <c>false</c> and 
            <paramref name="storeEntity"/>, <paramref name="currentEntity"/> or <paramref name="propertyNames"/> 
            is null.</exception>
        </member>
        <member name="M:System.Windows.Ria.EntityConflict.Resolve">
            <summary>
            Resolves the conflict by updating the entity's original state with
            the current store state. <see cref="P:System.Windows.Ria.Entity.EntityConflict"/> is also
            cleared on <see cref="P:System.Windows.Ria.EntityConflict.CurrentEntity"/>.
            <exception>An <see cref="T:System.InvalidOperationException"/> will be thrown if 
            <see cref="M:System.Windows.Ria.EntityConflict.Resolve"/> is called when <see cref="P:System.Windows.Ria.EntityConflict.IsDeleted"/> is <c>true</c>.</exception>
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntityConflict.CurrentEntity">
            <summary>
            Gets the current <see cref="T:System.Windows.Ria.Entity"/> instance.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntityConflict.OriginalEntity">
            <summary>
            Gets the original <see cref="T:System.Windows.Ria.Entity"/> instance. May be null
            if the entity is not modified.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntityConflict.StoreEntity">
            <summary>
            Gets the store <see cref="T:System.Windows.Ria.Entity"/> instance. May be null
            if the entity no longer exists in the store, in which case
            <see cref="P:System.Windows.Ria.EntityConflict.IsDeleted"/> will be true.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntityConflict.PropertyNames">
            <summary>
            Gets a collection of the property names in conflict.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntityConflict.IsDeleted">
            <summary>
            Gets a value indicating whether the entity has already been deleted from the store.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.EntityContainer">
            <summary>
            Represents a cache of Entities in the form of a collection of <see cref="T:System.Windows.Ria.EntitySet"/>s.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.EntityContainer.#ctor">
            <summary>
            Protected constructor since this is an abstract class
            </summary>
        </member>
        <member name="M:System.Windows.Ria.EntityContainer.AddEntitySet``1(System.Windows.Ria.EntitySet,System.Windows.Ria.EntitySetOperations)">
            <summary>
            Adds an <see cref="T:System.Windows.Ria.EntitySet"/> in this container with the specified <paramref name="supportedOperations"/>.
            </summary>
            <typeparam name="TEntity">The <see cref="T:System.Windows.Ria.Entity"/> type.</typeparam>
            <param name="set">The <see cref="T:System.Windows.Ria.EntitySet"/> to add to the container.</param>
            <param name="supportedOperations">The <see cref="T:System.Windows.Ria.EntitySetOperations"/> supported by this entity set.</param>
        </member>
        <member name="M:System.Windows.Ria.EntityContainer.AddReference(System.Windows.Ria.EntitySet)">
            <summary>
            Adds a reference to an external <see cref="T:System.Windows.Ria.EntitySet"/>.  Once a reference has been established, 
            referenced <see cref="T:System.Windows.Ria.EntitySet"/> will be consulted when resolving an <see cref="T:System.Windows.Ria.Entity"/> type.
            </summary>
            <param name="entitySet">A <see cref="T:System.Windows.Ria.EntitySet"/> to register as an external reference.</param>
        </member>
        <member name="M:System.Windows.Ria.EntityContainer.Clear">
            <summary>
            Clear the contents of all <see cref="T:System.Windows.Ria.EntitySet"/>s in this container
            </summary>
        </member>
        <member name="M:System.Windows.Ria.EntityContainer.CreateEntitySet``1">
            <summary>
            Create an <see cref="T:System.Windows.Ria.EntitySet"/> in this container for the specified entity type
            </summary>
            <typeparam name="TEntity">The Entity type</typeparam>
        </member>
        <member name="M:System.Windows.Ria.EntityContainer.CreateEntitySet``1(System.Windows.Ria.EntitySetOperations)">
            <summary>
            Create an <see cref="T:System.Windows.Ria.EntitySet"/> in this container for the specified entity type
            </summary>
            <typeparam name="TEntity">The Entity type</typeparam>
            <param name="supportedOperations">The operations supported for the Entity type</param>
        </member>
        <member name="M:System.Windows.Ria.EntityContainer.SetPropertyChanged(System.Windows.Ria.EntitySet,System.String)">
            <summary>
            Event handler for PropertyChanged events on the EntitySets in this container
            </summary>
            <param name="entitySet">The EntitySet</param>
            <param name="propertyName">The property that has changed</param>
        </member>
        <member name="M:System.Windows.Ria.EntityContainer.GetEntitySet``1">
            <summary>
            Return the <see cref="T:System.Windows.Ria.EntitySet"/> for the specified <see cref="T:System.Windows.Ria.Entity"/> Type. If there is no
            <see cref="T:System.Windows.Ria.EntitySet"/> for the specified type, an <see cref="T:System.InvalidOperationException"/> is thrown.
            </summary>
            <typeparam name="TEntity">The Entity type</typeparam>
            <returns>The EntitySet</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityContainer.GetEntitySet(System.Type)">
            <summary>
            Return the <see cref="T:System.Windows.Ria.EntitySet"/> for the specified <see cref="T:System.Windows.Ria.Entity"/> Type. If there is no
            <see cref="T:System.Windows.Ria.EntitySet"/> for the specified type, and exception is thrown.
            </summary>
            <param name="entityType">The Entity type</param>
            <returns>The EntitySet</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityContainer.TryGetEntitySet(System.Type,System.Windows.Ria.EntitySet@)">
            <summary>
            Try to get the set for the specified <see cref="T:System.Windows.Ria.Entity"/> type, returning false if not found
            </summary>
            <param name="entityType">The Entity type</param>
            <param name="entitySet">The EntitySet if present, null otherwise</param>
            <returns>True if an EntitySet for the Type was found, false otherwise</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityContainer.GetChanges">
            <summary>
            Returns an <see cref="T:System.Windows.Ria.EntityChangeSet"/> containing the current set of pending changes
            </summary>
            <returns>The current set of pending changes</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityContainer.HasChildChanges(System.Windows.Ria.Entity)">
            <summary>
            Determines whether the specified entity has any children
            that are currently in a modified state.
            </summary>
            <param name="entity">The parent entity to check.</param>
            <returns>True if there are child updates, false otherwise.</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityContainer.CompleteChildChanges(System.Windows.Ria.Entity,System.Boolean)">
            <summary>
            Accepts or rejects all child changes for the specified entity.
            </summary>
            <param name="entity">The parent entity.</param>
            <param name="acceptChanges"><c>True</c> if child changes should be accepted,
            <c>false</c> if they should be rejected.</param>
        </member>
        <member name="M:System.Windows.Ria.EntityContainer.GetChildTypes(System.Type)">
            <summary>
            For the specified Type, returns the collection of child Types.
            Results are cached.
            </summary>
            <param name="entityType">The Type to retrieve child Types for.</param>
            <returns>The collection of child Types.</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityContainer.AcceptChanges">
            <summary>
            Accept all changes that have been made to entities or <see cref="T:System.Windows.Ria.EntitySet"/>s
            in this container.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.EntityContainer.RejectChanges">
            <summary>
            Revert all changes that have been made to entities or <see cref="T:System.Windows.Ria.EntitySet"/>s
            in this container.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.EntityContainer.LoadEntities(System.Collections.IEnumerable)">
            <summary>
            Load the specified collection of entities into this <see cref="T:System.Windows.Ria.EntityContainer"/>.
            </summary>
            <param name="entities">The Entities to load</param>
            <returns>The set of entities loaded. In cases where entities in the set
            are already cached locally, the return set will contain the cached instances.</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityContainer.LoadEntities(System.Collections.IEnumerable,System.Windows.Ria.LoadBehavior)">
            <summary>
            Load the specified collection of entities into this <see cref="T:System.Windows.Ria.EntityContainer"/>.
            </summary>
            <param name="entities">The Entities to load</param>
            <param name="loadBehavior">The <see cref="T:System.Windows.Ria.LoadBehavior"/> to use for the Load</param>
            <returns>The set of entities loaded. In cases where entities in the set
            are already cached locally, the return set will contain the cached instances.</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityContainer.System#ComponentModel#IRevertibleChangeTracking#RejectChanges">
            <summary>
            Reject all changes made to this container
            </summary>
        </member>
        <member name="M:System.Windows.Ria.EntityContainer.System#ComponentModel#IChangeTracking#AcceptChanges">
            <summary>
            Accept all changes made to this container
            </summary>
        </member>
        <member name="M:System.Windows.Ria.EntityContainer.RaisePropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event for the specified property
            </summary>
            <param name="propertyName">The name of the property that has changed</param>
        </member>
        <member name="P:System.Windows.Ria.EntityContainer.HasChanges">
            <summary>
            Gets a value indicating whether this EntityContainer currently has any pending changes
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntityContainer.EntitySets">
            <summary>
            Gets the collection of <see cref="T:System.Windows.Ria.EntitySet"/>s in this <see cref="T:System.Windows.Ria.EntityContainer"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntityContainer.System#ComponentModel#IChangeTracking#IsChanged">
            <summary>
            Gets a value indicating whether this container currently has any pending changes
            </summary>
        </member>
        <member name="E:System.Windows.Ria.EntityContainer.PropertyChanged">
            <summary>
            Occurs when a property has changed.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.EntityKey">
            <summary>
            Base class for keys representing unique entity identity, suitable for hashing. 
            This class also provides factory methods for the creation of keys.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.EntityKey.Create``2(``0,``1)">
            <summary>
            Creates an key using the specified key values
            </summary>
            <typeparam name="T1">First key value type</typeparam>
            <typeparam name="T2">Second key value type</typeparam>
            <param name="v1">First key value</param>
            <param name="v2">Second key value</param>
            <returns>The entity key</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityKey.Create``3(``0,``1,``2)">
            <summary>
            Creates an key using the specified key values
            </summary>
            <typeparam name="T1">First key value type</typeparam>
            <typeparam name="T2">Second key value type</typeparam>
            <typeparam name="T3">Third key value type</typeparam>
            <param name="v1">First key value</param>
            <param name="v2">Second key value</param>
            <param name="v3">Third key value</param>
            <returns>The entity key</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityKey.Create(System.Object[])">
            <summary>
            Creates an key using the specified key values.
            </summary>
            <param name="keyValues">Array of key values</param>
            <returns>The entity key</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityKey.VerifyKeyValueNotNull(System.Object)">
            <summary>
            Verify that the specified key value isn't null, and throw if it is
            </summary>
            <param name="value">The key value to validate</param>
        </member>
        <member name="M:System.Windows.Ria.EntityKey.ToString">
            <summary>
            Formats the key as a set of key values
            </summary>
            <returns>The formatted key representation</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityKey.FormatKey(System.Text.StringBuilder)">
            <summary>
            Append the key values for this key to the <see cref="T:System.Text.StringBuilder"/>
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to append to</param>
        </member>
        <member name="M:System.Windows.Ria.EntityKey.FormatKeyValue``1(System.Text.StringBuilder,``0)">
            <summary>
            Appends the string representation of the specified value
            to the <see cref="T:System.Text.StringBuilder"/>
            </summary>
            <typeparam name="T">The key value type</typeparam>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to append to</param>
            <param name="value">The key value to format</param>
        </member>
        <member name="T:System.Windows.Ria.EntityKey`1">
            <summary>
            Strongly typed single member key implementation that avoids value boxing.
            </summary>
            <typeparam name="T">The Type of the key member</typeparam>
        </member>
        <member name="M:System.Windows.Ria.EntityKey`1.#ctor(`0)">
            <summary>
            Constructs a key
            </summary>
            <param name="v">The key value</param>
        </member>
        <member name="M:System.Windows.Ria.EntityKey`1.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityKey`1.Equals(System.Object)">
            <summary>
            Determines if the specified key is equal to
            this key
            </summary>
            <param name="obj">The other key</param>
            <returns>True if the keys are equal</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityKey`1.FormatKey(System.Text.StringBuilder)">
            <summary>
            Recursively build the list of key values
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to append to</param>
        </member>
        <member name="M:System.Windows.Ria.EntityKey`1.Equals(System.Windows.Ria.EntityKey{`0})">
            <summary>
            Determines if the specified key is equal to
            this key
            </summary>
            <param name="other">The other key</param>
            <returns>True if the keys are equal</returns>
        </member>
        <member name="T:System.Windows.Ria.EntityKey`2">
            <summary>
            Strongly typed multipart key implementation that avoids value boxing.
            Nested instances of this class can be created for keys with 3 or more
            members.
            </summary>
            <typeparam name="T1">The Type of the first part of the key</typeparam>
            <typeparam name="T2">The Type of the second part of the key</typeparam>
        </member>
        <member name="M:System.Windows.Ria.EntityKey`2.#ctor(`0,`1)">
            <summary>
            Constructs a key
            </summary>
            <param name="v1">The first key value</param>
            <param name="v2">The second key value</param>
        </member>
        <member name="M:System.Windows.Ria.EntityKey`2.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityKey`2.Equals(System.Object)">
            <summary>
            Determines if the specified key is equal to
            this key
            </summary>
            <param name="obj">The other key</param>
            <returns>True if the keys are equal</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityKey`2.FormatKey(System.Text.StringBuilder)">
            <summary>
            Recursively build the list of key values
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to append to</param>
        </member>
        <member name="M:System.Windows.Ria.EntityKey`2.Equals(System.Windows.Ria.EntityKey{`0,`1})">
            <summary>
            Determines if the specified key is equal to
            this key
            </summary>
            <param name="other">The other key</param>
            <returns>True if the keys are equal</returns>
        </member>
        <member name="T:System.Windows.Ria.EntitySet">
            <summary>
            Represents a collection of <see cref="T:System.Windows.Ria.Entity"/> instances, providing change tracking and other services.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.#ctor(System.Type)">
            <summary>
            Protected constructor since this is an abstract class
            </summary>
            <param name="entityType">The type of <see cref="T:System.Windows.Ria.Entity"/> the set will contain</param>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.Clear">
            <summary>
            Clears all Entities from the set
            </summary>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.TrackAsInteresting(System.Windows.Ria.Entity,System.Boolean)">
            <summary>
            Tracks or untracks the specified entity as one that should be considered during
            changeset computation. This is more efficient than visiting every
            entity when computing changesets.
            </summary>
            <param name="entity">The entity to track or untrack</param>
            <param name="isInteresting">True if the entity is interesting, false otherwise</param>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.CreateList">
            <summary>
            Creates a new entity set.
            </summary>
            <returns>The created entity set instance.</returns>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.CreateEntity">
            <summary>
            Creates a new entity.
            </summary>
            <returns>The created entity instance.</returns>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.EntityPropertyChanged(System.Windows.Ria.Entity,System.String)">
            <summary>
            Handles change notifications from changed properties of entities in this set.
            </summary>
            <param name="entity">The entity that was updated.</param>
            <param name="propertyName">The name of the property that was changed.</param>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.RegisterAssociationCallback``1(System.ComponentModel.DataAnnotations.AssociationAttribute,System.Action{``0},System.Boolean)">
            <summary>
            Registers or unregisters the specified callback for update notifications for the specified association member. The
            callback will be invoked whenever a FK member participating in the association is modified on an entity in this
            EntitySet.
            </summary>
            <param name="association">AssociationAttribute indicating the association to monitor</param>
            <param name="callback">The callback to call</param>
            <param name="register">True if the callback is being registered, false if it is being unregistered</param>
            <typeparam name="TEntity">The entity type.</typeparam>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.Add(System.Windows.Ria.Entity)">
            <summary>
            Adds the specified <see cref="T:System.Windows.Ria.Entity"/> to this <see cref="T:System.Windows.Ria.EntitySet"/>, also 
            recursively adding all unattached entities reachable via associations.
            </summary>
            <param name="entity">The entity to add.</param>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.IsAttached(System.Windows.Ria.Entity)">
            <summary>
            Returns true if the specified entity is currently attached
            to this <see cref="T:System.Windows.Ria.EntitySet"/>.
            </summary>
            <param name="entity">The Entity to check</param>
            <returns>True if the Entity is attached</returns>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.AddInternal(System.Windows.Ria.Entity)">
            <summary>
            Adds the specified entity to this set.
            </summary>
            <param name="entity">The entity to add.</param>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.Remove(System.Windows.Ria.Entity)">
            <summary>
            Removes the specified entity from the set.
            </summary>
            <param name="entity">The entity to remove.</param>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.BeginEdit(System.Windows.Ria.Entity)">
            <summary>
            Begin editing the specified <see cref="T:System.Windows.Ria.Entity"/>
            </summary>
            <param name="entity">The entity to edit</param>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.EndEdit(System.Windows.Ria.Entity)">
            <summary>
            End editing the specified <see cref="T:System.Windows.Ria.Entity"/>
            </summary>
            <param name="entity">The entity to end editing</param>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.CancelEdit(System.Windows.Ria.Entity)">
            <summary>
            Cancel edits to the specified <see cref="T:System.Windows.Ria.Entity"/>
            </summary>
            <param name="entity">The entity to cancel edits for</param>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.AcceptChanges">
            <summary>
            Accepts all changes made to this <see cref="T:System.Windows.Ria.EntitySet"/>
            </summary>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.RejectChanges">
            <summary>
            Reverts all changes made to this <see cref="T:System.Windows.Ria.EntitySet"/>. For modified entities,
            all modified property values are set back to their original values. New entities are
            removed, and any entities that were removed are re-added.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.Attach(System.Windows.Ria.Entity)">
            <summary>
            Attaches the specified <see cref="T:System.Windows.Ria.Entity"/> to this <see cref="T:System.Windows.Ria.EntitySet"/> in an
            unmodified state, also recursively attaching all unattached entities reachable via
            associations.
            </summary>
            <param name="entity">The entity to attach</param>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.AttachInternal(System.Windows.Ria.Entity)">
            <summary>
            Attaches the <see cref="T:System.Windows.Ria.Entity"/> to this <see cref="T:System.Windows.Ria.EntitySet"/> in an
            unmodified state.
            </summary>
            <param name="entity">The entity to attach</param>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.Detach(System.Windows.Ria.Entity)">
            <summary>
            Detaches the specified <see cref="T:System.Windows.Ria.Entity"/> from this <see cref="T:System.Windows.Ria.EntitySet"/>. If the entity
            is not in this set, an <see cref="T:System.InvalidOperationException"/> will be thrown.
            </summary>
            <param name="entity">The entity to detach</param>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.LoadEntity(System.Windows.Ria.Entity)">
            <summary>
            Load the specified entity into the set
            </summary>
            <param name="entity">The entity to load</param>
            <returns>If the entity was already in the set
            (based on key identity) the cached instance is returned. If the
            entity wasn't in the set, the specified instance is returned
            </returns>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.LoadEntity(System.Windows.Ria.Entity,System.Windows.Ria.LoadBehavior)">
            <summary>
            Load the specified entity into the set, using the specified
            <see cref="T:System.Windows.Ria.LoadBehavior"/>.
            </summary>
            <param name="entity">The entity to load</param>
            <param name="loadBehavior">The <see cref="T:System.Windows.Ria.LoadBehavior"/> to apply for the Load</param>
            <returns>If the entity was already in the set
            (based on key identity) the cached instance is returned. If the
            entity wasn't in the set, the specified instance is returned
            </returns>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.AddToCache(System.Windows.Ria.Entity)">
            <summary>
            Adds the specified entity to the cache. If a cache entry for the
            same identity already exists, an exception is thrown.
            </summary>
            <param name="entity">The entity to add</param>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.RemoveFromCache(System.Windows.Ria.Entity)">
            <summary>
            Removes the specified entity from the cache.
            </summary>
            <param name="entity">The entity to remove.</param>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.GetEntityByKey(System.Object[])">
            <summary>
            Queries the cache for the entity indicated by the specified key
            values returning it if found, or returning null otherwise
            </summary>
            <param name="keyValues">The key values specified in the correct member order</param>
            <returns>The entity if found, null otherwise</returns>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.LoadEntities(System.Collections.Generic.IEnumerable{System.Windows.Ria.Entity})">
            <summary>
            Load the specified set of entities
            </summary>
            <param name="entities">The set of entities to load</param>
            <returns>list of loaded entities</returns>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.LoadEntities(System.Collections.Generic.IEnumerable{System.Windows.Ria.Entity},System.Windows.Ria.LoadBehavior)">
            <summary>
            Load the specified set of entities
            </summary>
            <param name="entities">The set of entities to load</param>
            <param name="loadBehavior">The <see cref="T:System.Windows.Ria.LoadBehavior"/> to use for the Load</param>
            <returns>The set of entities in the local cache after the load operation</returns>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
            <summary>
            Method called whenever the collection changes. Overrides should call the base method
            to raise any required change notifications
            </summary>
            <param name="action">The change action</param>
            <param name="affectedObject">For Reset events, this will be a collection of removed entities. For all other
            events, this will be the single affected entity.</param>
            <param name="index">The affected index</param>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.RaisePropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event for the specified property
            </summary>
            <param name="propertyName">The property that has changed</param>
        </member>
        <member name="M:System.Windows.Ria.EntitySet.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when an <see cref="T:System.Windows.Ria.EntitySet"/> property has changed.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="P:System.Windows.Ria.EntitySet.EntityType">
            <summary>
            Gets the <see cref="T:System.Type"/> of entity contained by this <see cref="T:System.Windows.Ria.EntitySet"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntitySet.CanAdd">
            <summary>
            Gets a value indicating whether the collection allows new items to be added
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntitySet.CanEdit">
            <summary>
            Gets a value indicating whether members of the collection can be edited
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntitySet.CanRemove">
            <summary>
            Gets a value indicating whether the collection allows items to be removed.
            Note that newly added items can always be removed.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntitySet.Count">
            <summary>
            Gets the current count of Entities in the set
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntitySet.EntityContainer">
            <summary>
            Gets the container this <see cref="T:System.Windows.Ria.EntitySet"/> belongs to
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntitySet.IsReadOnly">
            <summary>
            Gets a value indicating whether this set supports update operations. Returns
            true if update operations are not supported, false otherwise.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntitySet.List">
            <summary>
            Gets the backing list for this <see cref="T:System.Windows.Ria.EntitySet"/>
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntitySet.InterestingEntities">
            <summary>
            Gets a collection of all 'interesting' entities for the purposes of changeset computation. Interesting
            entities include those that are new, removed, or have been touched by an update operation.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntitySet.HasChanges">
            <summary>
            Gets a value indicating whether this EntitySet currently has any pending changes
            </summary>
        </member>
        <member name="E:System.Windows.Ria.EntitySet.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
            <summary>
            Event raised when the collection has changed, or the collection is reset.
            </summary>
        </member>
        <member name="E:System.Windows.Ria.EntitySet.PropertyChanged">
            <summary>
            Event raised when a property has changed.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.EntitySet.AddAttachInferrer">
            <summary>
            Visitor used to traverse all associations in a graph and infer
            Attach/Add entities that are unattached.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.EntitySet.CompositionalChildRemover">
            <summary>
            Visitor used to recursively remove all compositional children
            in a hierarchy.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.EntitySet`1">
            <summary>
            Represents a collection of <see cref="T:System.Windows.Ria.Entity"/> instances, providing change tracking and other services.
            </summary>
            <typeparam name="TEntity">The type of <see cref="T:System.Windows.Ria.Entity"/> this set will contain</typeparam>
        </member>
        <member name="M:System.Windows.Ria.EntitySet`1.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:System.Windows.Ria.EntitySet`1.CreateList">
            <summary>
            Creates a new entity set.
            </summary>
            <returns>The created entity set instance.</returns>
        </member>
        <member name="M:System.Windows.Ria.EntitySet`1.CreateEntity">
            <summary>
            Creates a new entity.
            </summary>
            <returns>The created entity instance.</returns>
        </member>
        <member name="M:System.Windows.Ria.EntitySet`1.GetEnumerator">
            <summary>
            Returns an enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:System.Windows.Ria.EntitySet`1.Attach(`0)">
            <summary>
            Attaches the specified <see cref="T:System.Windows.Ria.Entity"/> to this <see cref="T:System.Windows.Ria.EntitySet"/> in an
            unmodified state, also recursively attaching all unattached entities reachable via
            associations.
            </summary>
            <remarks>The <paramref name="entity"/> needs to be of type <typeparamref name="TEntity"/>, and cannot be a subclass.</remarks>
            <param name="entity">The entity to attach</param>
        </member>
        <member name="M:System.Windows.Ria.EntitySet`1.Detach(`0)">
            <summary>
            Detaches the <see cref="T:System.Windows.Ria.Entity"/> from this <see cref="T:System.Windows.Ria.EntitySet"/>.
            </summary>
            <param name="entity">The entity to detach</param>
        </member>
        <member name="M:System.Windows.Ria.EntitySet`1.Add(`0)">
            <summary>
            Add the specified entity to the collection. If CanAdd is false, an <see cref="T:System.InvalidOperationException"/>
            will be thrown.
            </summary>
            <remarks><paramref name="entity"/> needs to be of type <typeparamref name="TEntity"/>, and cannot be a subclass.</remarks>
            <param name="entity">The entity to add</param>
        </member>
        <member name="M:System.Windows.Ria.EntitySet`1.Remove(`0)">
            <summary>
            Remove the specified entity from the collection. If CanRemove is false
            and the specified entity is not newly added, an <see cref="T:System.InvalidOperationException"/>
            will be thrown.
            </summary>
            <param name="entity">The entity to remove</param>
        </member>
        <member name="M:System.Windows.Ria.EntitySet`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
            <summary>
            Method called whenever the collection changes.
            </summary>
            <param name="action">The change action</param>
            <param name="affectedObject">For Reset events, this will be a collection of removed entities. For all other
            events, this will be the single affected entity.</param>
            <param name="index">The affected index</param>
        </member>
        <member name="E:System.Windows.Ria.EntitySet`1.EntityAdded">
            <summary>
            Event raised whenever an <see cref="T:System.Windows.Ria.Entity"/> is added to this collection
            </summary>
        </member>
        <member name="E:System.Windows.Ria.EntitySet`1.EntityRemoved">
            <summary>
            Event raised whenever an <see cref="T:System.Windows.Ria.Entity"/> is removed to this collection
            </summary>
        </member>
        <member name="T:System.Windows.Ria.EntitySetOperations">
            <summary>
            Enumeration of the types of operations permissable
            on an <see cref="T:System.Windows.Ria.EntitySet"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Ria.EntitySetOperations.None">
            <summary>
            Only Selection is permitted, no update operations are allowed.
            </summary>
        </member>
        <member name="F:System.Windows.Ria.EntitySetOperations.Add">
            <summary>
            New entities may be added
            </summary>
        </member>
        <member name="F:System.Windows.Ria.EntitySetOperations.Edit">
            <summary>
            Entities may be updated
            </summary>
        </member>
        <member name="F:System.Windows.Ria.EntitySetOperations.Remove">
            <summary>
            Entities may be removed
            </summary>
        </member>
        <member name="F:System.Windows.Ria.EntitySetOperations.All">
            <summary>
            Entities may be added, updated and removed
            </summary>
        </member>
        <member name="T:System.Windows.Ria.ChangeSetEntry">
            <summary>
            Represents a domain operation to be performed on an entity. This is the message
            type passed between data-client and domain service both for sending operations to
            the domain service as well as for returning operation results back to the data-client.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ChangeSetEntry.#ctor(System.Windows.Ria.Entity,System.Int32,System.Windows.Ria.EntityOperationType)">
            <summary>
            Public constructor
            </summary>
            <param name="entity">The entity being operated on</param>
            <param name="id">The client ID for the entity</param>
            <param name="operationType">The operation to be performed</param>
        </member>
        <member name="P:System.Windows.Ria.ChangeSetEntry.HasError">
            <summary>
            Gets a value indicating whether validation errors or conflicts were encountered 
            during processing of the property.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ChangeSetEntry.HasConflict">
            <summary>
            Gets a value indicating whether the operation contains conflicts.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ChangeSetEntry.Entity">
            <summary>
            Gets or sets the <see cref="P:System.Windows.Ria.ChangeSetEntry.Entity"/> being operated on. After a submit operation
            has completed, this member may contain updated entity state returned from the
            domain service.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ChangeSetEntry.OriginalEntity">
            <summary>
            Gets or sets the original state of the entity being operated on
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ChangeSetEntry.StoreEntity">
            <summary>
            Gets or sets the state of the entity in the data store
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ChangeSetEntry.ClientEntity">
            <summary>
            Gets or sets the entity that was originally submitted <see cref="P:System.Windows.Ria.ChangeSetEntry.Entity"/>. Used to correlate 
            an <see cref="T:System.Windows.Ria.ChangeSetEntry"/> result back to its originally submitted client entity instance.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ChangeSetEntry.Id">
            <summary>
            Gets or sets the Client Id for the entity
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ChangeSetEntry.HasMemberChanges">
            <summary>
            Gets or sets a value indicating whether the entity for
            this operation has property modifications.
            <remarks>Note that even if OriginalEntity hasn't been
            set, in the case of entities using a timestamp field
            for concurrency, the entity may still be modified. This
            flag allows us to distinguish that case from an Update
            operation that represents a custom method invocation only.
            </remarks>
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ChangeSetEntry.Operation">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Ria.EntityOperationType"/> for this <see cref="T:System.Windows.Ria.ChangeSetEntry"/>
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ChangeSetEntry.EntityActions">
            <summary>
            Gets or sets the custom methods invoked on the entity, as a set
            of method name / parameter pairs.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ChangeSetEntry.ValidationErrors">
            <summary>
            Gets or sets the validation errors encountered during the processing of the operation. 
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ChangeSetEntry.ConflictMembers">
            <summary>
            Gets or sets the collection of members in conflict. The Entity property
            contains the current store value for each property.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ChangeSetEntry.IsDeleteConflict">
            <summary>
            Gets or sets a value indicating whether the confict (if there is one) is a delete conflict.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ChangeSetEntry.Associations">
            <summary>
            Gets or sets the collection of Ids of the associated entities for
            each association of the Entity
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ChangeSetEntry.OriginalAssociations">
            <summary>
            Gets or sets the collection of Ids of the associated entities for
            each association of the OriginalEntity
            </summary>
        </member>
        <member name="T:System.Windows.Ria.IEntityRef">
            <summary>
            Internal interface providing loosely typed access to <see cref="T:System.Windows.Ria.EntityRef`1"/> members needed
            by the framework.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.IEntityRef.HasValue">
            <summary>
            Gets a value indicating whether this EntityRef has been loaded or
            has had a value assigned to it.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.IEntityRef.Entity">
            <summary>
            Gets the referenced entity loading it if it hasn't been loaded yet.
            To avoid the deferred load, inspect the HasValue property first.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.EntityRef`1">
            <summary>
            Represents an reference to an associated entity.
            </summary>
            <typeparam name="TEntity">The type of the associated <see cref="P:System.Windows.Ria.EntityRef`1.Entity"/></typeparam>
        </member>
        <member name="M:System.Windows.Ria.EntityRef`1.#ctor(System.Windows.Ria.Entity,System.String,System.Func{`0,System.Boolean})">
            <summary>
            Public constructor
            </summary>
            <param name="parent">The entity that this association is a member of</param>
            <param name="memberName">The name of this EntityRef member on the parent entity</param>
            <param name="entityPredicate">The function used to filter the associated entity.</param>
        </member>
        <member name="M:System.Windows.Ria.EntityRef`1.SetValue(`0)">
            <summary>
            Set the entity value and raise a property changed notification if required.
            All internal assignments should be made through this method.
            </summary>
            <param name="value">The new entity instance</param>
        </member>
        <member name="M:System.Windows.Ria.EntityRef`1.Filter(`0)">
            <summary>
            When filtering entities during query execution against the source set we don't want
            to include New entities, to ensure that we don't get false positives in cases where 
            the entity's FK members are auto-genned on the server or haven't been set yet.
            </summary>
            <param name="entity">The entity to filter</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating whether or not the <paramref name="entity"/> should be filtered.</returns>
        </member>
        <member name="M:System.Windows.Ria.EntityRef`1.MonitorEntitySet">
            <summary>
            Subscribe to the source set's CollectionChanged event, so we can monitor additions to and
            removals from the set so we can update the status of our reference and raise the required
            property change notifications.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.EntityRef`1.SourceSet_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Whenever the source set changes, we need to run our predicate against the
            added/removed entities and if we get any matches we propagate update our cached
            reference and raise the property changed notification for this EntityRef property
            on the parent.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="args">The collection changed event arguments.</param>
        </member>
        <member name="M:System.Windows.Ria.EntityRef`1.OnEntityAssociationUpdated(`0)">
            <summary>
            Callback for when an entity in the source set changes such that we need to reevaluate
            it's membership in our collection. This could be because an FK member for the association
            has changed, or when the entity state transitions to Unmodified.
            </summary>
            <param name="entity">The entity that has changed</param>
        </member>
        <member name="M:System.Windows.Ria.EntityRef`1.OnEntitySetChanged">
            <summary>
            Called whenever the parent entity's <see cref="T:System.Windows.Ria.EntitySet"/> membership changes,
            allowing us to navigate to our source set for this collection.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.EntityRef`1.ParentEntityPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            PropertyChanged handler for the parent entity
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The property changed event arguments.</param>
        </member>
        <member name="P:System.Windows.Ria.EntityRef`1.Entity">
            <summary>
            Gets or sets the associated <see cref="P:System.Windows.Ria.EntityRef`1.Entity"/>
            </summary>
        </member>
        <member name="P:System.Windows.Ria.EntityRef`1.System#Windows#Ria#IEntityRef#HasValue">
            <summary>
            Gets a value indicating whether this EntityRef has been loaded or
            has had a value assigned to it.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.EntityState">
            <summary>
            Enumeration of the possible states an <see cref="T:System.Windows.Ria.Entity"/>
            can be in.
            </summary>
        </member>
        <member name="F:System.Windows.Ria.EntityState.Detached">
            <summary>
            The entity is not attached and is not being tracked
            </summary>
        </member>
        <member name="F:System.Windows.Ria.EntityState.Unmodified">
            <summary>
            The entity is in its original, unmodified state
            </summary>
        </member>
        <member name="F:System.Windows.Ria.EntityState.Modified">
            <summary>
            The entity has been modified
            </summary>
        </member>
        <member name="F:System.Windows.Ria.EntityState.New">
            <summary>
            The entity is attached in the new state
            </summary>
        </member>
        <member name="F:System.Windows.Ria.EntityState.Deleted">
            <summary>
            The entity is marked for delete
            </summary>
        </member>
        <member name="T:System.Windows.Ria.InvokeCompletedResult">
            <summary>
            Represents the result of an asynchronous operation.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.InvokeCompletedResult.#ctor(System.Object)">
            <summary>
            Public constructor
            </summary>
            <param name="returnValue">The value returned from the server.</param>
        </member>
        <member name="M:System.Windows.Ria.InvokeCompletedResult.#ctor(System.Object,System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Public constructor
            </summary>
            <param name="returnValue">The value returned from the server.</param>
            <param name="validationErrors">A collection of validation errors.</param>
        </member>
        <member name="P:System.Windows.Ria.InvokeCompletedResult.ValidationErrors">
            <summary>
            Gets the validation errors.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.InvokeCompletedResult.ReturnValue">
            <summary>
            Gets the value returned from the server.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.LoadBehavior">
            <summary>
            Used to control identity cache behavior when loading entities.
            Each option specifies the merge behavior when an entity that has been
            previously read and cached is read again.
            </summary>
        </member>
        <member name="F:System.Windows.Ria.LoadBehavior.MergeIntoCurrent">
            <summary>
            Values from the newly read instance are merged into the cached instance
            for property values that are unmodified. No changes are lost in this merge.
            </summary>
        </member>
        <member name="F:System.Windows.Ria.LoadBehavior.KeepCurrent">
            <summary>
            The cached instance is not changed and the newly read instance is discarded.
            </summary>
        </member>
        <member name="F:System.Windows.Ria.LoadBehavior.RefreshCurrent">
            <summary>
            All members of the cached instance are overwritten with current values from the
            newly read instance, regardless of whether they have been modified. In addition,
            the original state of the entity is also set to the newly read instance.
            </summary>
        </member>
        <member name="T:System.Web.Ria.Data.OperationError">
            <summary>
            The data contract of an error that has occurred 
            during the execution of an operation on the server.
            This is sent back along with the domain operation 
            result(s) to the client.
            </summary>
        </member>
        <member name="M:System.Web.Ria.Data.OperationError.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:System.Web.Ria.Data.OperationError.#ctor(System.String,System.String)">
            <summary>
            Constructor accepting an optional localized error message
            </summary>
            <param name="message">The localized error message</param>
            <param name="sourceMemberName">The name of the member the error originated from.</param>
        </member>
        <member name="M:System.Web.Ria.Data.OperationError.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor accepting an optional localized error message and and collection 
            of the names of the members the error originated from.
            </summary>
            <param name="message">The localized message</param>
            <param name="sourceMemberNames">A collection of the names of the members the error originated from.</param>
        </member>
        <member name="M:System.Web.Ria.Data.OperationError.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Constructor accepting an optional localized error message, error code, stack trace,
            and name of the member the error originated from.
            </summary>
            <param name="message">The localized error message</param>
            <param name="errorCode">The custom error code</param>
            <param name="stackTrace">The error stack trace</param>
            <param name="sourceMemberName">The name of the member the error originated from.</param>
        </member>
        <member name="M:System.Web.Ria.Data.OperationError.#ctor(System.String,System.Int32,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor accepting an optional localized error message, error code, stack trace,
            and collection of the names of the members the error originated from.
            </summary>
            <param name="message">The localized error message</param>
            <param name="errorCode">The custom error code</param>
            <param name="stackTrace">The error stack trace</param>
            <param name="sourceMemberNames">A collection of the names of the members the error originated from.</param>
        </member>
        <member name="M:System.Web.Ria.Data.OperationError.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>The hash code for this object.</returns>
        </member>
        <member name="M:System.Web.Ria.Data.OperationError.System#IEquatable{System#Web#Ria#Data#OperationError}#Equals(System.Web.Ria.Data.OperationError)">
            <summary>
            Test the current instance against the specified instance for equality
            </summary>
            <param name="other">The OperationError to compare to</param>
            <returns>True if the instances are equal, false otherwise</returns>
        </member>
        <member name="P:System.Web.Ria.Data.OperationError.Message">
            <summary>
            Gets or sets the error message
            </summary>
        </member>
        <member name="P:System.Web.Ria.Data.OperationError.ErrorCode">
            <summary>
            Gets or sets custom error code
            </summary>
        </member>
        <member name="P:System.Web.Ria.Data.OperationError.StackTrace">
            <summary>
            Gets or sets the stack trace of the error
            </summary>
        </member>
        <member name="P:System.Web.Ria.Data.OperationError.SourceMemberNames">
            <summary>
            Gets or sets the names of the members the error originated from.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.OperationErrorStatus">
            <summary>
            Enumeration representing possible domain operation error statuses.
            </summary>
        </member>
        <member name="F:System.Windows.Ria.OperationErrorStatus.NotFound">
            <summary>
            Resource cannot be found.
            </summary>
            <remarks>Corresponds to HttpStatusCode 404</remarks>
        </member>
        <member name="F:System.Windows.Ria.OperationErrorStatus.ServerError">
            <summary>
            A server error has occurred during the processing of the operation.
            </summary>
            <remarks>Corresponds to HttpStatusCode 500</remarks>
        </member>
        <member name="F:System.Windows.Ria.OperationErrorStatus.NotSupported">
            <summary>
            The operation is not supported.
            </summary>
            <remarks>Corresponds to HttpStatusCode 400</remarks>
        </member>
        <member name="F:System.Windows.Ria.OperationErrorStatus.Unauthorized">
            <summary>
            The operation is not authorized for execution.
            </summary>
            <remarks>Corresponds to HttpStatusCode 401</remarks>
        </member>
        <member name="F:System.Windows.Ria.OperationErrorStatus.ValidationFailed">
            <summary>
            Validation for the operation has failed.
            </summary>
        </member>
        <member name="F:System.Windows.Ria.OperationErrorStatus.Conflicts">
            <summary>
            Conflicts have been detected. See <see cref="P:System.Windows.Ria.Entity.EntityConflict"/> 
            for the conflicts for a given entity.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.QueryCompletedResult">
            <summary>
            Represents the result of a query operation
            </summary>
        </member>
        <member name="M:System.Windows.Ria.QueryCompletedResult.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Ria.Entity},System.Collections.Generic.IEnumerable{System.Windows.Ria.Entity},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Public constructor
            </summary>
            <param name="entities">The entities returned from the query</param>
            <param name="includedEntities">The included entities returned from the query</param>
            <param name="resultCount">The total number of entities returned from the query, excluding entities that were included as associations.</param>
            <param name="totalCount">The total number of rows for the original query without any paging applied to it.</param>
            <param name="validationErrors">A collection of validation errors.</param>
        </member>
        <member name="P:System.Windows.Ria.QueryCompletedResult.Entities">
            <summary>
            Gets the entities returned from the query
            </summary>
        </member>
        <member name="P:System.Windows.Ria.QueryCompletedResult.IncludedEntities">
            <summary>
            Gets the included entities returned from the query
            </summary>
        </member>
        <member name="P:System.Windows.Ria.QueryCompletedResult.TotalCount">
            <summary>
            Gets the total number of rows for the original query without any paging applied to it.
            If the value is -1, the server did not support total-counts. If it's -2, the total-count 
            is the same as the number of entities in the result-set.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.QueryCompletedResult.ResultCount">
            <summary>
            Gets the total number of entities returned from the query, excluding entities that were included as associations.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.QueryCompletedResult.ValidationErrors">
            <summary>
            Gets the validation errors.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.Application_UriMustBeFullyQualified">
            <summary>
              Looks up a localized string similar to The application URI must be fully qualified.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.DomainClient_ApplicationNotInitialized">
            <summary>
              Looks up a localized string similar to The Application object has not been initialized yet..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.DomainClient_CancellationNotSupported">
            <summary>
              Looks up a localized string similar to The domain client &apos;{0}&apos; does not support cancellation..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.DomainClient_EmptyChangeSet">
            <summary>
              Looks up a localized string similar to The submitted change set was empty..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.DomainClient_EntityTypesAlreadyInitialized">
            <summary>
              Looks up a localized string similar to EntityTypes has already been initialized.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.DomainClient_InvocationNameCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to Custom method invocation name cannot be null or empty..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.DomainClient_ResourceNotFound">
            <summary>
              Looks up a localized string similar to The specified resource was not found.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.DomainContext_EntityContainerCannotBeNull">
            <summary>
              Looks up a localized string similar to The EntityContainer for a DomainContext cannot be null..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.DomainContext_InvalidEntityQueryDomainClient">
            <summary>
              Looks up a localized string similar to The specified EntityQuery &apos;{0}&apos; cannot be loaded because it was not created by this DomainContext..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.DomainContext_InvalidServiceUri">
            <summary>
              Looks up a localized string similar to The specified service URI is of the wrong format.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.DomainContext_InvokeOperationFailed">
            <summary>
              Looks up a localized string similar to Invoke operation &apos;{0}&apos; failed. {1}.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.DomainContext_InvokeOperationFailed_Validation">
            <summary>
              Looks up a localized string similar to Invoke operation &apos;{0}&apos; failed validation.  Please inspect ValidationErrors on the operation for details..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.DomainContext_LoadOperationFailed">
            <summary>
              Looks up a localized string similar to Load operation failed for query &apos;{0}&apos;. {1}.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.DomainContext_LoadOperationFailed_Validation">
            <summary>
              Looks up a localized string similar to Load operation for query &apos;{0}&apos; failed validation.  Please inspect ValidationErrors on the operation for details..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.DomainContext_SubmitAlreadyInProgress">
            <summary>
              Looks up a localized string similar to A SubmitChanges operation is already in progress on this DomainContext..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.DomainContext_SubmitOperationFailed">
            <summary>
              Looks up a localized string similar to Submit operation failed. {0}.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.DomainContext_SubmitOperationFailed_Conflicts">
            <summary>
              Looks up a localized string similar to Submit operation failed due to conflicts. Please inspect Entity.EntityConflict for each entity in EntitiesInError for more information..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.DomainContext_SubmitOperationFailed_Validation">
            <summary>
              Looks up a localized string similar to Submit operation failed validation. Please inspect Entity.ValidationErrors for each entity in EntitiesInError for more information..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.DomainOperationOutOfRange">
            <summary>
              Looks up a localized string similar to Value {0} is not a valid DomainOperation enumeration value.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.Entity_InvokeOnDeletedEntity">
            <summary>
              Looks up a localized string similar to A custom method cannot be invoked on an entity in a Deleted state..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.Entity_InvokeOnUnattachedEntity">
            <summary>
              Looks up a localized string similar to A custom method cannot be invoked on an unattached Entity..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.Entity_InvokeWhileSubmitting">
            <summary>
              Looks up a localized string similar to A custom method cannot be invoked on an entity that is part of a change-set that is in the process of being submitted..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.Entity_KeyMembersCannotBeChanged">
            <summary>
              Looks up a localized string similar to The value of key member &apos;{0}&apos; on an instance of an entity of type &apos;{1}&apos; has changed. Entity key members cannot be changed..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.Entity_MultipleCustomMethodInvocations">
            <summary>
              Looks up a localized string similar to Only one pending custom method invocation is allowed per entity..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.Entity_Not_In_Collection">
            <summary>
              Looks up a localized string similar to The specified Entity is not a member of this collection.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.Entity_Property_Does_Not_Exist">
            <summary>
              Looks up a localized string similar to Entity type &apos;{0}&apos; does not contain a public property named &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.Entity_Property_Is_ReadOnly">
            <summary>
              Looks up a localized string similar to The {0} property is read only..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.Entity_Property_NotChangeTracked">
            <summary>
              Looks up a localized string similar to The property &apos;{0}&apos; on entity type &apos;{1}&apos; is not a change tracked data member..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.Entity_ReadOnly">
            <summary>
              Looks up a localized string similar to This entity is read-only because one of its domain methods has been invoked, the entity is part of a submit operation in progress, or because edit is not supported for the entity Type..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.Entity_UncommittedChanges">
            <summary>
              Looks up a localized string similar to Entity &apos;{0}&apos; is currently being edited and has uncommitted changes. A call to BeginEdit must be followed by a call to EndEdit or CancelEdit before changes can be submitted..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.EntityCollection_ModificationNotAllowedForExternalReference">
            <summary>
              Looks up a localized string similar to Modification of an EntityCollection whose source is external is not permitted..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.EntityConflict_CannotResolveDeleteConflict">
            <summary>
              Looks up a localized string similar to Resolve cannot be called for delete conflicts..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.EntityConflict_IsDeleteConflict">
            <summary>
              Looks up a localized string similar to PropertyNames are not available for delete conflicts..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.EntityContainer_EntitySetAlreadyExists">
            <summary>
              Looks up a localized string similar to The EntitySet for Entity &apos;{0}&apos; already exists in the EntityContainer..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.EntityContainerDoesntContainEntityType">
            <summary>
              Looks up a localized string similar to This EntityContainer doesn&apos;t contain an EntitySet of type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.EntityKey_CannotBeNull">
            <summary>
              Looks up a localized string similar to An EntityKey value cannot be null.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.EntityKey_EmptyKeyMembers">
            <summary>
              Looks up a localized string similar to To create an EntityKey, you must specify at least one key value..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.EntityQuery_NotComposable">
            <summary>
              Looks up a localized string similar to EntityQuery for Type &apos;{0}&apos; targeting query operation &apos;{1}&apos; does not support query composition..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.EntitySet_DuplicateIdentity">
            <summary>
              Looks up a localized string similar to An entity with the same identity already exists in this EntitySet..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.EntitySet_EntityAlreadyAttached">
            <summary>
              Looks up a localized string similar to The entity being added is already attached to another EntitySet.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.EntitySet_EntityAlreadyInSet">
            <summary>
              Looks up a localized string similar to The specified entity is already contained in an EntitySet.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.EntitySet_EntityNotInSet">
            <summary>
              Looks up a localized string similar to The specified entity is not contained in this EntitySet..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.EntitySet_UnsupportedOperation">
            <summary>
              Looks up a localized string similar to This EntitySet of type &apos;{0}&apos; does not support the &apos;{1}&apos; operation..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.EntitySet_Wrong_Type">
            <summary>
              Looks up a localized string similar to EntitySet of type &apos;{0}&apos; cannot contain instances of Type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.FailedToConvertValue">
            <summary>
              Looks up a localized string similar to Failed to convert value of type &apos;{0}&apos; to type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.Invalid_Method">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; does not contain a public method named &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.InvalidOperationExceptionType">
            <summary>
              Looks up a localized string similar to The specified exception type &apos;{0}&apos; is not one of the expected types of recoverable errors.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.MemberMustBeAssociation">
            <summary>
              Looks up a localized string similar to Member &apos;{0}&apos; specified must be an association member, marked with the AssociationAttribute.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.Operation_HasErrorMustBeTrue">
            <summary>
              Looks up a localized string similar to MarkErrorAsHandled can only be called if HasError is true..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.OperationErrorTypeOutOfRange">
            <summary>
              Looks up a localized string similar to Value {0} is not a valid OperationErrorType enum value.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.Parameter_NullOrEmpty">
            <summary>
              Looks up a localized string similar to The parameter &apos;{0}&apos; cannot be null or empty..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.Type_Not_Entity">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not derive from Entity.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.ValidationUtilities_AmbiguousMatch">
            <summary>
              Looks up a localized string similar to Ambiguous match for method &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.ValidationUtilities_ContextInstance_CannotBeNull">
            <summary>
              Looks up a localized string similar to ValidationContext.ObjectInstance cannot be null..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.ValidationUtilities_MethodNotFound">
            <summary>
              Looks up a localized string similar to Method &apos;{0}.{1}&apos; accepting {2} parameter(s) of type(s) ({3}) could not be found..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.ValidationUtilities_MethodNotFound_ZeroParams">
            <summary>
              Looks up a localized string similar to Method &apos;{0}.{1}&apos; accepting zero parameters could not be found..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resource.WebDomainClient_OperationDoesNotExist">
            <summary>
              Looks up a localized string similar to Operation &apos;{0}&apos; does not exist..
            </summary>
        </member>
        <member name="T:System.Windows.Ria.SubmitCompletedResult">
            <summary>
            Represents the result of a submit operation.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.SubmitCompletedResult.#ctor(System.Windows.Ria.EntityChangeSet,System.Collections.Generic.IEnumerable{System.Windows.Ria.ChangeSetEntry})">
            <summary>
            Public constructor
            </summary>
            <param name="changeSet">The changeset that was submitted.</param>
            <param name="operationResults">The <see cref="T:System.Windows.Ria.ChangeSetEntry"/> results sent back from the 
            domain service for the submit operation.</param>
        </member>
        <member name="P:System.Windows.Ria.SubmitCompletedResult.ChangeSet">
            <summary>
            Gets the <see cref="T:System.Windows.Ria.EntityChangeSet"/> that was submitted
            </summary>
        </member>
        <member name="P:System.Windows.Ria.SubmitCompletedResult.Results">
            <summary>
            Gets the <see cref="T:System.Windows.Ria.ChangeSetEntry"/> results that were returned
            from the domain service.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Services.ValidationUtilities.CreateValidationContext(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Creates a new <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext"/> for the current object instance.
            </summary>
            <param name="instance">The object instance being validated.</param>
            <param name="parentContext">Optional context to inherit from.  May be null.</param>
            <returns>A new validation context.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.ValidationUtilities.TryValidateMethodCall(System.String,System.ComponentModel.DataAnnotations.ValidationContext,System.Object[],System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Determines whether it is valid to call the specified method.
            </summary>
            <remarks>
            This method evaluates all <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>s associated with the method and its parameters.  Any failure returns <c>false</c>.
            </remarks>
            <param name="methodName">The name of the method to be called</param>
            <param name="validationContext">Describes the method being tested</param>
            <param name="parameters">The parameter values to be passed to the method.  They will be validated.</param>
            <param name="validationResults">Optional collection to receive validation results for failed validations.</param>
            <returns><c>true</c> if the method is valid.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.ValidationUtilities.ValidateMethodCall(System.String,System.ComponentModel.DataAnnotations.ValidationContext,System.Object[])">
            <summary>
            Throws a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> if it is not valid to call the specified method.
            </summary>
            <remarks>This method evaluates all the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>s associated with the
            method and its parameters. Any failure will cause the exception to be thrown.
            </remarks>
            <param name="methodName">The name of the method to be called</param>
            <param name="validationContext">Describes the method being called.</param>
            <param name="parameters">The parameter values to be passed to the method.  They will be validated.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="validationContext"/> is null</exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"> When it is not valid to call the specified method</exception>
        </member>
        <member name="M:System.Windows.Ria.Services.ValidationUtilities.GetMethod(System.Object,System.String,System.Object[])">
            <summary>
            Internal helper method for getting a method from an object instance that matches
            the specified parameters.
            </summary>
            <param name="instance">Object instance on which the method will be called</param>
            <param name="methodName">The name of the method to be called</param>
            <param name="parameters">The parameter values to be passed to the method</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> from an object instance that matches
            the specified parameters.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.ValidationUtilities.IsBindable(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Checks whether the specified set of parameters can be passed to the specified method.
            </summary>
            <param name="method">The method to validate the set of parameters against.</param>
            <param name="parameters">The set of parameters to check.</param>
            <returns><c>true</c> if the set of parameters can be passed to the specified method.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.ValidationUtilities.TryValidateMethodCall(System.Reflection.MethodInfo,System.ComponentModel.DataAnnotations.ValidationContext,System.Object[],System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Determines whether it is valid to call the specified method.
            </summary>
            <remarks>
            This method evaluates all <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>s associated with the method and its parameters.  Any failure returns <c>false</c>.
            </remarks>
            <param name="method">The method to be called</param>
            <param name="validationContext">Describes the method being tested</param>
            <param name="parameters">The parameter values to be passed to the method.  They will be validated.</param>
            <param name="validationResults">Optional collection to receive validation results for failed validations.</param>
            <returns><c>true</c> if the method is valid.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.ValidationUtilities.GetDisplayAttribute(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Gets the DisplayAttribute that applies to a method, parameter, property, etc.
            </summary>
            <param name="member">A <see cref="T:System.Reflection.ICustomAttributeProvider"/> member to query for <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/>s.</param>
            <returns>A <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/> found or <c>null</c> if none is found</returns>
        </member>
        <member name="T:System.Windows.Ria.ApplicationServices.LoginParameters">
            <summary>
            The parameters that specify the user to authentication in the <c>Login</c>
            methods on <see cref="T:System.Windows.Ria.ApplicationServices.AuthenticationService"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.LoginParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Ria.ApplicationServices.LoginParameters"/> class with default values.
            </summary>
            <remarks>
            This login will not persist.
            </remarks>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.LoginParameters.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Ria.ApplicationServices.LoginParameters"/> class with the specified name 
            and password.
            </summary>
            <remarks>
            This login will not persist.
            </remarks>
            <param name="userName">The name of the user to be authenticated</param>
            <param name="password">The password of the user to be authenticated</param>
        </member>
        <member name="M:System.Windows.Ria.ApplicationServices.LoginParameters.#ctor(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Ria.ApplicationServices.LoginParameters"/> class with the specified name,
            password, and persistence.
            </summary>
            <param name="userName">The name of the user to be authenticated</param>
            <param name="password">The password of the user to be authenticated</param>
            <param name="isPersistent">Whether the login should persist between sessions</param>
            <param name="customData">Optional implementation-specific data</param>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.LoginParameters.UserName">
            <summary>
            Gets the name of the user to be authenticated.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.LoginParameters.Password">
            <summary>
            Gets the password of the user to be authenticated.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.LoginParameters.IsPersistent">
            <summary>
            Gets a value indicating whether the login should persist between sessions.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.ApplicationServices.LoginParameters.CustomData">
            <summary>
            Gets optional implementation-specific data.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Services.Evaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <param name="funcCanBeEvaluated">A function that decides whether a given expression 
            node can be part of the local function.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.Evaluator.PartialEval(System.Linq.Expressions.Expression)">
            <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="T:System.Windows.Ria.Services.Evaluator.SubtreeEvaluator">
            <summary>
            Evaluates and replaces sub-trees when first candidate is reached (top-down)
            </summary>
        </member>
        <member name="T:System.Windows.Ria.Services.Evaluator.Nominator">
            <summary>
            Performs bottom-up analysis to determine which nodes can possibly
            be part of an evaluated sub-tree.
            </summary>
        </member>
        <member name="T:System.Windows.Ria.Services.QuerySerializer">
            <summary>
            This serializer supports Where, OrderBy, Skip and Take.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Services.QuerySerializer.Visitor.GetQueryRoot(System.Linq.Expressions.Expression)">
            <summary>
            Drill through MethodCallExpression chain searching for the root of
            the query.
            </summary>
            <param name="expr">The <see cref="T:System.Linq.Expressions.Expression"/> to search.</param>
            <returns>root of the query</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.QuerySerializer.Visitor.VerifyMethodAccessibility(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Verify that the declaring type of the method is one of the supported types.
            Note that this list of types corresponds to the list of accessible types
            defined by the server query parser.
            </summary>
            <param name="mce">The method call expression.</param>
        </member>
        <member name="M:System.Windows.Ria.Services.QuerySerializer.Visitor.ValidateConstant(System.Object)">
            <summary>
            Ensure that the specified constant value is of a Type
            supported by the server query serializer - we don't want
            to serialize a value that the server can't handle.
            </summary>
            <param name="value">The constant value</param>
        </member>
        <member name="M:System.Windows.Ria.Services.QuerySerializer.Visitor.FlattenOrderExpressions">
            <summary>
            Unify all ordering expressions into a single order expression
            </summary>
        </member>
        <member name="T:System.Windows.Ria.Services.QuerySerializer.MethodCallConverter">
            <summary>
            This visitor is used to make any required method call translations.
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Services.QuerySerializer.MethodCallConverter.MakeVBCompare(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            For the specified arguments and case sensitivity, return a expression
            representing an equivalent call to string.Compare.
            </summary>
            <param name="left">The expression on the left-hand side.</param>
            <param name="right">The expression on the right-hand side.</param>
            <param name="caseSensitive">Indicates whether to do a case-sensitive comparison.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="T:System.Windows.Ria.Services.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.Resource.FailedToConvertValue">
            <summary>
              Looks up a localized string similar to Failed to convert value of type &apos;{0}&apos; to type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.Resource.QuerySerialization_BitwiseOperatorsNotSupported">
            <summary>
              Looks up a localized string similar to Bitwise operators are not supported in queries..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.Resource.QuerySerialization_MethodNotAccessible">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; on type &apos;{1}&apos; is not accessible. Only methods on primitive types, System.Math and System.Convert are supported in queries..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.Resource.QuerySerialization_NestedQueriesNotSupported">
            <summary>
              Looks up a localized string similar to Nested query expressions are not supported..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.Resource.QuerySerialization_NewExpressionsNotSupported">
            <summary>
              Looks up a localized string similar to &apos;New&apos; Expressions are not supported in queries..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.Resource.QuerySerialization_ProjectionsNotSupported">
            <summary>
              Looks up a localized string similar to Select projections are not supported..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.Resource.QuerySerialization_UnsupportedBinaryOp">
            <summary>
              Looks up a localized string similar to Binary operation &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.Resource.QuerySerialization_UnsupportedQueryOperator">
            <summary>
              Looks up a localized string similar to Query operator &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.Resource.QuerySerialization_UnsupportedType">
            <summary>
              Looks up a localized string similar to Value of type &apos;{0}&apos; cannot be serialized as part of the query. &apos;{0}&apos; is not a supported Type..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Services.Resource.QuerySerialization_UnsupportedUnaryOp">
            <summary>
              Looks up a localized string similar to Unary operation &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="M:System.Windows.Ria.Services.Utility.IsPropertyReadOnly(System.Reflection.PropertyInfo)">
            <summary>
            Returns true if the specified property is read-only by virtue of having
            an appropriately configured <see cref="T:System.ComponentModel.DataAnnotations.EditableAttribute"/> applied.
            </summary>
            <param name="property">The property to check for editability.</param>
            <returns><c>true</c> if the specified property is read-only; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.Utility.IsNullableType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is a <see cref="T:System.Nullable"/>
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the given type is a nullable type</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.Utility.GetNonNullableType(System.Type)">
            <summary>
            If the given type is <see cref="T:System.Nullable"/>, returns the element type,
            otherwise simply returns the input type
            </summary>
            <param name="type">The type to test that may or may not be Nullable</param>
            <returns>Either the input type or, if it was Nullable, its element type</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.Utility.IsPredefinedType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is a primitive type or one
            of our standard acceptable simple types, such as <see cref="T:System.String"/>,
            <see cref="T:System.Guid"/>, or one of our standard generic types whose generic
            argument is primitive or simple (e.g. Nullable, IEnumerable, IDictionary&lt;TKey,TValue&gt;).
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the type is a primitive or standard acceptable types</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.Utility.IsPredefinedListType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is <see cref="T:System.Collections.Generic.IEnumerable`1"/> or an <see cref="T:System.Collections.IList"/> type, 
            and is either an interface, an array, or has a default constructor.
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the type is a primitive or standard acceptable types</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.Utility.IsPredefinedDictionaryType(System.Type)">
            <summary>
            Returns <c>true</c> if <paramref name="type"/> implements <see cref="T:System.Collections.Generic.IDictionary`2"/> and
            its generic type arguments are acceptable predefined simple types.
            </summary>
            <param name="type">The type to test.</param>
            <returns><c>true</c> if the type is a <see cref="T:System.Collections.Generic.IDictionary`2"/> with supported generic type arguments.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.Utility.GetDictionaryGenericArgumentTypes(System.Type)">
            <summary>
            Returns an array of types that represent the generic type arguments used in <paramref name="type"/>'s
            implementation of <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="type">The type to examine.</param>
            <returns>An array of types that represent the generic type arguments used in <paramref name="type"/>'s
            implementation of <see cref="T:System.Collections.Generic.IDictionary`2"/>. Returns null if <paramref name="type"/> does 
            not implement <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.Utility.IsPredefinedSimpleType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is either primitive or one of our
            standard acceptable simple types, such as <see cref="T:System.String"/>,
            <see cref="T:System.Guid"/>, etc
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the type is a primitive or standard acceptable types</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.Utility.GetElementType(System.Type)">
            <summary>
            Returns the underlying element type starting from a given type.
            </summary>
            <remarks>
            Simple types simply return the input type.
            If the given type is an array, this method returns the array's
            element type.
            If the type is a generic type of <see cref="T:System.Collections.IEnumerable"/>, 
            or <see cref="T:System.Nullable"/>, this method returns the element
            type of the generic parameter
            </remarks>
            <param name="type"><see cref="T:System.Type"/> to examine.</param>
            <returns>The underlying element type starting from the given type</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.Utility.DefinitionIsAssignableFrom(System.Type,System.Type)">
            <summary>
            Determines whether the generic type definition is assignable from the derived type.
            </summary>
            <remarks>
            This behaves just like <see cref="M:System.Type.IsAssignableFrom(System.Type)"/> except that it determines
            whether any generic type that can be made from the <paramref name="genericTypeDefinition"/>
            is assignable from <paramref name="derivedType"/>.
            </remarks>
            <param name="genericTypeDefinition">The generic type definition</param>
            <param name="derivedType">The type to determine assignability from</param>
            <returns>Whether the type definition is assignable from the derived type</returns>
        </member>
        <member name="M:System.Windows.Ria.Services.Utility.DefinitionIsAssignableFrom(System.Type,System.Type,System.Type@)">
            <summary>
            Determines whether the generic type definition is assignable from the derived type.
            </summary>
            <remarks>
            This behaves just like <see cref="M:System.Type.IsAssignableFrom(System.Type)"/> except that it determines
            whether any generic type that can be made from the <paramref name="genericTypeDefinition"/>
            is assignable from <paramref name="derivedType"/>.
            </remarks>
            <param name="genericTypeDefinition">The generic type definition</param>
            <param name="derivedType">The type to determine assignability from</param>
            <param name="genericType">The generic base class or interface implemented by the derived
            type that can be made from the <paramref name="genericTypeDefinition"/>. This value is
            null when the method return false.
            </param>
            <returns>Whether the type definition is assignable from the derived type</returns>
        </member>
        <member name="T:System.Windows.Ria.WebContextBase">
            <summary>
            Context for the application.
            </summary>
            <remarks>
            This context makes services and other values available for consumption
            from code and xaml.
            </remarks>
        </member>
        <member name="M:System.Windows.Ria.WebContextBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Ria.WebContextBase"/> class
            </summary>
            <exception cref="T:System.InvalidOperationException"> is thrown if the constructor is invoked
            when <see cref="P:System.Windows.Ria.WebContextBase.Current"/> is valid.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.WebContextBase.RaisePropertyChanged(System.String)">
            <summary>
            Raises an <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event for the specified property.
            </summary>
            <param name="propertyName">The property to raise an event for</param>
            <exception cref="T:System.ArgumentNullException"> is thrown if the 
            <paramref name="propertyName"/> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Ria.WebContextBase.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises an <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <param name="e">The event to raise</param>
        </member>
        <member name="M:System.Windows.Ria.WebContextBase.AuthenticationService_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles property changed events raised by the <see cref="P:System.Windows.Ria.WebContextBase.Authentication"/> context.
            </summary>
            <param name="sender">The authentication context</param>
            <param name="e">The event that occurred</param>
        </member>
        <member name="M:System.Windows.Ria.WebContextBase.System#Windows#IApplicationService#StartService(System.Windows.ApplicationServiceContext)">
            <summary>
            Starts the context as an application service
            </summary>
            <param name="context">The service context</param>
        </member>
        <member name="M:System.Windows.Ria.WebContextBase.System#Windows#IApplicationService#StopService">
            <summary>
            Stops the context as an application service
            </summary>
        </member>
        <member name="P:System.Windows.Ria.WebContextBase.Current">
            <summary>
            Gets the context that is registered as a lifetime object with the current application.
            </summary>
            <exception cref="T:System.InvalidOperationException"> is thrown if there is no current application.
            </exception>
            <exception cref="T:System.InvalidOperationException"> is thrown if no contexts have been added.
            </exception>
            <exception cref="T:System.InvalidOperationException"> is thrown if more than one context has been added.
            </exception>
            <seealso cref="P:System.Windows.Application.ApplicationLifetimeObjects"/>
        </member>
        <member name="P:System.Windows.Ria.WebContextBase.User">
            <summary>
            Gets a principal representing the authenticated identity.
            </summary>
            <remarks>
            This value is the same one available in <see cref="P:System.Windows.Ria.ApplicationServices.AuthenticationService.User"/>.
            </remarks>
        </member>
        <member name="P:System.Windows.Ria.WebContextBase.Authentication">
            <summary>
            Gets or sets the authentication context for the application.
            </summary>
            <exception cref="T:System.ArgumentNullException"> is thrown if <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="E:System.Windows.Ria.WebContextBase.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:System.Threading.OrderedSynchronizationContext">
            <summary>
            Represents a synchronization context which preserves ordering.
            </summary>
        </member>
        <member name="M:System.Threading.OrderedSynchronizationContext.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:System.Threading.OrderedSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches an asynchronous message.
            </summary>
            <param name="d">The <see cref="T:System.Threading.SendOrPostCallback"/> delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:System.Threading.OrderedSynchronizationContext.ProcessPendingCallbacks(System.Object)">
            <summary>
            Processes all the pending callbacks.
            </summary>
            <param name="state">This value is always null.</param>
        </member>
        <member name="T:System.Windows.Ria.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.ApplicationServices_CannotInitializeDomainContext">
            <summary>
              Looks up a localized string similar to The DomainContextType is null or invalid and there are no contexts generated from AuthenticationBase&lt;T&gt;..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.ApplicationServices_CannotInitializeUser">
            <summary>
              Looks up a localized string similar to The User type must extend UserBase and provide a default constructor..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.ApplicationServices_CannotSaveAnonymous">
            <summary>
              Looks up a localized string similar to The current user is anonymous. Data may only be saved for authenticated users..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.ApplicationServices_LoadNoUser">
            <summary>
              Looks up a localized string similar to GetUser should have returned a single user..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.ApplicationServices_LoginSuccessRequiresAuthN">
            <summary>
              Looks up a localized string similar to The user must be authenticated when the Login finishes successfully..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.ApplicationServices_LogoutNoUser">
            <summary>
              Looks up a localized string similar to Logout should have returned a single, anonymous user..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.ApplicationServices_NoLoadUserMethod">
            <summary>
              Looks up a localized string similar to Derived service does not contain a LoadUser method..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.ApplicationServices_OperationCannotCancel">
            <summary>
              Looks up a localized string similar to The {0} operation does not support cancellation..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.ApplicationServices_SaveErrors">
            <summary>
              Looks up a localized string similar to Errors occurred while submitting the user changes..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.ApplicationServices_ServiceMustBeActive">
            <summary>
              Looks up a localized string similar to The service must be active to invoke method..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.ApplicationServices_ServiceMustNotBeActive">
            <summary>
              Looks up a localized string similar to The service must be inactive to update state..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.ApplicationServices_UserIsNull">
            <summary>
              Looks up a localized string similar to CreateDefaultUser cannot return a null user..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.ApplicationServices_UserServiceIsBusy">
            <summary>
              Looks up a localized string similar to UserService operation already in progress..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.ApplicationServices_WANoLogin">
            <summary>
              Looks up a localized string similar to Windows authentication does not support logging in..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.ApplicationServices_WANoLogout">
            <summary>
              Looks up a localized string similar to Windows authentication does not support logging out..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.AsyncOperation_AlreadyCompleted">
            <summary>
              Looks up a localized string similar to This operation has already completed..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.AsyncOperation_CancelNotSupported">
            <summary>
              Looks up a localized string similar to This operation does not support cancellation..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.Data_AbsoluteUriCannotRequestHTTPS">
            <summary>
              Looks up a localized string similar to The HTTPS scheme cannot be specified for absolute URIs..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.MethodCanOnlyBeInvokedOnce">
            <summary>
              Looks up a localized string similar to Method can only be invoked once..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.Operation_InvalidCallbackSignature">
            <summary>
              Looks up a localized string similar to The callback must take a single parameter that can accept a value of Type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.OperationCancelled">
            <summary>
              Looks up a localized string similar to The operation was canceled..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.OperationNotComplete">
            <summary>
              Looks up a localized string similar to The operation has not completed..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.SettableOnlyOnce">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; can only be set once..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.WebContext_AuthenticationNotSet">
            <summary>
              Looks up a localized string similar to WebContextBase.Authentication has not been initialized. This member is only supported in valid implementations..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.WebContext_CannotModifyAuthentication">
            <summary>
              Looks up a localized string similar to Authentication cannot be set after the Application.Startup event has occurred..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.WebContext_ManyContexts">
            <summary>
              Looks up a localized string similar to Multiple contexts have been added to the Application&apos;s lifetime objects. For WebContextBase.Current to resolve correctly, only one context can be in the lifetime objects at a time..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.WebContext_NoApplication">
            <summary>
              Looks up a localized string similar to The current context cannot be accessed without a valid Application..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.WebContext_NoContexts">
            <summary>
              Looks up a localized string similar to No contexts have been added to the Application&apos;s lifetime objects. For WebContextBase.Current to resolve correctly, add a single context to the lifetime objects..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.WebContext_OnlyOne">
            <summary>
              Looks up a localized string similar to A new WebContextBase cannot be created once WebContextBase.Current is valid..
            </summary>
        </member>
        <member name="P:System.Windows.Ria.Resources.WrongAsyncResult">
            <summary>
              Looks up a localized string similar to IAsyncResult object did not come from the corresponding async method on this type..
            </summary>
        </member>
    </members>
</doc>
