<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Controls.Ria</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Common.CommonResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.CannotConvertValue">
            <summary>
              Looks up a localized string similar to The provided value of type &apos;{0}&apos; cannot be converted to type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.EventNotFound">
            <summary>
              Looks up a localized string similar to The event named &apos;{0}&apos; cannot be found on type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.InvalidPropertyAccess">
            <summary>
              Looks up a localized string similar to The property named &apos;{1}&apos; cannot be accessed because &apos;{0}&apos; returned a null reference. .
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.PropertyNotFound">
            <summary>
              Looks up a localized string similar to The property named &apos;{0}&apos; cannot be found on type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.PropertyNotReadable">
            <summary>
              Looks up a localized string similar to The property named &apos;{0}&apos; on type &apos;{1}&apos; cannot be read..
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.PropertyNotWritable">
            <summary>
              Looks up a localized string similar to The property named &apos;{0}&apos; on type &apos;{1}&apos; cannot be written..
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.TypeConverters_ConvertFrom_CannotConvert">
            <summary>
              Looks up a localized string similar to {0} cannot convert from {1}..
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.TypeConverters_ConvertFromString_CannotConvert">
            <summary>
              Looks up a localized string similar to Cannot convert {1} to type {0}..
            </summary>
        </member>
        <member name="T:System.Windows.Common.Utilities">
            <summary>
            Utility class for sharing code
            </summary>
        </member>
        <member name="M:System.Windows.Common.Utilities.AreValuesEqual(System.Object,System.Object)">
            <summary>
            Determines if two objects are equal
            </summary>
            <param name="value1">first object to compare</param>
            <param name="value2">second object to compare</param>
            <returns>True if the two values are equal</returns>
        </member>
        <member name="M:System.Windows.Common.Utilities.GetConvertedValue(System.Globalization.CultureInfo,System.Type,System.Object@)">
            <summary>
            Converts a value to the provided targetType
            </summary>
            <param name="culture">Culture used for the conversion</param>
            <param name="targetType">Destination type</param>
            <param name="value">Value to convert</param>
            <returns>Exception when conversion fails</returns>
        </member>
        <member name="M:System.Windows.Common.Utilities.IsConversionException(System.Exception)">
            <summary>
            Determines whether an exception is acceptable for type conversion operations.
            </summary>
            <param name="exception">Exception to check</param>
            <returns>True if the exception is an acceptable conversion exception</returns>
        </member>
        <member name="T:System.Windows.Common.DebugTrace">
            <summary>
            Simple debug tracing utility.
            See sample usage in DomainDataSource.cs
            </summary>
        </member>
        <member name="M:System.Windows.Common.DebugTrace.TraceSwitch.#ctor(System.String)">
            <summary>
            Internal TraceSwitch constructor.
            </summary>
            <param name="displayName">The display name.</param>
        </member>
        <member name="P:System.Windows.Common.DebugTrace.TraceSwitch.DisplayName">
            <summary>
            Gets the DisplayName.
            </summary>
        </member>
        <member name="T:System.Windows.Common.DependencyObjectExtensions">
            <summary>
            Utility class for DependencyObject/DependencyProperty related operations
            </summary>
        </member>
        <member name="M:System.Windows.Common.DependencyObjectExtensions.IsHandlerSuspended(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Determines whether a dependency object has suspended the change handler for the provided dependency property.
            </summary>
            <param name="obj">The <see cref="T:System.Windows.DependencyObject"/> to examine.</param>
            <param name="dependencyProperty">The <see cref="T:System.Windows.DependencyObject"/>'s <see cref="T:System.Windows.DependencyProperty"/> to examine.</param>
            <returns>True when the change handler is suspended.</returns>
        </member>
        <member name="M:System.Windows.Common.DependencyObjectExtensions.SetValueNoCallback(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object)">
            <summary>
            Suspends the change handler of a dependency property, sets the property value and reactivates the
            change handler.
            </summary>
            <param name="obj">The <see cref="T:System.Windows.DependencyObject"/> to update without triggering a change event.</param>
            <param name="property">The <see cref="T:System.Windows.DependencyObject"/>'s <see cref="T:System.Windows.DependencyProperty"/> to set.</param>
            <param name="value">The value that <paramref name="property"/> should be set to.</param>
        </member>
        <member name="T:System.Windows.Common.FrameworkElementExtensions">
            <summary>
            Utility class for FrameworkElement related operations
            </summary>
        </member>
        <member name="M:System.Windows.Common.FrameworkElementExtensions.FindFrameworkElement(System.Windows.FrameworkElement,System.String)">
            <summary>
            Walks up the parent chain of the provided System.Windows.FrameworkElement
            element and looks for a child System.Windows.FrameworkElement with the given name.
            </summary>
            <param name="element">The <see cref="T:System.Windows.FrameworkElement"/> extended by this method.</param>
            <param name="name">The name of the <see cref="T:System.Windows.FrameworkElement"/> to find.</param>
            <returns>The FrameworkElement with the given name, or null</returns>
        </member>
        <member name="T:System.Windows.Common.GeneralEventHandlerRegistrationResult">
            <summary>
            Possible return values for registration operation below
            </summary>
        </member>
        <member name="F:System.Windows.Common.GeneralEventHandlerRegistrationResult.Success">
            <summary>
            Operation succeeded
            </summary>
        </member>
        <member name="F:System.Windows.Common.GeneralEventHandlerRegistrationResult.AlreadyRegistered">
            <summary>
            The provided handler/event/sender combination is already registered
            </summary>
        </member>
        <member name="F:System.Windows.Common.GeneralEventHandlerRegistrationResult.InvalidEventName">
            <summary>
            The event name provided is not found on the sender
            </summary>
        </member>
        <member name="F:System.Windows.Common.GeneralEventHandlerRegistrationResult.InvalidSignature">
            <summary>
            The event provided does not have the supported signature
            </summary>
        </member>
        <member name="F:System.Windows.Common.GeneralEventHandlerRegistrationResult.MaximumEventNamesAlreadyRegistered">
            <summary>
            The provided sender has already registered the maximum number of event types
            </summary>
        </member>
        <member name="T:System.Windows.Common.IGeneralEventHandler">
            <summary>
            Interface the interested parties need to implement to use the GeneralEventHandler utility
            </summary>
        </member>
        <member name="M:System.Windows.Common.IGeneralEventHandler.HandleGeneralEvent(System.Object,System.EventArgs,System.String)">
            <summary>
            This method gets invoked by the GeneralEventHandler class whenever a registered event 
            is raised. All interested parties (i.e. all registered handlers) for this particular
            sender and event name get notified.
            </summary>
            <param name="sender">Source of the raised event</param>
            <param name="e">Arguments of the raised event</param>
            <param name="eventName">Name of the raised event</param>
        </member>
        <member name="T:System.Windows.Common.GeneralEventHandler">
            <summary>
            Static utility class that allows to listen to events on any kind of of object (typically a UI control)
            - Multiple interested parties (i.e. handlers) can register for the same event on the same sender.
            - Interested parties need to implement the small IGeneralEventHandler interface
            - Whenever an event is raised, all interested parties get notified via a IGeneralEventHandler.HandleGeneralEvent call
            that specifies the event source (sender) and event name
            - Each sender instance can only be registered with 5 kinds of events. This limit can easily be increased/decreased by
            1. Changing the MaximumEventsPerSender constant
            2. Updating the list of GeneralEventHandler# functions
            - When an interested party is no longer interested, it should call UnregisterEventHandler to release its reference.
            </summary>
        </member>
        <member name="M:System.Windows.Common.GeneralEventHandler.RegisterEventHandler(System.Windows.Common.IGeneralEventHandler,System.Object,System.String)">
            <summary>
            Registers a particular handler, sender, event name combination.
            </summary>
            <param name="handler">Handler interested in the event</param>
            <param name="sender">Object that raises the event</param>
            <param name="eventName">Name of the event</param>
            <returns>GeneralEventHandlerRegistrationResult indicating success or failure</returns>
        </member>
        <member name="M:System.Windows.Common.GeneralEventHandler.UnregisterEventHandler(System.Windows.Common.IGeneralEventHandler,System.Object,System.String)">
            <summary>
            Unregisters a particular handler/sender/event combination.
            </summary>
            <param name="handler">Handler that previously registered the event</param>
            <param name="sender">Event source that was previously registered</param>
            <param name="eventName">Event name that was previously registered</param>
            <returns>True when the combination was found and unregistered, False otherwise</returns>
        </member>
        <member name="M:System.Windows.Common.GeneralEventHandler.GetEventHandlerParameterTypes(System.Type)">
            <summary>
            Gets the list of expected argument types for the event handler
            </summary>
            <param name="eventHandlerType">The event handler <see cref="T:System.Type"/>.</param>
            <returns>List of expected argument types for the event handler</returns>
        </member>
        <member name="M:System.Windows.Common.GeneralEventHandler.GeneralEventHandler_(System.Object,System.EventArgs,System.Int32)">
            <summary>
            Common event handler that forwards the notification to the various
            interested parties.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
            <param name="eventIndex">The event index.</param>
        </member>
        <member name="T:System.Windows.Data.CollectionViewGroupInternal">
            <summary>
            A CollectionViewGroupInternal, as created by a PagedCollectionView 
            according to a GroupDescription.
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupInternal._groupBy">
            <summary>
            GroupDescription used to define how to group the items
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupInternal._parentGroup">
            <summary>
            Parent group of this CollectionViewGroupInternal
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupInternal._version">
            <summary>
            Used for detecting stale enumerators
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.#ctor(System.Object,System.Windows.Data.CollectionViewGroupInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Data.CollectionViewGroupInternal"/> class.
            </summary>
            <param name="name">Name of the CollectionViewGroupInternal</param>
            <param name="parent">Parent node of the CollectionViewGroup</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.Add(System.Object)">
            <summary>
            Adds the specified item to the collection
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.Clear">
            <summary>
            Clears the collection of items
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.Insert(System.Object,System.Int32)">
            <summary>
            Insert a new item or subgroup.
            </summary>
            <param name="item">The item being inserted.</param>
            <param name="index">The index at which to insert the item.</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.LeafAt(System.Int32)">
            <summary>
            Return the item at the given index within the list of leaves governed
            by this group
            </summary>
            <param name="index">Index of the leaf</param>
            <returns>Item at given index</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.LeafIndexFromItem(System.Object,System.Int32)">
            <summary>
            Returns the index of the given item within the list of leaves governed
            by the full group structure.  The item must be a (direct) child of this
            group.  The caller provides the index of the item within this group,
            if known, or -1 if not.
            </summary>
            <param name="item">Item we are looking for</param>
            <param name="index">Index of the leaf</param>
            <returns>Number of items under that leaf</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.LeafIndexOf(System.Object)">
            <summary>
            Returns the index of the given item within the list of leaves governed
            by this group
            </summary>
            <param name="item">Item we are looking for</param>
            <returns>Number of items under that leaf</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.OnGroupByChanged">
            <summary>
            The group's description has changed - notify parent 
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.Remove(System.Object,System.Boolean)">
            <summary>
            Removes the specified item from the collection
            </summary>
            <param name="item">Item to remove</param>
            <param name="returnLeafIndex">Whether we want to return the leaf index</param>
            <returns>Leaf index where item was removed, if value was specified. Otherwise '-1'</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.RemoveEmptyGroup(System.Windows.Data.CollectionViewGroupInternal)">
            <summary>
            Removes an empty group from the PagedCollectionView grouping
            </summary>
            <param name="group">Empty subgroup to remove</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.ChangeCounts(System.Object,System.Int32)">
            <summary>
            Update the item count of the CollectionViewGroup
            </summary>
            <param name="item">CollectionViewGroup to update</param>
            <param name="delta">Delta to change count by</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.OnGroupByChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handler for the GroupBy PropertyChanged event
            </summary>
            <param name="sender">CollectionViewGroupInternal whose GroupBy property changed</param>
            <param name="e">The args for the PropertyChanged event</param>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupInternal.IsBottomLevel">
            <summary>
            Gets a value indicating whether this group 
            is at the bottom level (not further sub-grouped).
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupInternal.FullCount">
            <summary>
            Gets or sets the number of items and groups in the subtree under this group
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupInternal.GroupBy">
            <summary>
            Gets or sets how this group divides into subgroups
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupInternal.LastIndex">
            <summary>
            Gets or sets the most recent index where activity took place
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupInternal.SeedItem">
            <summary>
            Gets the first item (leaf) added to this group.  If this can't be determined,
            DependencyProperty.UnsetValue.
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupInternal.Parent">
            <summary>
            Gets the parent node for this CollectionViewGroupInternal
            </summary>
        </member>
        <member name="T:System.Windows.Data.CollectionViewGroupRoot">
            <summary>
            PagedCollectionView classes use this class as the manager 
            of all Grouping functionality
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupRoot.RootName">
            <summary>
            String constant used for the Root Name
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupRoot.UseAsItemDirectly">
            <summary>
            Private accessor for empty object instance
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupRoot.topLevelGroupDescription">
            <summary>
            Private accessor for the top level GroupDescription
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupRoot._groupBy">
            <summary>
            Private accessor for an ObservableCollection containing group descriptions
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupRoot._isDataInGroupOrder">
            <summary>
            Indicates whether the list of items (after applying the sort and filters, if any) 
            is already in the correct order for grouping.
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupRoot._view">
            <summary>
            Private accessor for the owning ICollectionView
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.#ctor(System.ComponentModel.ICollectionView,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Data.CollectionViewGroupRoot"/> class.
            </summary>
            <param name="view">PagedCollectionView that contains this grouping</param>
            <param name="isDataInGroupOrder">True if items are already in correct order for grouping</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.AddToSubgroups(System.Object,System.Boolean,System.Object)">
            <summary>
            Adds specified item to subgroups.
            </summary>
            <param name="item">Item to add.</param>
            <param name="loading">Whether we are currently loading.</param>
            <param name="insertedBefore">The item to insert this item before,
            or <c>null</c> if the item should be added at the end.</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.Initialize">
            <summary>
            Initializes the group descriptions
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.InsertSpecialItem(System.Int32,System.Object,System.Boolean)">
            <summary>
            Inserts specified item into the collection
            </summary>
            <param name="index">Index to insert into</param>
            <param name="item">Item to insert</param>
            <param name="loading">Whether we are currently loading</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Notify listeners that this View has changed
            </summary>
            <remarks>
            CollectionViews (and sub-classes) should take their filter/sort/grouping
            into account before calling this method to forward CollectionChanged events.
            </remarks>
            <param name="args">The NotifyCollectionChangedEventArgs to be passed to the EventHandler</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.OnGroupByChanged">
            <summary>
            Notify host that a group description has changed somewhere in the tree
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.RemoveFromSubgroups(System.Object)">
            <summary>
            Remove specified item from subgroups
            </summary>
            <param name="item">Item to remove</param>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.RemoveItemFromSubgroupsByExhaustiveSearch(System.Object)">
            <summary>
            Remove specified item from subgroups using an exhaustive search
            </summary>
            <param name="item">Item to remove</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.RemoveSpecialItem(System.Int32,System.Object,System.Boolean)">
            <summary>
            Removes specified item into the collection
            </summary>
            <param name="index">Index to remove from</param>
            <param name="item">Item to remove</param>
            <param name="loading">Whether we are currently loading</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.AddToSubgroup(System.Object,System.Windows.Data.CollectionViewGroupInternal,System.Int32,System.Object,System.Boolean,System.Object)">
            <summary>
            Add an item to the subgroup with the given name
            </summary>
            <param name="item">Item to add</param>
            <param name="group">Group to add item to</param>
            <param name="level">The level of grouping.</param>
            <param name="name">Name of subgroup to add to</param>
            <param name="loading">Whether we are currently loading</param>
            <param name="insertedBefore">The item to insert this item before,
            or <c>null</c> if the item should be added at the end.</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.AddToSubgroups(System.Object,System.Windows.Data.CollectionViewGroupInternal,System.Int32,System.Boolean,System.Object)">
            <summary>
            Add an item to the desired subgroup(s) of the given group
            </summary>
            <param name="item">Item to add</param>
            <param name="group">Group to add item to</param>
            <param name="level">The level of grouping</param>
            <param name="loading">Whether we are currently loading</param>
            <param name="insertedBefore">The item to insert this item before,
            or <c>null</c> if the item should be added at the end.</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.GetGroupDescription(System.Windows.Data.CollectionViewGroup,System.Int32)">
            <summary>
            Returns the description of how to divide the given group into subgroups
            </summary>
            <param name="group">CollectionViewGroup to get group description from</param>
            <param name="level">The level of grouping</param>
            <returns>GroupDescription of how to divide the given group</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.GetGroupName(System.Object,System.ComponentModel.GroupDescription,System.Int32)">
            <summary>
            Get the group name(s) for the given item
            </summary>
            <param name="item">Item to get group name for</param>
            <param name="groupDescription">GroupDescription for the group</param>
            <param name="level">The level of grouping</param>
            <returns>Group names for the specified item</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.InitializeGroup(System.Windows.Data.CollectionViewGroupInternal,System.Int32,System.Object)">
            <summary>
            Initialize the given group
            </summary>
            <param name="group">Group to initialize</param>
            <param name="level">The level of grouping</param>
            <param name="seedItem">The seed item to compare with to see where to insert</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.RemoveFromGroupDirectly(System.Windows.Data.CollectionViewGroupInternal,System.Object)">
            <summary>
            Remove an item from the direct children of a group.
            </summary>
            <param name="group">Group to remove item from</param>
            <param name="item">Item to remove</param>
            <returns>True if item could not be removed</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.RemoveFromSubgroup(System.Object,System.Windows.Data.CollectionViewGroupInternal,System.Int32,System.Object)">
            <summary>
            Remove an item from the subgroup with the given name.
            </summary>
            <param name="item">Item to remove</param>
            <param name="group">Group to remove item from</param>
            <param name="level">The level of grouping</param>
            <param name="name">Name of item to remove</param>
            <returns>Return true if the item was not in one of the subgroups it was supposed to be.</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.RemoveFromSubgroups(System.Object,System.Windows.Data.CollectionViewGroupInternal,System.Int32)">
            <summary>
            Remove an item from the desired subgroup(s) of the given group.
            </summary>
            <param name="item">Item to remove</param>
            <param name="group">Group to remove item from</param>
            <param name="level">The level of grouping</param>
            <returns>Return true if the item was not in one of the subgroups it was supposed to be.</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.RemoveItemFromSubgroupsByExhaustiveSearch(System.Windows.Data.CollectionViewGroupInternal,System.Object)">
            <summary>
            The item did not appear in one or more of the subgroups it
            was supposed to.  This can happen if the item's properties
            change so that the group names we used to insert it are
            different from the names used to remove it. If this happens,
            remove the item the hard way.
            </summary>
            <param name="group">Group to remove item from</param>
            <param name="item">Item to remove</param>
        </member>
        <member name="E:System.Windows.Data.CollectionViewGroupRoot.CollectionChanged">
            <summary>
            Raise this event when the (grouped) view changes
            </summary>
        </member>
        <member name="E:System.Windows.Data.CollectionViewGroupRoot.GroupDescriptionChanged">
            <summary>
            Raise this event when the GroupDescriptions change
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupRoot.GroupBySelector">
            <summary>
            Gets or sets a delegate to select the group description as a 
            function of the parent group and its level.
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupRoot.GroupDescriptions">
            <summary>
            Gets the description of grouping, indexed by level.
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupRoot.Culture">
            <summary>
            Gets the culture to use during sorting.
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupRoot.IsDataInGroupOrder">
            <summary>
            Gets or sets a value indicating whether the data is in group order
            </summary>
        </member>
        <member name="T:System.Windows.Data.CollectionViewGroupRoot.TopLevelGroupDescription">
            <summary>
            TopLevelGroupDescription class
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.TopLevelGroupDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Data.CollectionViewGroupRoot.TopLevelGroupDescription"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.TopLevelGroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            We have to implement this abstract method, but it should never be called
            </summary>
            <param name="item">Item to get group name from</param>
            <param name="level">The level of grouping</param>
            <param name="culture">Culture used for sorting</param>
            <returns>We do not return a value here</returns>
        </member>
        <member name="T:System.Windows.Controls.Ria.DomainDataSourceView">
            <summary>
            Collection view for the <see cref="T:System.Windows.Controls.DomainDataSource"/>.
            </summary>
            <remarks>
            This view supports adding, removing, access, and paging. For other standard view
            functions like sorting, filtering, and grouping, use of the Descriptor collections
            on the <see cref="T:System.Windows.Controls.DomainDataSource"/> is recommended.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.#ctor(System.Windows.Data.EntityCollectionView)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.Ria.DomainDataSourceView"/> class.
            </summary>
            <param name="entityCollectionView">The <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.EntityCollectionView"/> to wrap</param>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.Add(System.Object)">
            <summary>
            Adds the specified item to the collection.
            </summary>
            <param name="item">The item to add</param>
            <exception cref="T:System.InvalidOperationException"> is thrown if <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.CanAdd"/> if <c>false</c>.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.GetItemAt(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The index to get the item at</param>
            <returns>The item at the specified index</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> is thrown if <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.IndexOf(System.Object)">
            <summary>
            Gets the ordinal position of the specified item within the view.
            </summary>
            <param name="item">The item to get the index of.</param>
            <returns>Returns the index.</returns>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.Contains(System.Object)">
            <summary>
            Returns a value that indicates whether a given item belongs to this view.
            </summary>
            <param name="item">The item to check</param>
            <returns><c>true</c> if the item belongs to this view; otherwise <c>false</c>.</returns>
            <seealso cref="M:System.ComponentModel.ICollectionView.Contains(System.Object)"/>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.MoveCurrentTo(System.Object)">
            <summary>
            Sets the specified item to be the <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.CurrentItem"/> in the view.
            </summary>
            <param name="item">The item to set as the <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.CurrentItem"/>.</param>
            <returns><c>true</c> if the resulting <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.CurrentItem"/> is within the view; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.ComponentModel.ICollectionView.MoveCurrentTo(System.Object)"/>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.MoveCurrentToFirst">
            <summary>
            Sets the first item in the view as the <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.CurrentItem"/>.
            </summary>
            <returns><c>true</c> if the resulting <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.CurrentItem"/> is within the view; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.ComponentModel.ICollectionView.MoveCurrentToFirst"/>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.MoveCurrentToLast">
            <summary>
            Sets the last item in the view as the <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.CurrentItem"/>.
            </summary>
            <returns><c>true</c> if the resulting <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.CurrentItem"/> is within the view; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.ComponentModel.ICollectionView.MoveCurrentToLast"/>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.MoveCurrentToNext">
            <summary>
            Sets the item after the <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.CurrentItem"/> in the view as the <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.CurrentItem"/>.
            </summary>
            <returns><c>true</c> if the resulting <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.CurrentItem"/> is within the view; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.ComponentModel.ICollectionView.MoveCurrentToNext"/>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.MoveCurrentToPosition(System.Int32)">
            <summary>
            Sets the item at the specified index to be the <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.CurrentItem"/> in the view.
            </summary>
            <param name="position">The index to set the <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.CurrentItem"/> to</param>
            <returns><c>true</c> if the resulting <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.CurrentItem"/> is within the view; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.ComponentModel.ICollectionView.MoveCurrentToPosition(System.Int32)"/>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.MoveCurrentToPrevious">
            <summary>
            Sets the item before the <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.CurrentItem"/> in the view as the <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.CurrentItem"/>.
            </summary>
            <returns><c>true</c> if the resulting <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.CurrentItem"/> is within the view; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.ComponentModel.ICollectionView.MoveCurrentToPrevious"/>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.OnCollectionViewCurrentChanged(System.Object,System.EventArgs)">
            <summary>
            Handles current changed events raised by the <see cref="T:System.ComponentModel.ICollectionView"/>.
            </summary>
            <param name="sender">The <see cref="T:System.ComponentModel.ICollectionView"/></param>
            <param name="e">The event to handle</param>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.OnCurrentChanged(System.EventArgs)">
            <summary>
            Raises current changed events
            </summary>
            <param name="e">The event to raise</param>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.OnCollectionViewCurrentChanging(System.Object,System.ComponentModel.CurrentChangingEventArgs)">
            <summary>
            Handles current changing events raised by the <see cref="T:System.ComponentModel.ICollectionView"/>.
            </summary>
            <param name="sender">The <see cref="T:System.ComponentModel.ICollectionView"/></param>
            <param name="e">The event to handle</param>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.OnCurrentChanging(System.ComponentModel.CurrentChangingEventArgs)">
            <summary>
            Raises current changing events
            </summary>
            <param name="e">The event to raise</param>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.OnCollectionViewCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles collection changed events raised by the <see cref="T:System.ComponentModel.ICollectionView"/>.
            </summary>
            <param name="sender">The <see cref="T:System.ComponentModel.ICollectionView"/></param>
            <param name="e">The event to handle</param>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises collection changed events
            </summary>
            <param name="e">The event to raise</param>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.Remove(System.Object)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <seealso cref="M:System.ComponentModel.IEditableCollectionView.Remove(System.Object)"/>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified position from the collection.
            </summary>
            <param name="index">The position of the item to remove</param>
            <seealso cref="M:System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)"/>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.MoveToFirstPage">
            <summary>
            Sets the first page as the current page.
            </summary>
            <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.ComponentModel.IPagedCollectionView.MoveToFirstPage"/>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.MoveToLastPage">
            <summary>
            Sets the last page as the current page.
            </summary>
            <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.ComponentModel.IPagedCollectionView.MoveToLastPage"/>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.MoveToNextPage">
            <summary>
            Moves to the page after the current page.
            </summary>
            <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.ComponentModel.IPagedCollectionView.MoveToNextPage"/>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.MoveToPage(System.Int32)">
            <summary>
            Sets the first page as the current page.
            </summary>
            <param name="pageIndex">The index of the page to move to</param>
            <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.ComponentModel.IPagedCollectionView.MoveToPage(System.Int32)"/>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.MoveToPreviousPage">
            <summary>
            Moves to the page before the current page.
            </summary>
            <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.ComponentModel.IPagedCollectionView.MoveToPreviousPage"/>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.OnPagedCollectionViewPageChanged(System.Object,System.EventArgs)">
            <summary>
            Handles page changed events raised by the <see cref="T:System.ComponentModel.IPagedCollectionView"/>.
            </summary>
            <param name="sender">The <see cref="T:System.ComponentModel.IPagedCollectionView"/></param>
            <param name="e">The event to handle</param>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.OnPageChanged(System.EventArgs)">
            <summary>
            Raises page changed events
            </summary>
            <param name="e">The event to raise</param>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.OnPagedCollectionViewPageChanging(System.Object,System.ComponentModel.PageChangingEventArgs)">
            <summary>
            Handles page changing events raised by the <see cref="T:System.ComponentModel.IPagedCollectionView"/>.
            </summary>
            <param name="sender">The <see cref="T:System.ComponentModel.IPagedCollectionView"/></param>
            <param name="e">The event to handle</param>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.OnPageChanging(System.ComponentModel.PageChangingEventArgs)">
            <summary>
            Raises page changing events
            </summary>
            <param name="e">The event to raise</param>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.OnEntityCollectionViewPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles property changed events raised by the <see cref="T:System.Windows.Data.EntityCollectionView"/>.
            </summary>
            <param name="sender">The <see cref="T:System.Windows.Data.EntityCollectionView"/></param>
            <param name="e">The event to handle</param>
        </member>
        <member name="M:System.Windows.Controls.Ria.DomainDataSourceView.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises property changed events
            </summary>
            <param name="e">The event to raise</param>
        </member>
        <member name="P:System.Windows.Controls.Ria.DomainDataSourceView.NotifyProperties">
            <summary>
            Gets a list of the public properties supported in <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> events.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Ria.DomainDataSourceView.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The index to get the item at</param>
            <returns>The item at the specified index</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> is thrown if <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="P:System.Windows.Controls.Ria.DomainDataSourceView.CanAdd">
            <summary>
            Gets a value indicating whether items can be added to the collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Ria.DomainDataSourceView.Count">
            <summary>
            Gets the count of the items currently in this view.
            </summary>
            <remarks>
            This count only applies to the current view and does not represent the total
            count of items that may be in a paged view.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.Ria.DomainDataSourceView.PageCount">
            <summary>
            Gets the count of the pages in this view.
            </summary>
            <remarks>
            When <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.PageSize"/> is 0, the <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.PageCount"/> will also be 0.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.Ria.DomainDataSourceView.EntityCollectionView">
            <summary>
            Gets the underlying collection
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Ria.DomainDataSourceView.CollectionView">
            <summary>
            Gets the underlying collection as an <see cref="T:System.ComponentModel.ICollectionView"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Ria.DomainDataSourceView.EditableCollectionView">
            <summary>
            Gets the underlying collection as an <see cref="T:System.ComponentModel.IEditableCollectionView"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Ria.DomainDataSourceView.PagedCollectionView">
            <summary>
            Gets the underlying collection as an <see cref="T:System.ComponentModel.IPagedCollectionView"/>.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Ria.DomainDataSourceView.CurrentChanged">
            <summary>
            Event raised after the current item has been changed.
            </summary>
            <seealso cref="E:System.ComponentModel.ICollectionView.CurrentChanged"/>
        </member>
        <member name="E:System.Windows.Controls.Ria.DomainDataSourceView.CurrentChanging">
            <summary>
            Event raised before changing the current item.
            </summary>
            <seealso cref="E:System.ComponentModel.ICollectionView.CurrentChanging"/>
        </member>
        <member name="P:System.Windows.Controls.Ria.DomainDataSourceView.CurrentItem">
            <summary>
            Gets the current item in the view.
            </summary>
            <remarks>
            Returns <c>null</c> if there is no current item.
            </remarks>
            <seealso cref="P:System.ComponentModel.ICollectionView.CurrentItem"/>
        </member>
        <member name="P:System.Windows.Controls.Ria.DomainDataSourceView.CurrentPosition">
            <summary>
            Gets the ordinal position of the <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.CurrentItem"/> within the view.
            </summary>
            <remarks>
            Returns -1 if there is no current item.
            </remarks>
            <seealso cref="P:System.ComponentModel.ICollectionView.CurrentPosition"/>
        </member>
        <member name="P:System.Windows.Controls.Ria.DomainDataSourceView.IsEmpty">
            <summary>
            Gets a value that indicates whether the resulting view is empty.
            </summary>
            <seealso cref="P:System.ComponentModel.ICollectionView.IsEmpty"/>
        </member>
        <member name="P:System.Windows.Controls.Ria.DomainDataSourceView.CanRemove">
            <summary>
            Gets a value that indicates whether an item can be removed from the collection.
            </summary>
            <seealso cref="P:System.ComponentModel.IEditableCollectionView.CanRemove"/>
        </member>
        <member name="E:System.Windows.Controls.Ria.DomainDataSourceView.PageChanged">
            <summary>
            Event raised after the <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.PageIndex"/> has changed.
            </summary>
            <seealso cref="E:System.ComponentModel.IPagedCollectionView.PageChanged"/>
        </member>
        <member name="E:System.Windows.Controls.Ria.DomainDataSourceView.PageChanging">
            <summary>
            Event raised before changing the <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.PageIndex"/>.
            </summary>
            <seealso cref="E:System.ComponentModel.IPagedCollectionView.PageChanging"/>
        </member>
        <member name="P:System.Windows.Controls.Ria.DomainDataSourceView.CanChangePage">
            <summary>
            Gets a value that indicates whether the <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.PageIndex"/> value can change.
            </summary>
            <seealso cref="P:System.ComponentModel.IPagedCollectionView.CanChangePage"/>
        </member>
        <member name="P:System.Windows.Controls.Ria.DomainDataSourceView.IsPageChanging">
            <summary>
            Gets a value that indicates whether the page index is changing.
            </summary>
            <seealso cref="P:System.ComponentModel.IPagedCollectionView.IsPageChanging"/>
        </member>
        <member name="P:System.Windows.Controls.Ria.DomainDataSourceView.PageIndex">
            <summary>
            Gets the zero-based index of the current page.
            </summary>
            <seealso cref="P:System.ComponentModel.IPagedCollectionView.PageIndex"/>
        </member>
        <member name="P:System.Windows.Controls.Ria.DomainDataSourceView.PageSize">
            <summary>
            Gets or sets the number of items to display on a page.
            </summary>
            <remarks>
            When <see cref="P:System.Windows.Controls.Ria.DomainDataSourceView.PageSize"/> is 0, the view is not paging.
            </remarks>
            <seealso cref="P:System.ComponentModel.IPagedCollectionView.PageSize"/>
        </member>
        <member name="P:System.Windows.Controls.Ria.DomainDataSourceView.TotalItemCount">
            <summary>
            Gets the total number of items in the view before paging is applied,
            or -1 if that total number is unknown.
            </summary>
            <seealso cref="P:System.ComponentModel.IPagedCollectionView.TotalItemCount"/>
        </member>
        <member name="E:System.Windows.Controls.Ria.DomainDataSourceView.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            Event raised 
            </summary>
        </member>
        <member name="T:System.Windows.Data.EntityCollectionView">
            <summary>
            EntityCollectionView view over an IEnumerable.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.uncancelableCurrentChangingEventArgs">
            <summary>
            Since there's nothing in the un-cancelable event args that is mutable,
            just create one instance to be used universally.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._cachedPageIndex">
            <summary>
            Value that we cache for the PageIndex if we are in a DeferRefresh,
            and the user has attempted to move to a different page.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._cachedPageSize">
            <summary>
            Value that we cache for the PageSize if we are in a DeferRefresh,
            and the user has attempted to change the PageSize.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._canChangePage">
            <summary>
            Private accessor for <see cref="P:System.Windows.Data.EntityCollectionView.CanChangePage"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._canLoad">
            <summary>
            Private accessor for <see cref="P:System.Windows.Data.EntityCollectionView.CanLoad"/>, which
            the <see cref="T:System.Windows.Controls.DomainDataSource"/> will keep in sync
            with its own <see cref="P:System.Windows.Controls.DomainDataSource.CanLoad"/> property.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._culture">
            <summary>
            <see cref="T:System.Globalization.CultureInfo"/> used in this <see cref="T:System.Windows.Data.EntityCollectionView"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._currentChangedMonitor">
            <summary>
            Private accessor for the Monitor we use to prevent recursion
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._currentItem">
            <summary>
            Private accessor for the <see cref="P:System.Windows.Data.EntityCollectionView.CurrentItem"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._currentPosition">
            <summary>
            Private accessor for the <see cref="P:System.Windows.Data.EntityCollectionView.CurrentPosition"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._deferLevel">
            <summary>
            The number of requests to defer <see cref="M:System.Windows.Data.EntityCollectionView.Refresh"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._editItem">
            <summary>
            The <see cref="T:System.Windows.Ria.Entity"/> we are currently editing.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._flags">
            <summary>
            Private accessor for the <see cref="T:System.Windows.Data.EntityCollectionView.CollectionViewFlags"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._group">
            <summary>
            Private accessor for the Grouping data.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._internalList">
            <summary>
            Private accessor for the <see cref="P:System.Windows.Data.EntityCollectionView.InternalList"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._isGrouping">
            <summary>
            Keeps track of whether groups have been applied to the
            collection already or not. Note that this can still be set
            to false even though we specify a GroupDescription, as the 
            collection may not have gone through the PrepareGroups function.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._itemCount">
            <summary>
            Represents the known number of items in the source collection
            that verify the potential filter.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._newItem">
            <summary>
            The new <see cref="T:System.Windows.Ria.Entity"/> we are getting ready to add to the collection.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._pageIndex">
            <summary>
            Private accessor for the <see cref="P:System.Windows.Data.EntityCollectionView.PageIndex"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._pageCount">
            <summary>
            The number of pages in the view.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._pagedEntityList">
            <summary>
            Private accessor for the paged entity list behind this view.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._refreshCallback">
            <summary>
            The callback action to invoked when a <see cref="M:System.Windows.Data.EntityCollectionView.Refresh"/> is triggered,
            either directly or through a <see cref="M:System.Windows.Data.EntityCollectionView.DeferRefresh"/> disposal.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._sortDescriptions">
            <summary>
            Private accessor for the <see cref="P:System.Windows.Data.EntityCollectionView.SortDescriptions"/> collection.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._timestamp">
            <summary>
            Timestamp used to see if there was a collection change while 
            processing enumerator changes.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._totalItemCount">
            <summary>
            Private accessor for <see cref="P:System.Windows.Data.EntityCollectionView.TotalItemCount"/>. Represents the total
            number of items in the source collection, or -1 if the total number is unknown.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.#ctor(System.Windows.Controls.IPagedEntityList,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Data.EntityCollectionView"/> class.
            </summary>
            <param name="source">The <see cref="T:System.Windows.Controls.IPagedEntityList"/> to use as the source of this view.</param>
            <param name="refreshCallback">The method to call when a <see cref="M:System.Windows.Data.EntityCollectionView.Refresh"/> is triggered.</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.AddNew">
            <summary>
            Add a new item to the underlying collection.  Returns the new item.
            After calling AddNew and changing the new item as desired, either
            CommitNew or CancelNew should be called to complete the transaction.
            </summary>
            <returns>The new item we are adding</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.Add(System.Object)">
            <summary>
            Adds a new <see cref="T:System.Windows.Ria.Entity"/> to the underlying collection.
            </summary>
            <param name="item">The <see cref="T:System.Windows.Ria.Entity"/> to add.</param>
            <exception cref="T:System.InvalidCastException">When the <paramref name="item"/> is not an <see cref="T:System.Windows.Ria.Entity"/>.</exception>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.CancelEdit">
            <summary>
            Complete the transaction started by <seealso cref="M:System.Windows.Data.EntityCollectionView.EditItem(System.Object)"/>.
            The pending changes (if any) to the item are discarded.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.CancelNew">
            <summary>
            Complete the transaction started by AddNew. The new
            item is removed from the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.CommitEdit">
            <summary>
            Complete the transaction started by <seealso cref="M:System.Windows.Data.EntityCollectionView.EditItem(System.Object)"/>.
            The pending changes (if any) to the item are committed.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.CommitNew">
            <summary>
            Complete the transaction started by AddNew. We follow the WPF
            convention in that the view's sort, filter, and paging
            specifications (if any) are applied to the new item.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.Contains(System.Object)">
            <summary>
            Return true if the item belongs to this view.  No assumptions are
            made about the item. This method will behave similarly to IList.Contains().
            </summary>
            <param name="item">The item we are checking to see whether it is within the collection</param>
            <returns>Boolean value of whether or not the collection contains the item</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.DeferRefresh">
            <summary>
            Enter a Defer Cycle.
            Defer cycles are used to coalesce changes to the ICollectionView.
            </summary>
            <returns>IDisposable used to notify that we no longer need to defer, when we dispose</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.EditItem(System.Object)">
            <summary>
            Begins an editing transaction on the given item.  The transaction is
            completed by calling either CommitEdit or CancelEdit.  Any changes made 
            to the item during the transaction are considered "pending", provided 
            that the view supports the notion of "pending changes" for the given item.
            </summary>
            <remarks>
            While it's possible that the underlying <see cref="T:System.Windows.Ria.EntitySet"/> doesn't
            support editing, the <see cref="T:System.ComponentModel.IEditableCollectionView"/> interface does
            not have a mechanism for specifying that CanEdit is <c>false</c>.  Throwing
            an exception if <see cref="P:System.Windows.Ria.EntitySet.CanEdit"/> is false
            would lead to a crash when attempting to edit the item, without being able
            to check for the condition beforehand.  By allowing this operation to succeed,
            the caller when then get an exception only if changes are made on the entity's
            properties, and that can surface as a validation error in the UI.
            </remarks>
            <param name="item">Item we want to edit</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.GetEnumerator">
            <summary> 
            Implementation of <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>.
            </summary>
            <returns><see cref="T:System.Collections.IEnumerator"/> for the collection.</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.GetItemAt(System.Int32)">
            <summary>
            Retrieve item at the given zero-based index in this EntityCollectionView, after the source collection
            is filtered, sorted, and paged.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> is thrown if <paramref name="index"/> is out of range.
            </exception>
            <param name="index">Index of the item we want to retrieve.</param>
            <returns><see cref="T:System.Windows.Ria.Entity"/> at specified index.</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.IndexOf(System.Object)">
            <summary> 
            Return the index where the given <see cref="T:System.Windows.Ria.Entity"/> appears, or -1 if doesn't appear.
            </summary>
            <param name="item"><see cref="T:System.Windows.Ria.Entity"/> we are searching for.</param>
            <returns>Index of specified item.</returns>
            <exception cref="T:System.InvalidCastException">When the <paramref name="item"/> is not an <see cref="T:System.Windows.Ria.Entity"/>.</exception>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.MoveCurrentTo(System.Object)">
            <summary> 
            Move to the given item. 
            </summary>
            <param name="item">Item we want to move the currency to</param>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.MoveCurrentToFirst">
            <summary> 
            Move to the first item. 
            </summary>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.MoveCurrentToLast">
            <summary> 
            Move to the last item. 
            </summary>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.MoveCurrentToNext">
            <summary> 
            Move to the next item. 
            </summary>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.MoveCurrentToPosition(System.Int32)">
            <summary>
            Move CurrentItem to this index
            </summary>
            <param name="position">Position we want to move the currency to</param>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.MoveCurrentToPrevious">
            <summary> 
            Move to the previous item. 
            </summary>
            <returns>True if the resulting CurrentItem is an item within the view; otherwise False</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.MoveToFirstPage">
            <summary>
            Moves to the first page.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.MoveToLastPage">
            <summary>
            Moves to the last page.
            The move is only attempted when TotalItemCount is known.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.MoveToNextPage">
            <summary>
            Moves to the page after the current page we are on.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.MoveToPage(System.Int32)">
            <summary>
            Requests a page move to page <paramref name="pageIndex"/>.
            </summary>
            <param name="pageIndex">Index of the target page</param>
            <returns>Whether or not the move was successfully initiated.</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.MoveToPreviousPage">
            <summary>
            Moves to the page before the current page we are on.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.Refresh">
            <summary>
            Re-create the view, using any SortDescriptions and/or Filters.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.Remove(System.Object)">
            <summary>
            Remove the given item from the underlying collection. It
            needs to be in the current filtered, sorted, and paged view
            to call this.
            </summary>
            <param name="item">Item we want to remove</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.RemoveAt(System.Int32)">
            <summary>
            Remove the item at the given index from the underlying collection.
            The index is interpreted with respect to the view (filtered, sorted,
            and paged list).
            </summary>
            <param name="index">Index of the item we want to remove</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.InvokePath(System.Object,System.String,System.Type)">
            <summary>
            Helper for SortList to handle nested properties (e.g. Address.Street)
            </summary>
            <param name="item">parent object</param>
            <param name="propertyPath">property names path</param>
            <param name="propertyType">property type that we want to check for</param>
            <returns>child object</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.AdjustCurrencyForAdd(System.Windows.Ria.Entity,System.Int32)">
            <summary>
            Fix up <see cref="P:System.Windows.Data.EntityCollectionView.CurrentPosition"/> and <see cref="P:System.Windows.Data.EntityCollectionView.CurrentItem"/> after a collection change.
            </summary>
            <param name="newCurrentItem"><see cref="T:System.Windows.Ria.Entity"/> that we want to set currency to.</param>
            <param name="index">Index of item involved in the collection change.</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.AdjustCurrencyForRemove(System.Int32)">
            <summary>
            Fix up CurrentPosition and CurrentItem after a collection change
            The index can be -1 if the item was removed from a previous page
            </summary>
            <param name="index">Index of item involved in the collection change</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.CalculateAllCalculatedProperties">
            <summary>
            Calculates all of the properties that are calculated through CalculateX methods.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.CalculateCanAdd">
            <summary>
            Calculates <see cref="P:System.Windows.Data.EntityCollectionView.CanAddNew"/> from the <see cref="P:System.Windows.Data.EntityCollectionView.SourceEntitySet"/> property.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.CalculateCanAddNew">
            <summary>
            Calculates <see cref="P:System.Windows.Data.EntityCollectionView.CanAddNew"/> from the <see cref="P:System.Windows.Data.EntityCollectionView.CanAdd"/> and <see cref="P:System.Windows.Data.EntityCollectionView.IsEditingItem"/> properties.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.CalculateCanChangePage">
            <summary>
            Calculates <see cref="P:System.Windows.Data.EntityCollectionView.CanChangePage"/> from the <see cref="P:System.Windows.Data.EntityCollectionView.IsAddingNew"/> and <see cref="P:System.Windows.Data.EntityCollectionView.IsEditingItem"/> properties
            as well as the <see cref="P:System.Windows.Data.EntityCollectionView.CanLoad"/> property.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.CalculateCanRemove">
            <summary>
            Calculates <see cref="P:System.Windows.Data.EntityCollectionView.CanRemove"/> from the <see cref="P:System.Windows.Data.EntityCollectionView.IsAddingNew"/>, <see cref="P:System.Windows.Data.EntityCollectionView.IsEditingItem"/>, and <see cref="P:System.Windows.Data.EntityCollectionView.SourceEntitySet"/> properties.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.CalculateIsAddingNew">
            <summary>
            Calculates <see cref="P:System.Windows.Data.EntityCollectionView.IsAddingNew"/> from the <see cref="P:System.Windows.Data.EntityCollectionView.CurrentAddItem"/> property.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.CalculateIsEditingItem">
            <summary>
            Calculates <see cref="P:System.Windows.Data.EntityCollectionView.IsEditingItem"/> from the <see cref="P:System.Windows.Data.EntityCollectionView.CurrentEditItem"/> property.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.CalculatePageCount">
            <summary>
            Calculates <see cref="P:System.Windows.Data.EntityCollectionView.PageCount"/> from the <see cref="P:System.Windows.Data.EntityCollectionView.PageSize"/> and <see cref="P:System.Windows.Data.EntityCollectionView.TotalItemCount"/> properties.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.CheckFlag(System.Windows.Data.EntityCollectionView.CollectionViewFlags)">
            <summary>
            Returns true if specified flag in flags is set.
            </summary>
            <param name="flags">Flag we are checking for</param>
            <returns>Whether the specified flag is set</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.CompletePageMove(System.Int32)">
            <summary>
            Called either when the page is local or when the paged source collection
            notified this EntityCollectionView of a page move completion.
            </summary>
            <param name="pageIndex">Final page index</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.CopySourceToInternalList">
            <summary>
            Copy all items from the source collection to the internal list for processing.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.EndAddNew(System.Boolean)">
            <summary>
            Common functionality used by <see cref="M:System.Windows.Data.EntityCollectionView.CommitNew"/>, <see cref="M:System.Windows.Data.EntityCollectionView.CancelNew"/>,
            and when the new item is removed by <see cref="M:System.Windows.Data.EntityCollectionView.Remove(System.Object)"/> or <see cref="M:System.Windows.Data.EntityCollectionView.Refresh"/>.
            </summary>
            <param name="cancel">Whether we canceled the add</param>
            <returns>The new item we ended adding</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.EndDefer">
            <summary>
            Subtracts from the deferLevel counter and calls Refresh() if there are no other defers
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.InsertGroup(System.Object,System.Int32)">
            <summary>
            Insert a new group for the specified <paramref name="item"/>,
            with the item being added at the specified <paramref name="index"/>.
            </summary>
            <param name="item">The item being inserted into this new group.</param>
            <param name="addIndex">The index at which this item is being inserted.</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.InternalIndexOf(System.Windows.Ria.Entity)">
            <summary>
            Return index of item in the internal list.
            </summary>
            <param name="item">The <see cref="T:System.Windows.Ria.Entity"/> we are checking</param>
            <returns>Integer value on where in the InternalList the object is located</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.InternalItemAt(System.Int32)">
            <summary>
            Return item at the given index in the internal list.
            </summary>
            <param name="index">The index we are checking</param>
            <returns>The <see cref="T:System.Windows.Ria.Entity"/> at the specified index</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.OkToChangeCurrent">
            <summary>
            Ask listeners (via ICollectionView.CurrentChanging event) if it's OK to change currency
            </summary>
            <returns>False if a listener cancels the change, True otherwise</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Notify listeners that this View has changed
            </summary>
            <remarks>
                CollectionViews (and sub-classes) should take their filter/sort/grouping/paging
                into account before calling this method to forward CollectionChanged events.
            </remarks>
            <param name="args">
                The NotifyCollectionChangedEventArgs to be passed to the EventHandler
            </param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.OnCurrentChanged">
            <summary>
            Raises the CurrentChanged event
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.OnCurrentChanging">
            <summary>
            Raise a CurrentChanging event that is not cancelable.
            This is called by CollectionChanges (Add, Remove, and Refresh) that 
            affect the CurrentItem.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This CurrentChanging event cannot be canceled.
            </exception>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.OnCurrentChanging(System.ComponentModel.CurrentChangingEventArgs)">
            <summary>
            Raises the CurrentChanging event
            </summary>
            <param name="args">
                CancelEventArgs used by the consumer of the event.  args.Cancel will
                be true after this call if the CurrentItem should not be changed for
                any reason.
            </param>
            <exception cref="T:System.InvalidOperationException">
                This CurrentChanging event cannot be canceled.
            </exception>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.OnGroupByChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            GroupBy changed handler
            </summary>
            <param name="sender">CollectionViewGroup whose GroupBy has changed</param>
            <param name="e">Arguments for the NotifyCollectionChanged event</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.OnGroupDescriptionChanged(System.Object,System.EventArgs)">
            <summary>
            GroupDescription changed handler
            </summary>
            <param name="sender">CollectionViewGroup whose GroupDescription has changed</param>
            <param name="e">Arguments for the GroupDescriptionChanged event</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises a PropertyChanged event.
            </summary>
            <param name="e">PropertyChangedEventArgs for this change</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.OnPropertyChanged(System.String)">
            <summary>
            Helper to raise a PropertyChanged event.
            </summary>
            <param name="propertyName">Property name for the property that changed</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.PrepareGroups">
            <summary>
            Use the GroupDescriptions to place items into their respective groups.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.PrepareLocalArray(System.Collections.Generic.IEnumerable{System.Windows.Ria.Entity})">
            <summary>
            Create and sort the local index array.
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.IEnumerable"/> containing the items.</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.ProcessAddEvent(System.Windows.Ria.Entity,System.Int32)">
            <summary>
            Process an Add operation from an <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> event handler.
            </summary>
            <param name="addedItem"><see cref="T:System.Windows.Ria.Entity"/> added to the source collection.</param>
            <param name="addIndex">Index item was added into.</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.ProcessCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Process <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> events from
            the source collection.
            </summary>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> to process.</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.ProcessRemoveEvent(System.Windows.Ria.Entity)">
            <summary>
            Process a Remove operation from an <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> event handler.
            </summary>
            <param name="removedItem"><see cref="T:System.Windows.Ria.Entity"/> removed from the source collection.</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.ProcessInsertToCollection(System.Windows.Ria.Entity,System.Int32@)">
            <summary>
            Handles adding an <see cref="T:System.Windows.Ria.Entity"/> into the collection, and applying sorting, filtering, grouping, paging.
            </summary>
            <param name="item"><see cref="T:System.Windows.Ria.Entity"/> to insert in the collection.</param>
            <param name="index">Index to insert item into, updated if the position is altered due to sorting and grouping.</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.RaiseCurrencyChanges(System.Boolean,System.Object,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Raises Currency Change events
            </summary>
            <param name="fireChangedEvent">Whether to fire the CurrentChanged event even if the params have not changed</param>
            <param name="oldCurrentItem">CurrentItem before processing changes</param>
            <param name="oldCurrentPosition">CurrentPosition before processing changes</param>
            <param name="oldIsCurrentBeforeFirst">IsCurrentBeforeFirst before processing changes</param>
            <param name="oldIsCurrentAfterLast">IsCurrentAfterLast before processing changes</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.RaisePageChanged">
            <summary>
            Raises the PageChanged event
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.RaisePageChanging(System.Int32)">
            <summary>
            Raises the PageChanging event
            </summary>
            <param name="newPageIndex">Index of the requested page</param>
            <returns>True if the event is cancelled (e.Cancel was set to True), False otherwise</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.RefreshOrDefer">
            <summary>
            Refresh, or mark that refresh is needed when defer cycle completes.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.RefreshView">
            <summary>
            Refresh the view, applying sorts and groups, and updating currency information.
            <para>This will not call the refresh callback.</para>
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.ResetCurrencyValues(System.Windows.Ria.Entity,System.Boolean,System.Boolean)">
            <summary>
            Set currency back to the previous value it had if possible. If the item is no longer in view
            then either use the first item in the view, or if the list is empty, use <c>null</c>.
            </summary>
            <param name="oldCurrentItem"><see cref="P:System.Windows.Data.EntityCollectionView.CurrentItem"/> before processing changes.</param>
            <param name="oldIsCurrentBeforeFirst"><see cref="P:System.Windows.Data.EntityCollectionView.IsCurrentBeforeFirst"/> before processing changes.</param>
            <param name="oldIsCurrentAfterLast"><see cref="P:System.Windows.Data.EntityCollectionView.IsCurrentAfterLast"/> before processing changes.</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SetCurrent(System.Windows.Ria.Entity,System.Int32)">
            <summary>
            Set <see cref="P:System.Windows.Data.EntityCollectionView.CurrentItem"/> and <see cref="P:System.Windows.Data.EntityCollectionView.CurrentPosition"/>.
            </summary>
            <remarks>
            Collection Views (and sub-classes) should use this method to update
            the Current values.
            </remarks>
            <param name="newItem">New <see cref="P:System.Windows.Data.EntityCollectionView.CurrentItem"/>.</param>
            <param name="newPosition">New <see cref="P:System.Windows.Data.EntityCollectionView.CurrentPosition"/>.</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SetCurrent(System.Windows.Ria.Entity,System.Int32,System.Int32)">
            <summary>
            Set <see cref="P:System.Windows.Data.EntityCollectionView.CurrentItem"/> and <see cref="P:System.Windows.Data.EntityCollectionView.CurrentPosition"/>.
            </summary>
            <remarks>
            This method can be called from a constructor - it does not call any virtuals.
            <para>
            The <paramref name="count"/> parameter is substitute for the real Count, used only
            when <paramref name="newItem"/>is <c>null</c>.  In that case, this method sets
            <see cref="P:System.Windows.Data.EntityCollectionView.IsCurrentAfterLast"/> to <c>true</c> if and only if
            <paramref name="newPosition"/> &gt;= <paramref name="count"/>.  This distinguishes
            between a <c>null</c> belonging to the view and the dummy <c>null</c> when
            <see cref="P:System.Windows.Data.EntityCollectionView.CurrentPosition"/> is past the end.
            </para>
            </remarks>
            <param name="newItem">New <see cref="P:System.Windows.Data.EntityCollectionView.CurrentItem"/>.</param>
            <param name="newPosition">New <see cref="P:System.Windows.Data.EntityCollectionView.CurrentPosition"/>.</param>
            <param name="count">Numbers of items in the collection</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.RequestPageMove(System.Int32)">
            <summary>
            Requests a page move to the potential paged source collection.
            Completes the move if that paged source does not initiate a move
            (because the data is already local) or if the source is not paged.
            </summary>
            <param name="pageIndex">Requested page index</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SetCurrentToPosition(System.Int32)">
            <summary>
            Just move it. No argument check, no events, just move current to position.
            </summary>
            <param name="position">Position to move the current item to</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SetFlag(System.Windows.Data.EntityCollectionView.CollectionViewFlags,System.Boolean)">
            <summary>
            Sets the specified Flag(s)
            </summary>
            <param name="flags">Flags we want to set</param>
            <param name="value">Value we want to set these flags to</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SetSortDescriptions(System.ComponentModel.SortDescriptionCollection)">
            <summary>
            Set new SortDescription collection; re-hook collection change notification handler
            </summary>
            <param name="descriptions">SortDescriptionCollection to set the property value to</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SortDescriptionsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            SortDescription was added/removed, refresh EntityCollectionView
            </summary>
            <param name="sender">Sender that triggered this handler</param>
            <param name="e">NotifyCollectionChangedEventArgs for this change</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SourceCollection_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when the source collection raises its PropertyChanged event.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> used in the event.</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.UpdateItemPosition(System.Windows.Ria.Entity)">
            <summary>
            Update an item's position based on sorting and grouping.  If the item was
            the <see cref="P:System.Windows.Data.EntityCollectionView.CurrentItem"/> then maintain the currency on that item in
            its potentially new position.
            </summary>
            <param name="item">The <see cref="T:System.Windows.Ria.Entity"/> to update position for.</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.VerifyRefreshNotDeferred">
            <summary>
            Helper to validate that we are not in the middle of a DeferRefresh
            and throw if that is the case.
            </summary>
        </member>
        <member name="E:System.Windows.Data.EntityCollectionView.CollectionChanged">
            <summary>
            Raise this event when the (filtered) view changes
            </summary>
        </member>
        <member name="E:System.Windows.Data.EntityCollectionView.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
            <summary>
            CollectionChanged event (per INotifyCollectionChanged).
            </summary>
        </member>
        <member name="E:System.Windows.Data.EntityCollectionView.CurrentChanged">
            <summary>
            Raised when the CurrentItem property changed
            </summary>
        </member>
        <member name="E:System.Windows.Data.EntityCollectionView.CurrentChanging">
            <summary>
            Raised when the CurrentItem property is changing
            </summary>
        </member>
        <member name="E:System.Windows.Data.EntityCollectionView.PageChanged">
            <summary>
            Raised when a page index change completed
            </summary>
        </member>
        <member name="E:System.Windows.Data.EntityCollectionView.PageChanging">
            <summary>
            Raised when a page index change is requested
            </summary>
        </member>
        <member name="E:System.Windows.Data.EntityCollectionView.PropertyChanged">
            <summary>
            PropertyChanged event.
            </summary>
        </member>
        <member name="E:System.Windows.Data.EntityCollectionView.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            PropertyChanged event (per INotifyPropertyChanged)
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.CanAdd">
            <summary>
            Gets a value indicating whether a new item can be added to the view using
            <see cref="M:System.Windows.Data.EntityCollectionView.Add(System.Object)"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.CanAddNew">
            <summary>
            Gets a value indicating whether the view supports AddNew and that
            we can presently add a new item.
            </summary>
            <value>
            <c>true</c> if we are not presently editing an item and the source EntitySet
            supports Add.
            </value>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.CanCancelEdit">
            <summary>
            Gets a value indicating whether the view supports the notion of "pending changes" 
            on the current edit item.  Since we know we're always working against an Entity,
            we know that it supports IEditableObject, so we can always return true.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.CanChangePage">
            <summary>
            Gets a value indicating whether the <see cref="P:System.Windows.Data.EntityCollectionView.PageIndex"/> value is allowed to change.
            </summary>
            <remarks>
            This is <c>false</c> when <see cref="P:System.Windows.Data.EntityCollectionView.CanLoad"/> is false or when <see cref="P:System.Windows.Data.EntityCollectionView.PageSize"/> is 0.
            </remarks>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.CanFilter">
            <summary>
            Gets a value indicating whether we support filtering with this <see cref="T:System.ComponentModel.ICollectionView"/>.
            </summary>
            <remarks>
            This will always return <c>false</c> because EntityCollectionView doesn't support
            predicate filters.  <see cref="T:System.Windows.Data.FilterDescriptor"/>s are used instead.
            </remarks>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.CanGroup">
            <summary>
            Gets a value indicating whether this view supports grouping.
            </summary>
            <remarks>
            This property value doesn't respect <see cref="P:System.Windows.Data.EntityCollectionView.CanLoad"/> because
            <see cref="P:System.ComponentModel.ICollectionView.CanGroup"/> must be true at the time a
            <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/> event is fired
            in order for existing groups to be respected.
            </remarks>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.CanRemove">
            <summary>
            Gets a value indicating whether the view supports Remove and RemoveAt.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.CanSort">
            <summary>
            Gets a value indicating whether changes to the <see cref="P:System.Windows.Data.EntityCollectionView.SortDescriptions"/> are presently
            allowed with this <see cref="T:System.ComponentModel.ICollectionView"/>.
            </summary>
            <remarks>
            This will return <c>true</c> whenever the underlying <see cref="T:System.Windows.Controls.DomainDataSource"/>'s
            <see cref="P:System.Windows.Controls.DomainDataSource.CanLoad"/> property is <c>true</c>.
            </remarks>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.Count">
            <summary>
            Gets the number of records in the view after 
            filtering, sorting, and paging.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.Culture">
            <summary>
            Gets or sets Culture to use during sorting.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.CurrentAddItem">
            <summary>
            Gets the new <see cref="T:System.Windows.Ria.Entity"/> when an <see cref="M:System.Windows.Data.EntityCollectionView.AddNew"/>
            transaction is in progress.  Otherwise it returns <c>null</c>.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.CurrentEditItem">
            <summary>
            Gets the affected <see cref="T:System.Windows.Ria.Entity"/> when an <see cref="M:System.Windows.Data.EntityCollectionView.EditItem(System.Object)"/>
            transaction is in progress.  Otherwise it returns <c>null</c>.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.CurrentItem">
            <summary> 
            Gets the <see cref="T:System.Windows.Ria.Entity"/> currently selected in the view.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.CurrentPosition">
            <summary>
            Gets the ordinal position of the <see cref="P:System.Windows.Data.EntityCollectionView.CurrentItem"/> within the 
            (optionally sorted and filtered) view.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.Filter">
            <summary>
            Gets or sets the Filter, which is a callback set by the consumer of the ICollectionView
            and used by the implementation of the ICollectionView to determine if an
            item is suitable for inclusion in the view.
            </summary>
            <remarks>
            This implementation does not support filtering. Instead, filters can be set using
            <see cref="P:System.Windows.Controls.DomainDataSource.FilterDescriptors"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            Simpler implementations do not support filtering and will throw a NotSupportedException.
            Use <seealso cref="P:System.Windows.Data.EntityCollectionView.CanFilter"/> property to test if filtering is supported before
            assigning a non-null value.
            </exception>
            <seealso cref="P:System.Windows.Controls.DomainDataSource.FilterDescriptors"/>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.GroupDescriptions">
            <summary>
            Gets the description of grouping, indexed by level.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.Groups">
            <summary>
            Gets the top-level groups, constructed according to the descriptions
            given in GroupDescriptions.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.IsAddingNew">
            <summary>
            Gets a value indicating whether an "AddNew" transaction is in progress.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.IsCurrentAfterLast">
            <summary> 
            Gets a value indicating whether currency is beyond the end (End-Of-File). 
            </summary>
            <returns>Whether IsCurrentAfterLast</returns>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.IsCurrentBeforeFirst">
            <summary> 
            Gets a value indicating whether currency is before the beginning (Beginning-Of-File). 
            </summary>
            <returns>Whether IsCurrentBeforeFirst</returns>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.IsEditingItem">
            <summary>
            Gets a value indicating whether an EditItem transaction is in progress.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.IsEmpty">
            <summary>
            Gets a value indicating whether the resulting (filtered) view is empty.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.IsPageChanging">
            <summary>
            Gets a value indicating whether a page index change is in process or not.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.ItemCount">
            <summary>
            Gets a count of items known to be in the source collection after filtering
            is applied, but before paging.
            </summary>
            <remarks>
            Value is based on the number of items that have been loaded and what pages
            those items were loaded into.  If <see cref="P:System.Windows.Data.EntityCollectionView.PageIndex"/> of 0 or 1 were never
            loaded, but <see cref="P:System.Windows.Data.EntityCollectionView.PageIndex"/> of 2 was loaded successfully, then
            we can assume that page indexes of 0 and 1 exist and are full.
            </remarks>
            <example>
            While on <see cref="P:System.Windows.Data.EntityCollectionView.PageIndex"/> of 2 (the 3rd page), with <see cref="P:System.Windows.Data.EntityCollectionView.PageSize"/>
            of 5, and the page having 5 items, the return value will be at least 15.
            <para>
            If the <see cref="P:System.Windows.Data.EntityCollectionView.PageIndex"/> has been greater than 2 previously, we know that items
            exist beyond the 3rd page, so the return value could be greater than 15.
            </para>
            </example>
            <seealso cref="P:System.Windows.Data.EntityCollectionView.TotalItemCount"/>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.NewItemPlaceholderPosition">
            <summary>
            Gets or sets whether to include a placeholder for a new item, and if so,
            where to put it. Only the value NewItemPlaceholderPosition.None is supported.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.PageIndex">
            <summary>
            Gets the current page we are on. (zero based)
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.PageSize">
            <summary>
            Gets or sets the number of items to display on a page. If the
            PageSize = 0, then we are not paging, and will display all items
            in the collection. Otherwise, we will have separate pages for 
            the items to display.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.SortDescriptions">
            <summary>
            Gets the Sort criteria to sort items in collection.
            </summary>
            <remarks>
            <p>
            Clear a sort criteria by assigning SortDescription.Empty to this property.
            One or more sort criteria in form of <seealso cref="T:System.ComponentModel.SortDescription"/>
            can be used, each specifying a property and direction to sort by.
            </p>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            Simpler implementations do not support sorting and will throw a NotSupportedException.
            Use <seealso cref="P:System.Windows.Data.EntityCollectionView.CanSort"/> property to test if sorting is supported before adding
            to SortDescriptions.
            </exception>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.SourceCollection">
            <summary>
            Gets the source collection we are using for our view as an <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.TotalItemCount">
            <summary>
            Gets the total number of items in the view before paging is applied,
            or -1 if that total number is unknown.
            When the SourceCollection implements IPagedCollection, the provider of the source collection is in
            charge of setting this value. In those cases, the value can be temporary only. That is
            the provider can set TotalItemCount to a positive number or -1 based on its latest information, but 
            that may no longer reflect the reality at a later time, given the fact that the source
            may not be of a fixed length.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.CanLoad">
            <summary>
            Gets or sets a value indicating whether or not loads can currently be
            performed by the underlying <see cref="T:System.Windows.Controls.DomainDataSource"/>.
            </summary>
            <remarks>
            This property is replicated on the <see cref="T:System.Windows.Data.EntityCollectionView"/> because
            we don't have a mechanism for listening to change notifications on the underlying
            <see cref="T:System.Windows.Controls.DomainDataSource"/>.<see cref="P:System.Windows.Controls.DomainDataSource.CanLoad"/> property.
            Therefore, we expose a property on the <see cref="T:System.Windows.Data.EntityCollectionView"/>
            so that the <see cref="T:System.Windows.Controls.DomainDataSource"/> can update it directly.
            </remarks>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.IsRefreshDeferred">
            <summary>
            Gets a value indicating whether there
            is still an outstanding DeferRefresh in
            use.  If at all possible, derived classes
            should not call Refresh if IsRefreshDeferred
            is true.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.IsRefreshing">
            <summary>
            Whether or not a <see cref="M:System.Windows.Data.EntityCollectionView.Refresh"/> is being queued up
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.InternalCount">
            <summary>
            Gets the private count without taking paging or
            placeholders into account
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.InternalList">
            <summary>
            Gets the InternalList
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.IsCurrentInSync">
            <summary>
            Gets a value indicating whether CurrentItem and CurrentPosition are
            up-to-date with the state and content of the collection.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.IsCurrentInView">
            <summary>
            Gets a value indicating whether the current item is in the view
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.IsGrouping">
            <summary>
            Gets a value indicating whether or not we have grouping 
            taking place in this collection.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.PageCount">
            <summary>
            Gets the count of the pages in this view.
            </summary>
            <remarks>
            When <see cref="P:System.Windows.Data.EntityCollectionView.PageSize"/> is 0, the <see cref="P:System.Windows.Data.EntityCollectionView.PageCount"/> will also be 0.
            </remarks>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.SourceEntitySet">
            <summary>
            Gets the <see cref="T:System.Windows.Ria.EntitySet"/> that serves as the backing store for our
            <see cref="T:System.Windows.Controls.IPagedEntityList"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.SourceList">
            <summary>
            Gets the source collection
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.UsesLocalArray">
            <summary>
            Gets a value indicating whether a private copy of the data 
            is needed for sorting, filtering, and paging. We want any deriving 
            classes to also be able to access this value to see whether or not 
            to use the default source collection, or the internal list.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.Item(System.Int32)">
            <summary>
            Return the item at the specified index
            </summary>
            <param name="index">Index of the item we want to retrieve</param>
            <returns>The item at the specified index</returns>
        </member>
        <member name="T:System.Windows.Data.EntityCollectionView.CollectionViewFlags">
            <summary>
            Enum for CollectionViewFlags
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.CollectionViewFlags.ShouldProcessCollectionChanged">
            <summary>
            Whether we should process the collection changed event
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.CollectionViewFlags.IsCurrentBeforeFirst">
            <summary>
            Whether the current item is before the first
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.CollectionViewFlags.IsCurrentAfterLast">
            <summary>
            Whether the current item is after the last
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.CollectionViewFlags.CachedIsEmpty">
            <summary>
            Whether we cache the IsEmpty value
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.CollectionViewFlags.IsPageChanging">
            <summary>
            Indicates whether a page index change is in process or not
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.CollectionViewFlags.IsMoveToPageDeferred">
            <summary>
            Whether we need to move to another page after EndDefer
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.CollectionViewFlags.IsUpdatePageSizeDeferred">
            <summary>
            Whether we need to update the PageSize after EndDefer
            </summary>
        </member>
        <member name="T:System.Windows.Data.EntityCollectionView.DeferHelper">
            <summary>
            Used to keep track of Defer calls on the EntityCollectionView, which
            will prevent the user from calling Refresh() on the view. In order
            to allow refreshes again, the user will have to call IDisposable.Dispose,
            to end the Defer operation.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.DeferHelper.collectionView">
            <summary>
            Private reference to the CollectionView that created this DeferHelper
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.DeferHelper.#ctor(System.Windows.Data.EntityCollectionView)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Data.EntityCollectionView.DeferHelper"/> class
            </summary>
            <param name="collectionView">CollectionView that created this DeferHelper</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.DeferHelper.Dispose">
            <summary>
            Cleanup method called when done using this class
            </summary>
        </member>
        <member name="T:System.Windows.Data.EntityCollectionView.SimpleMonitor">
            <summary>
            A simple monitor class to help prevent re-entrant calls
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.SimpleMonitor.entered">
            <summary>
            Whether the monitor is entered
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SimpleMonitor.Enter">
            <summary>
            Sets a value indicating that we have been entered
            </summary>
            <returns>Boolean value indicating whether we were already entered</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SimpleMonitor.Dispose">
            <summary>
            Cleanup method called when done using this class
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.SimpleMonitor.Busy">
            <summary>
            Gets a value indicating whether we have been entered or not
            </summary>
        </member>
        <member name="T:System.Windows.Data.EntityCollectionView.SortFieldComparer">
            <summary>
            IComparer class to sort by class property value (using reflection).
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SortFieldComparer.#ctor(System.Collections.ObjectModel.ObservableCollection{System.ComponentModel.GroupDescription},System.ComponentModel.SortDescriptionCollection)">
            <summary>
            Create a comparer, using the <paramref name="groupDescriptions"/> and/or
            <paramref name="sortDescriptions"/> and the <see cref="T:System.Type"/> of each property.
            Tries to find a reflection <see cref="T:System.Reflection.PropertyInfo"/> for each property name.
            </summary>
            <remarks>
            Groups are used first, and then sorts.  This keeps the groups together.
            </remarks>
            <param name="groupDescriptions">List of group descriptions to respect
            (ascending, unless there is a descending sort also applied).</param>
            <param name="sortFields">List of sort descriptions to respect (ascending or descending).</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SortFieldComparer.Compare(System.Object,System.Object)">
            <summary>
            Compare the two items using the groups and sorts provided.
            </summary>
            <remarks>
            Uses reflection to find the <see cref="T:System.Type"/> of each field being sorted
            (groups first, then sorts), and assigns a comparer for each field.  Each
            comparer is then used to compare the property from both. 
            </remarks>
            <param name="x">First item to compare.</param>
            <param name="y">Second item to compare.</param>
            <returns>Negative number if <paramref name="x"/> should be grouped/sorted
            before than <paramref name="y"/>; zero if <paramref name="x"/> and <paramref name="y"/>
            have matching fields for the groups and sorts; and a positive number if
            <paramref name="x"/> should be grouped/sorted after <paramref name="y"/>.</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SortFieldComparer.FindInsertIndex(System.Object,System.Collections.IList)">
            <summary>
            Steps through the given list using the comparer to find where
            to insert the specified item to maintain sorted order
            </summary>
            <param name="x">Item to insert into the list</param>
            <param name="list">List where we want to insert the item</param>
            <returns>Index where we should insert into</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SortFieldComparer.CreatePropertyInfo(System.Collections.ObjectModel.ObservableCollection{System.ComponentModel.GroupDescription},System.ComponentModel.SortDescriptionCollection)">
            <summary>
            Builds an array of <see cref="T:System.Windows.Data.EntityCollectionView.SortFieldComparer.SortPropertyInfo"/> objects by combining the groups and the sorts into
            a single list of sorts.  This will ensure that the groups remain contiguous and that the items
            within the groups are sorted within the groups.
            </summary>
            <remarks>
            Fields that are grouped will be sorted in ascending order by default, but if there is also a sort
            specified for that field and it is sorted in descending order, then the group will respect the
            descending order as well.
            </remarks>
            <param name="groupFields">The <see cref="T:System.ComponentModel.GroupDescription"/> list for the fields being grouped.  Must not be null.</param>
            <param name="sortFields">The <see cref="T:System.ComponentModel.SortDescriptionCollection"/> for the fields being sorted.  Must not be null.</param>
            <returns>
            A single array of <see cref="T:System.Windows.Data.EntityCollectionView.SortFieldComparer.SortPropertyInfo"/> that will apply the grouping and then sorting in the
            necessary order to have items grouped and then sorted within the groups.
            </returns>
        </member>
        <member name="T:System.ComponentModel.EntityCollectionViewResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.CancelEditNotSupported">
            <summary>
              Looks up a localized string similar to CancelEdit is not supported for the current edit item..
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.CannotFilter">
            <summary>
              Looks up a localized string similar to The Filter property is not supported by this implementation. Use DomainDataSource.FilterDescriptors to filter the data set instead..
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.ChangingPageSizeNotAllowedDuringAddOrEdit">
            <summary>
              Looks up a localized string similar to Changing the PageSize is not allowed during an AddNew or EditItem transaction..
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.EnumeratorVersionChanged">
            <summary>
              Looks up a localized string similar to Collection was modified; enumeration operation may not execute..
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.IndexOutOfRange">
            <summary>
              Looks up a localized string similar to Index was out of range. Must be non-negative and less than the size of the collection..
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.InvalidEnumArgument">
            <summary>
              Looks up a localized string similar to The value of argument &apos;{0}&apos; ({1}) is invalid for Enum type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.InvalidPageSize">
            <summary>
              Looks up a localized string similar to PageSize cannot be a negative value..
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.NoCheckOrChangeWhenDeferred">
            <summary>
              Looks up a localized string similar to Cannot change or check the contents or Current position of the PagedCollectionView while Refresh is being deferred..
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.OperationNotAllowedDuringAddOrEdit">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not allowed during an AddNew or EditItem transaction..
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.OperationNotAllowedDuringTransaction">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not allowed during a transaction begun by &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.OperationNotAllowedForView">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not allowed for this view..
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.RefreshWithinDeferRefresh">
            <summary>
              Looks up a localized string similar to Refresh() cannot be called inside a DeferRefresh() transaction..
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.RemoveNotSupported">
            <summary>
              Looks up a localized string similar to Remove/RemoveAt is not supported..
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ControlParameter">
            <summary>
            Special kind of parameter that can get its value from an input control
            </summary>
        </member>
        <member name="T:System.Windows.Data.Parameter">
            <summary>
            Base class for query, sort, filter and group parameters
            </summary>
        </member>
        <member name="M:System.Windows.Data.Parameter.#ctor">
            <summary>
            Default Parameter constructor
            </summary>
        </member>
        <member name="M:System.Windows.Data.Parameter.GetConvertedValue(System.Type)">
            <summary>
            Returns the converted version of the Value property according to the culture provided 
            in the Initialize method call and the convertedValueType parameter.
            </summary>
            <param name="convertedValueType">Target type for the conversion from the Value to the converted value.</param>
            <returns>Converted version of the Value property</returns>
        </member>
        <member name="M:System.Windows.Data.Parameter.Initialize(System.Windows.FrameworkElement,System.Globalization.CultureInfo)">
            <summary>
            Called by the component that owns this Parameter instance to 
            provide a context for its usage.
            </summary>
            <param name="elementContext">FrameworkElement that provides a context for this Parameter usage</param>
            <param name="culture">CultureInfo used for comparisons and conversions</param>
        </member>
        <member name="M:System.Windows.Data.Parameter.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property changed.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> arguments.</param>
        </member>
        <member name="M:System.Windows.Data.Parameter.ResetOriginalValue">
            <summary>
            Resets the <see cref="P:System.Windows.Data.Parameter.HasOriginalValue"/> property to <c>false</c> and the
            <see cref="P:System.Windows.Data.Parameter.OriginalValue"/> to <c>null</c>.
            </summary>
        </member>
        <member name="M:System.Windows.Data.Parameter.RestoreOriginalValue">
            <summary>
            Restores the <see cref="P:System.Windows.Data.Parameter.Value"/> property to the <see cref="P:System.Windows.Data.Parameter.OriginalValue"/>
            stored the last time <see cref="M:System.Windows.Data.Parameter.StoreOriginalValue"/> was called.
            </summary>
        </member>
        <member name="M:System.Windows.Data.Parameter.StoreOriginalValue">
            <summary>
            Stores the <see cref="P:System.Windows.Data.Parameter.Value"/> as the <see cref="P:System.Windows.Data.Parameter.OriginalValue"/> and sets
            <see cref="P:System.Windows.Data.Parameter.HasOriginalValue"/> to <c>true</c>.
            </summary>
        </member>
        <member name="E:System.Windows.Data.Parameter.PropertyChanged">
            <summary>
            INotifyPropertyChange's event
            </summary>
        </member>
        <member name="P:System.Windows.Data.Parameter.HasOriginalValue">
            <summary>
            Determines whether the <see cref="T:System.Windows.Data.Parameter"/> has an original value stored
            that could be restored through <see cref="M:System.Windows.Data.Parameter.RestoreOriginalValue"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Data.Parameter.IsInitialized">
            <summary>
            Gets or sets a value indicating whether this Parameter was initialized with a non-null
            context element.
            </summary>
        </member>
        <member name="P:System.Windows.Data.Parameter.ParameterName">
            <summary>
            Gets or sets the name of the parameter
            </summary>
        </member>
        <member name="P:System.Windows.Data.Parameter.Value">
            <summary>
            Gets or sets the value of the <see cref="T:System.Windows.Data.Parameter"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Data.Parameter.OriginalValue">
            <summary>
            Gets the original value stored when <see cref="M:System.Windows.Data.Parameter.ResetOriginalValue"/>
            was last called.  This value would be restored as the <see cref="P:System.Windows.Data.Parameter.Value"/>
            if <see cref="M:System.Windows.Data.Parameter.RestoreOriginalValue"/> is called.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ControlParameter.FindControl(System.Windows.FrameworkElement,System.String)">
            <summary>
            Tries to locate the input control given the context element and a name.
            </summary>
            <param name="elementContext">Context element</param>
            <param name="controlName">Control name to look for</param>
            <returns>Potential control found</returns>
        </member>
        <member name="M:System.Windows.Controls.ControlParameter.System#Windows#Common#IGeneralEventHandler#HandleGeneralEvent(System.Object,System.EventArgs,System.String)">
            <summary>
            Called when the RefreshEventName event is raised by the control
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> arguments.</param>
            <param name="eventName">The event name.</param>
        </member>
        <member name="M:System.Windows.Controls.ControlParameter.EnsureControl(System.Boolean)">
            <summary>
            Tries to locate the associated input control if 
            it was not found yet. Update the Value property
            if the control is found.
            </summary>
            <param name="force">Indicates whether the control should be located even when one was previously found.</param>
            <returns>True when this method tried to locate the input control. False otherwise.</returns>
        </member>
        <member name="M:System.Windows.Controls.ControlParameter.GetConvertedValue(System.Type)">
            <summary>
            Returns the converted version of the Value property according to the culture provided in the Initialize method call,
            the Converter and ConverterParameter properties, and the convertedValueType parameter.
            </summary>
            <param name="convertedValueType">Target type for the conversion from the Value to the converted value.</param>
            <returns>Converted version of the Value property</returns>
        </member>
        <member name="M:System.Windows.Controls.ControlParameter.Initialize(System.Windows.FrameworkElement,System.Globalization.CultureInfo)">
            <summary>
            Called by the component that owns this ControlParameter instance 
            to provide a context for its usage.
            </summary>
            <param name="elementContext">FrameworkElement that provides a context for this ControlParameter usage</param>
            <param name="culture">CultureInfo used for comparisons and conversions</param>
        </member>
        <member name="M:System.Windows.Controls.ControlParameter.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a parameter property changed.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> arguments.</param>
        </member>
        <member name="P:System.Windows.Controls.ControlParameter.ControlName">
            <summary>
            Gets or sets the name of the control that holds the value
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ControlParameter.Converter">
            <summary>
            Gets or sets an IValueConverter implementation to convert the control's PropertyName
            property before it gets exposed as the Value property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ControlParameter.ConverterParameter">
            <summary>
            Gets or sets a parameter to be provided to the Converter used to convert the control's PropertyName property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ControlParameter.PropertyName">
            <summary>
            Gets or sets the property name on the control that holds the value
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ControlParameter.RefreshEventName">
            <summary>
            Gets or sets the event name on the control that should trigger a refresh of the Value property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ControlParameter.Value">
            <summary>
            Gets or sets the value of the parameter
            </summary>        
        </member>
        <member name="T:System.Windows.Controls.IPagedEntityList">
            <summary>
            An interface to define how paging can be layered on top of an <see cref="T:System.Windows.Ria.EntitySet"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.IPagedEntityList.Add(System.Windows.Ria.Entity)">
            <summary>
            Adds an entity to the list.
            </summary>
            <param name="item">The <see cref="T:System.Windows.Ria.Entity"/> to add.</param>
        </member>
        <member name="M:System.Windows.Controls.IPagedEntityList.MoveToPage(System.Int32)">
            <summary>
            Invokes the operation for moving to a new <paramref name="pageIndex"/>.
            </summary>
            <param name="pageIndex">Requested page index</param>
            <returns><c>true</c> if the page move was initiated, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.IPagedEntityList.Remove(System.Windows.Ria.Entity)">
            <summary>
            Removes an entity from the list.
            </summary>
            <param name="item">The <see cref="T:System.Windows.Ria.Entity"/> to add.</param>
            <returns>Whether or not the removal was successful.</returns>
        </member>
        <member name="P:System.Windows.Controls.IPagedEntityList.BackingEntitySet">
            <summary>
            The <see cref="T:System.Windows.Ria.EntitySet"/> that is used as the backing store
            for the entities within this <see cref="T:System.Windows.Controls.IPagedEntityList"/>.
            </summary>
            <remarks>
            There may be additional entities in the backing entity set that
            are not included in this <see cref="T:System.Windows.Controls.IPagedEntityList"/>.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.IPagedEntityList.IsPagingOperationPending">
            <summary>
            Gets a value indicating that paging is enabled but the data hasn't yet been loaded.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.IPagedEntityList.ItemCount">
            <summary>
            Gets a value indicating the minimum number of items known to be in the source collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.IPagedEntityList.PageIndex">
            <summary>
            Gets the current page index.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.IPagedEntityList.PageSize">
            <summary>
            Gets the number of items to display on a page.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.IPagedEntityList.TotalItemCount">
            <summary>
            Gets the total number of items in the source collection, 
            or -1 if that value is unknown.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.IPagedEntityList.PageChanged">
            <summary>
            Raised when a page change has completed.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.LoadContext">
            <summary>
            Stores the characteristics of a load operation 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadContext.LoadSize">
            <summary>
            Value of the <see cref="P:System.Windows.Controls.DomainDataSource.LoadSize"/> property for the load operation,
            at the time the load operation was initiated.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadContext.LoadType">
            <summary>
            <see cref="P:System.Windows.Controls.LoadContext.LoadType"/> of the load operation.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadContext.PageSize">
            <summary>
            Value of the <see cref="P:System.Windows.Controls.DomainDataSource.PageSize"/> property for the load operation,
            at the time the load operation was initiated.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadContext.RaisePageChanged">
            <summary>
            Determines whether there is a pending page move. When <c>true</c>, the internal
            <see cref="T:System.Windows.Controls.PagedEntityCollection"/> needs to notify the
            <see cref="T:System.Windows.Data.EntityCollectionView"/> of the page move's result.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadContext.RequestedPageIndex">
            <summary>
            Potential page index requested via <see cref="M:System.Windows.Controls.PagedEntityCollection.MoveToPage(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadContext.StartPageIndex">
            <summary>
            Value of the <see cref="P:System.Windows.Controls.PagedEntityCollection.StartPageIndex"/> property for the load operation.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadContext.IsInitialLoad">
            <summary>
            Indicates whether or not the <see cref="P:System.Windows.Controls.LoadContext.LoadType"/> represents an initial load.
            </summary>
            <remarks>
            An initial load is one that results in going back to the first page because a new query was
            invoked, such as filtering, sorting, or grouping.  But paging operations and incremental
            loads do not qualify.
            </remarks>
            <value>
            <c>true</c> when the <see cref="P:System.Windows.Controls.LoadContext.LoadType"/> is one that represents an initial load
            (<see cref="F:System.Windows.Controls.LoadType.LoadAll"/>, <see cref="F:System.Windows.Controls.LoadType.LoadFirstItems"/>,
            or <see cref="F:System.Windows.Controls.LoadType.LoadFirstPages"/>, otherwise <c>false</c>.
            </value>
        </member>
        <member name="T:System.Windows.Controls.LoadedDataEventArgs">
            <summary>
            Event arguments for the completion of a load operation
            </summary>
        </member>
        <member name="M:System.Windows.Controls.LoadedDataEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Ria.Entity},System.Collections.Generic.IEnumerable{System.Windows.Ria.Entity},System.Int32,System.Boolean,System.Exception,System.Collections.Generic.Dictionary{System.Windows.Data.Parameter,System.Object},System.Collections.Generic.Dictionary{System.Windows.Data.Parameter,System.Object})">
            <summary>
            Public constructor
            </summary>
            <param name="entities">The top-level entities loaded with this operation.</param>
            <param name="allEntities">All entities loaded with this operation, including those loaded as associations.</param>
            <param name="totalEntityCount">The total number of records for the original query without any paging applied to it.</param>
            <param name="cancelled"><c>true</c> if the load operation was cancelled, <c>false</c> otherwise.</param>
            <param name="error"><see cref="T:System.Exception"/> for the load operation if it failed.</param>
            <param name="modifiedFilterParameters">Filter parameter changes that caused the load operation.</param>
            <param name="modifiedQueryParameters">Query parameter changes that caused the load operation.</param>
        </member>
        <member name="M:System.Windows.Controls.LoadedDataEventArgs.MarkErrorAsHandled">
            <summary>
            For an operation in error, this method marks the error as handled. If this method is
            not called for a failed operation, an exception will be thrown.
            </summary>
            <exception cref="T:System.InvalidOperationException"> is thrown if <see cref="P:System.Windows.Controls.LoadedDataEventArgs.HasError"/> <c>false</c>.</exception>
        </member>
        <member name="P:System.Windows.Controls.LoadedDataEventArgs.AllEntities">
            <summary>
            Gets all the entities loaded, including any
            entities referenced by the top level entities.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadedDataEventArgs.Entities">
            <summary>
            Gets all the top level entities loaded.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadedDataEventArgs.HasError">
            <summary>
            Gets a value indicating whether the operation has failed. If
            true, inspect the Error property for details.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadedDataEventArgs.IsErrorHandled">
            <summary>
            Gets or sets a value indicating whether the operation error has been marked as
            handled by calling <see cref="M:System.Windows.Controls.LoadedDataEventArgs.MarkErrorAsHandled"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadedDataEventArgs.ModifiedFilterParameters">
            <summary>
            Gets the set of filter parameters changes that have caused the load operation.
            </summary>
            <remarks>
            The keys represent the Value properties of the <see cref="T:System.Windows.Data.FilterDescriptor"/> instances
            that caused the load operation.
            The values represent the original Value of those <see cref="T:System.Windows.Data.Parameter"/> instances.
            This property can be used to restore the original values of the filter parameters, as they were
            before the load operation was initiated.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.LoadedDataEventArgs.ModifiedQueryParameters">
            <summary>
            Gets the set of query parameters changes that have caused the load operation.
            </summary>
            <remarks>
            The keys represent the <see cref="T:System.Windows.Data.Parameter"/> instances of the <see cref="P:System.Windows.Controls.DomainDataSource.QueryParameters"/>
            collection that caused the load operation. The values represent the original Value of those
            <see cref="T:System.Windows.Data.Parameter"/> instances.
            This property can be used to restore the original values of the query parameters, as they were
            before the load operation was initiated.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.LoadedDataEventArgs.TotalEntityCount">
            <summary>
            Gets the total server entity count for the query.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.LoadType">
            <summary>
            Enum used to characterize the current load operation.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LoadType.None">
            <summary>
            Used for non-existing deferred load
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LoadType.LoadAll">
            <summary>
            Loading all items in a single shot
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LoadType.LoadFirstPages">
            <summary>
            Loading the first pages in a paging situation (occurs when PageSize becomes > 0)
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LoadType.LoadPreviousPages">
            <summary>
            Loading previous set of pages in a paging situation (occurs when PageIndex moves before current boundaries)
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LoadType.LoadCurrentPages">
            <summary>
            Loading current set of pages in a paging situation (occurs with Refresh)
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LoadType.LoadNextPages">
            <summary>
            Loading next set of pages in a paging situation (occurs when PageIndex moves beyond current boundaries)
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LoadType.LoadLastPages">
            <summary>
            Loading last set of pages in a paging situation where PageIndex was set to a too large number
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LoadType.LoadFirstItems">
            <summary>
            Loading first chunk of items in a progressive download situation
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LoadType.LoadNextItems">
            <summary>
            Loading next chunk of items in a progressive download situation
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagingHelper.CalculatePageCount(System.Int32,System.Int32)">
            <summary>
            Calculate the number of pages (full or partial) given an
            <paramref name="itemCount"/> and <paramref name="pageSize"/>.
            </summary>
            <param name="itemCount">The number of items across all pages.</param>
            <param name="pageSize">The size of each page.</param>
            <returns>The number of pages needed to represent all items.</returns>
        </member>
        <member name="M:System.Windows.Controls.PagingHelper.CalculateFullPageCount(System.Int32,System.Int32)">
            <summary>
            Calculate the number of full pages given an
            <paramref name="itemCount"/> and <paramref name="pageSize"/>.
            </summary>
            <param name="itemCount">The number of items across all pages.</param>
            <param name="pageSize">The size of each page.</param>
            <returns>The number of pages that would be filled by the items.</returns>
        </member>
        <member name="T:System.Windows.Controls.SubmittingChangesEventArgs">
            <summary>
            Event arguments for an in progress submit operation
            </summary>
        </member>
        <member name="M:System.Windows.Controls.SubmittingChangesEventArgs.#ctor(System.Windows.Ria.EntityChangeSet)">
            <summary>
            Public constructor
            </summary>
            <param name="changeSet">The changeset being submitted</param>
        </member>
        <member name="P:System.Windows.Controls.SubmittingChangesEventArgs.ChangeSet">
            <summary>
            Gets the <see cref="T:System.Windows.Ria.EntityChangeSet"/> being submitted
            </summary>
        </member>
        <member name="T:System.Windows.Data.ItemChangedEventArgs`1">
            <summary>
            Event args for the ItemChanged event raised by the ObservableItemCollection class
            </summary>
            <typeparam name="T">Type of the changed Item</typeparam>
        </member>
        <member name="M:System.Windows.Data.ItemChangedEventArgs`1.#ctor(`0,System.String)">
            <summary>
            ItemChangedEventArgs constructor
            </summary>
            <param name="item">Item that changed</param>
            <param name="propertyName">Item property that changed</param>
        </member>
        <member name="P:System.Windows.Data.ItemChangedEventArgs`1.Item">
            <summary>
            Gets the item that changed
            </summary>
        </member>
        <member name="P:System.Windows.Data.ItemChangedEventArgs`1.PropertyName">
            <summary>
            Gets the item property that changed
            </summary>
        </member>
        <member name="T:System.Windows.Data.ObservableItemCollection`1">
            <summary>
            ObservableCollection class that also raises notifications when one of its items changes
            The items in the collection need to implement INotifyPropertyChanged.
            </summary>
            <typeparam name="T">Type of the collection's items</typeparam>
        </member>
        <member name="M:System.Windows.Data.ObservableItemCollection`1.ClearItems">
            <summary>
            Called by the base class when all items are cleared
            </summary>
        </member>
        <member name="M:System.Windows.Data.ObservableItemCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Called by the base class when an item is inserted
            </summary>
            <param name="index">The index of the item to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:System.Windows.Data.ObservableItemCollection`1.RemoveItem(System.Int32)">
            <summary>
            Called by the base class when an item is removed
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:System.Windows.Data.ObservableItemCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Called by the base class when an item is replaced
            </summary>
            <param name="index">The index to set.</param>
            <param name="item">The item to set.</param>
        </member>
        <member name="M:System.Windows.Data.ObservableItemCollection`1.OnItemChanged(System.Windows.Data.ItemChangedEventArgs{`0})">
            <summary>
            Called by the this class when an item has changed. Raises the ItemChanged event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Data.ItemChangedEventArgs`1"/> arguments.</param>
        </member>
        <member name="M:System.Windows.Data.ObservableItemCollection`1.Item_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property of an item has changed.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> arguments.</param>
        </member>
        <member name="E:System.Windows.Data.ObservableItemCollection`1.ItemChanged">
            <summary>
            Event raised when an item in the collection changed
            </summary>
        </member>
        <member name="T:System.Windows.Common.TypeConverters">
            <summary>
            Common TypeConverter functionality.
            </summary>
        </member>
        <member name="M:System.Windows.Common.TypeConverters.CanConvertFrom``1(System.Type)">
            <summary>
            Returns a value that indicates whether this converter can convert an
            object of the given type to an instance of the expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="sourceType">
            The type of the source that is being evaluated for conversion.
            </param>
            <returns>
            true if the converter can convert the provided type to an instance
            of a String or the expected type; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.Common.TypeConverters.ConvertFrom``1(System.ComponentModel.TypeConverter,System.Object)">
            <summary>
            Attempts to convert a specified object to an instance of the
            expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="converter">TypeConverter instance.</param>
            <param name="value">The object being converted.</param>
            <returns>
            The instance of the expected type created from the converted object.
            </returns>
        </member>
        <member name="T:System.Windows.Common.TypeHelper">
            <summary>
            Utility class for Type related operations
            </summary>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetNestedPropertyType(System.Type,System.String)">
            <summary>
            Extension method that returns the type of a property. That property can be nested.
            Each element of the path needs to be a public instance property.
            </summary>
            <param name="parentType">Type that exposes that property</param>
            <param name="propertyPath">Property path</param>
            <returns>Property type</returns>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetNestedPropertyValue(System.Object,System.String,System.Exception@)">
            <summary>
            Retrieves the value of a property. That property can be nested.
            Each element of the path needs to be a public instance property.
            </summary>
            <param name="item">Object that exposes the property</param>
            <param name="propertyPath">Property path</param>
            <param name="exception">Potential exception</param>
            <returns>Property value</returns>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetNestedPropertyValue(System.Object,System.String,System.Type,System.Exception@)">
            <summary>
            Retrieves the value of a property. That property can be nested.
            Each element of the path needs to be a public instance property.
            </summary>
            <param name="item">Object that exposes the property</param>
            <param name="propertyPath">Property path</param>
            <param name="propertyType">Property type</param>
            <param name="exception">Potential exception</param>
            <returns>Property value</returns>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetOrSetNestedPropertyValue(System.Boolean,System.Object,System.Object@,System.String)">
            <summary>
            Gets or sets the value of a public instance property. The property can be nested. 
            </summary>
            <param name="set">Set to true to write the property value</param>
            <param name="item">Object that exposes the property</param>
            <param name="value">Property value</param>
            <param name="propertyPath">Property path</param>
            <returns>Potential exception</returns>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetPropertyInfo(System.Type,System.String)">
            <summary>
            Returns the PropertyInfo corresponding to the provided propertyPath. The propertyPath can be a dotted
            path where each section is a public property name. Only public instance properties are searched for.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> extended by this method.</param>
            <param name="propertyPath">The property path.</param>
            <returns>The found PropertyInfo or null otherwise</returns>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetTypeName(System.Type)">
            <summary>
            Returns the friendly name for a type
            </summary>
            <param name="type">The <see cref="T:System.Type"/> extended by this method.</param>
            <returns>Textual representation of the input type</returns>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.SetNestedPropertyValue(System.Object,System.Object,System.String)">
            <summary>
            Sets the value of a property. That property can be nested. 
            Only works on public instance properties.
            </summary>
            <param name="item">Object that exposes the property</param>
            <param name="value">Property value</param>
            <param name="propertyPath">Property path</param>
            <returns>Potential exception</returns>
        </member>
        <member name="T:System.Windows.Controls.LinqHelper">
            <summary>
            Utility class used for all Linq-related tasks
            </summary>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.BuildFilterExpression(System.Globalization.CultureInfo,System.Type,System.String,System.Windows.Data.FilterOperator,System.Object,System.Boolean,System.Linq.Expressions.Expression@)">
            <summary>
            Produces the Linq expression that represents a particular FilterDescriptor
            </summary>
            <param name="culture">Culture used for error message of returned exception</param>
            <param name="type">Entity type</param>
            <param name="propertyPath">Left operand: Property on the entity type</param>
            <param name="filterOperator">One of the FilterOperator enum value</param>
            <param name="value">Right operand</param>
            <param name="isCaseSensitive">Boolean that specifies if the string operations are case sensitive or not</param>
            <param name="filterExpression">Resulting linq expression when success</param>
            <returns>Exception in case of failure. Null in case of success</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.TryPromoteEnumExpressions(System.Linq.Expressions.Expression@,System.Linq.Expressions.Expression@)">
            <summary>
            Attempts to promote the specified property and value expressions from enums to their
            equivalent numeric expressions.  If the enums cannot be promoted such that they can
            be compared, they will be left unchanged and the method will return <c>false</c>.
            </summary>
            <param name="propertyExpression">The property expression that might be an enum.</param>
            <param name="valueExpression">The value expression that might be an enum.</param>
            <remarks>
            Promotion will fail if any of the following is true:
            <para>1. Both expressions are enums, but they have different enum types</para>
            <para>2. One expression is an enum, and the underlying type of the enum differs from the other expression's type</para>
            </remarks>
            <returns><c>true</c> if the expressions are promoted to comparable numbers, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.BuildFiltersExpression(System.Globalization.CultureInfo,System.Type,System.Windows.Data.FilterDescriptorCollection,System.Linq.Expressions.Expression@)">
            <summary>
            Produces the Linq expression representing the entire filter descriptors collection.
            </summary>
            <param name="culture">Culture used for error message of returned exception</param>
            <param name="type">Entity type</param>
            <param name="filterDescriptors">Collection of filters</param>
            <param name="filtersExpression">Produced linq expression in case of success</param>
            <returns>Exception in case of failure. Null in case of success</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.BuildGroupsExpression(System.Type,System.Windows.Data.GroupDescriptorCollection)">
            <summary>
            Generates the PropertyExpression of the GroupDescriptor collection items
            </summary>
            <param name="type">Entity type</param>
            <param name="groupDescriptors">Group descriptors</param>
            <returns>True in case of success</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.BuildPropertyExpression(System.Type,System.String,System.Linq.Expressions.Expression@)">
            <summary>
            Builds the Linq Expression for the provided propertyPath and type properties
            </summary>
            <param name="type">Type that exposes the property</param>
            <param name="propertyPath">Public property. Can be nested.</param>
            <param name="propertyExpression">Resulting property expression</param>
            <returns>Exception in case of error, null in case of success</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.BuildSortsExpression(System.Type,System.Windows.Data.SortDescriptorCollection)">
            <summary>
            Generates the PropertyExpression of the SortDescriptor collection items
            </summary>
            <param name="type">Entity type</param>
            <param name="sortDescriptors">Sort descriptors</param>
            <returns>True in case of success</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.GetEntityQueryMethod(System.String)">
            <summary>
            Gets an <see cref="T:System.Windows.Ria.EntityQuery`1"/> method by the specified name.
            </summary>
            <param name="methodName">The name of the method to find and return.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> from <see cref="T:System.Windows.Ria.EntityQuery`1"/>
            that matches the specified name, is generic, with 2 parameters, and accepting
            and <see cref="T:System.Windows.Ria.EntityQuery`1"/> as the first parameter.</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.OrderBy(System.Windows.Ria.EntityQuery,System.Windows.Data.GroupDescriptorCollection,System.Windows.Data.SortDescriptorCollection)">
            <summary>
            Composes an <see cref="T:System.Windows.Ria.EntityQuery"/> for sorting and grouping purposes.
            </summary>
            <param name="source">The queryable source.</param>
            <param name="groupDescriptors">The group descriptors.</param>
            <param name="sortDescriptors">The sort descriptors.</param>
            <returns>The composed <see cref="T:System.Windows.Ria.EntityQuery"/>.</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.OrderBy(System.Windows.Ria.EntityQuery,System.String,System.Linq.Expressions.Expression)">
            <summary>
            Compose an OrderBy, ThenBy, OrderByDescending, or ThenByDescending clause onto an EntityQuery.
            </summary>
            <param name="source">The source EntityQuery</param>
            <param name="orderMethodName">The order method name to use: OrderBy, ThenBy, OrderByDescending, or ThenByDescending.</param>
            <param name="sortExpression">The expression to use for sorting.</param>
            <returns>The composed EntityQuery.</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.Skip(System.Windows.Ria.EntityQuery,System.Int32)">
            <summary>
            Modifies the provided EntityQuery to perform a Skip operation.
            </summary>
            <param name="source">The EntityQuery to compose.</param>
            <param name="count">The number of items to skip.</param>
            <returns>The composed EntityQuery.</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.Take(System.Windows.Ria.EntityQuery,System.Int32)">
            <summary>
            Modifies the provided EntityQuery to perform a Take operation.
            </summary>
            <param name="source">The EntityQuery to compose.</param>
            <param name="count">The number of items to take.</param>
            <returns>The composed EntityQuery.</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.Where(System.Windows.Ria.EntityQuery,System.Linq.Expressions.Expression)">
            <summary>
            Modifies the provided EntityQuery to restrict the result set according to the <paramref name="filtersExpression"/> argument.
            </summary>
            <param name="source">EntityQuery to modify.</param>
            <param name="filtersExpression">Expression representing the filter to apply.</param>
            <returns>Composed EntityQuery</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.GenerateProperty(System.Type,System.String,System.Linq.Expressions.Expression)">
            <summary>
            Generates a Linq property expression given a type and a property path
            </summary>
            <param name="type">Type that contains the property provided</param>
            <param name="propertyPath">Property path that can be dotted or not.</param>
            <param name="instance">Root expression</param>
            <returns>Resulting property expression if path is valid. Null otherwise.</returns>
        </member>
        <member name="T:System.Windows.Controls.LoadingDataEventArgs">
            <summary>
            Event arguments used for the DomainDataSource's Loading event
            </summary>
        </member>
        <member name="M:System.Windows.Controls.LoadingDataEventArgs.#ctor(System.Windows.Ria.EntityQuery,System.Windows.Ria.LoadBehavior,System.Collections.Generic.Dictionary{System.Windows.Data.Parameter,System.Object},System.Collections.Generic.Dictionary{System.Windows.Data.Parameter,System.Object})">
            <summary>
            Internal LoadingDataEventArgs constructor
            </summary>
            <param name="query">Default query that will be used for the load operation</param>
            <param name="loadBehavior">Default load behavior that will be used for the load operation</param>
            <param name="modifiedFilterParameters">Filter parameter changes that caused the load operation.</param>
            <param name="modifiedQueryParameters">Query parameter changes that caused the load operation.</param>
        </member>
        <member name="P:System.Windows.Controls.LoadingDataEventArgs.LoadBehavior">
            <summary>
            Gets or sets the load behavior applied to this load operation
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadingDataEventArgs.ModifiedFilterParameters">
            <summary>
            Gets the set of filter parameters changes that have caused the load operation.
            </summary>
            <remarks>
            The keys represent the Value properties of the <see cref="T:System.Windows.Data.FilterDescriptor"/> instances
            that caused the load operation.
            The values represent the original Value of those <see cref="T:System.Windows.Data.Parameter"/> instances.
            This property can be used to restore the original values of the filter parameters, as they were
            before the load operation was initiated.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.LoadingDataEventArgs.ModifiedQueryParameters">
            <summary>
            Gets the set of query parameters changes that have caused the load operation.
            </summary>
            <remarks>
            The keys represent the <see cref="T:System.Windows.Data.Parameter"/> instances of the <see cref="P:System.Windows.Controls.DomainDataSource.QueryParameters"/>
            collection that caused the load operation. The values represent the original Value of those
            <see cref="T:System.Windows.Data.Parameter"/> instances.
            This property can be used to restore the original values of the query parameters, as they were
            before the load operation was initiated.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.LoadingDataEventArgs.Query">
            <summary>
            Gets or sets the entity query executed remotely
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadingDataEventArgs.RestoreLoadSettings">
            <summary>
            Gets or sets a value indicating whether the DomainDataSource restores the 
            load/filter/sort/group settings to the state they were at the last successful 
            load operation. This restoration only occurs when both e.Cancel and
            e.RestoreLoadSettings are set to True.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DomainDataSource">
            <summary>
            DomainDataSource component operates on a source object in order to load, filter, group and sort collections
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.QueryNameSuffix">
            <summary>
            The preferred query name suffix to be added to
            <see cref="P:System.Windows.Controls.DomainDataSource.QueryName"/> values as needed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.AutoLoadProperty">
            <summary>
            The DependencyProperty for the AutoLoad property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.CanLoadProperty">
            <summary>
            The DependencyProperty for the CanLoad property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.DataProperty">
            <summary>
            The DependencyProperty for the Data property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.DataViewProperty">
            <summary>
            The DependencyProperty for the DataView property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.DomainContextProperty">
            <summary>
            The DependencyProperty for the DomainContext property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.HasChangesProperty">
            <summary>
            The DependencyProperty for the HasChanges property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.IsBusyProperty">
            <summary>
            The DependencyProperty for the IsBusy property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.IsLoadingDataProperty">
            <summary>
            The DependencyProperty for the IsLoadingData property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.IsSubmittingChangesProperty">
            <summary>
            The DependencyProperty for the IsSubmittingChanges property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadDelayProperty">
            <summary>
            The DependencyProperty for the LoadDelay property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadIntervalProperty">
            <summary>
            The DependencyProperty for the LoadInterval property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadSizeProperty">
            <summary>
            The DependencyProperty for the LoadSize property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.PageSizeProperty">
            <summary>
            The DependencyProperty for the PageSize property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.RefreshIntervalProperty">
            <summary>
            The DependencyProperty for the RefreshInterval property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource._currentLoadContext">
            <summary>
            Represents the characteristics of the latest load operation.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource._currentLoadOperation">
            <summary>
            Represents the pending load operation.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource._currentSubmitOperation">
            <summary>
            Represents the current submit operation requested of the DomainContext.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.#ctor">
            <summary>
            Parameter-less constructor for the DomainDataSource class
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.AreGroupDescriptionAndDescriptorEquivalent(System.Windows.Data.PropertyGroupDescription,System.Windows.Data.GroupDescriptor,System.Exception@)">
            <summary>
            Determines if a GroupDescription and GroupDescriptor are equivalent.
            </summary>
            <param name="groupDescription">GroupDescription to compare</param>
            <param name="groupDescriptor">GroupDescriptor to compare</param>
            <param name="exception">Exception that may occur during the comparison</param>
            <returns>True if the two are equivalent</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.AreSortDescriptionAndDescriptorEquivalent(System.ComponentModel.SortDescription,System.Windows.Data.SortDescriptor,System.Exception@)">
            <summary>
            Determines if a SortDescription and SortDescriptor are equivalent.
            </summary>
            <param name="sortDescription">SortDescription to compare</param>
            <param name="sortDescriptor">SortDescriptor to compare</param>
            <param name="exception">Exception that may occur during the comparison</param>
            <returns>True if the two are equivalent</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CanLoadPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:System.Windows.Controls.DomainDataSource.CanLoad"/> is changed.  Will throw an exception if the property value is changed,
            as the underlying property is read-only.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the <see cref="F:System.Windows.Controls.DomainDataSource.CanLoadProperty"/>.</param>
            <exception cref="T:System.InvalidOperationException">When the value is changed.  The underlying property is read-only.</exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CheckQueryParameter(System.Windows.Data.Parameter)">
            <summary>
            Check the validity of a query parameter instance, in particular it makes sure the ParameterName string is not empty.
            </summary>
            <param name="queryParameter">The query parameter.</param>
            <returns>Potential exception to report.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.DataPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when Data is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the DataProperty.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.DataViewPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when DataView is changed
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the DataViewProperty.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.DomainContextPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when DomainContext is changed
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the DomainContextProperty.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetGroupDescriptionFromDescriptor(System.Windows.Data.GroupDescriptor,System.Exception@)">
            <summary>
            Creates a GroupDescription based on a GroupDescriptor.
            </summary>
            <param name="groupDescriptor">GroupDescriptor to convert</param>
            <param name="exception">Potential exception thrown during conversion</param>
            <returns>Resulting GroupDescription</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetGroupDescriptorPropertyPath(System.Windows.Data.GroupDescriptor,System.Exception@)">
            <summary>
            Returns the property path of a GroupDescriptor converted into a string.
            </summary>
            <param name="groupDescriptor">GroupDescriptor to look up</param>
            <param name="exception">Potential exception thrown during conversion</param>
            <returns>Extracted property path</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetEntityQueryEntityType(System.Type)">
            <summary>
            Extracts the <see cref="T:System.Type"/> T from a <paramref name="type"/> of <see cref="T:System.Windows.Ria.EntityQuery`1"/> of T,
            where T derives from <see cref="T:System.Windows.Ria.Entity"/>.
            </summary>
            <param name="type">The <see cref="T:System.Windows.Ria.EntityQuery`1"/> type.</param>
            <returns>The <see cref="T:System.Type"/> of T when the type is <see cref="T:System.Windows.Ria.EntityQuery`1"/> of T and
            T derives from <see cref="T:System.Windows.Ria.Entity"/>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.MethodParametersMatchQueryParameters(System.Reflection.MethodInfo,System.Windows.Data.ParameterCollection)">
            <summary>
            Determine if a method's parameter names match the query parameter names of a <see cref="T:System.Windows.Data.ParameterCollection"/>.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/> whose parameters to check.</param>
            <param name="queryParameters">The <see cref="T:System.Windows.Data.ParameterCollection"/> to check against.</param>
            <returns><c>true</c> when every parameter name is matched up, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.Clear">
            <summary>
            Clear all data from the <see cref="T:System.Windows.Controls.DomainDataSource"/> and the underlying <see cref="T:System.Windows.Ria.EntitySet"/>
            on the <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CouldMethodParametersMatchQueryParameters(System.Reflection.MethodInfo,System.Windows.Data.ParameterCollection)">
            <summary>
            Determine if a method's parameter names match a subset of the query parameter names of a <see cref="T:System.Windows.Data.ParameterCollection"/>.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/> whose parameters to check.</param>
            <param name="queryParameters">The <see cref="T:System.Windows.Data.ParameterCollection"/> to check against.</param>
            <returns><c>true</c> when every query parameter name is matched up, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetSortDescriptionFromDescriptor(System.Windows.Data.SortDescriptor,System.Exception@)">
            <summary>
            Creates a SortDescription based on a SortDescriptor.
            </summary>
            <param name="sortDescriptor">SortDescriptor to convert</param>
            <param name="exception">Potential exception thrown during conversion</param>
            <returns>Resulting SortDescription</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetSortDescriptorPropertyPath(System.Windows.Data.SortDescriptor,System.Exception@)">
            <summary>
            Returns the property path of a SortDescriptor converted into a string.
            </summary>
            <param name="sortDescriptor">SortDescriptor to look up</param>
            <param name="exception">Potential exception thrown during conversion</param>
            <returns>Extracted property path</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.HasChangesPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when HasChanges is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the HasChangedProperty.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.IsBusyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when IsBusy is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the IsBusyProperty.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.IsLoadingDataPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when IsLoadingData is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the IsLoadingDataProperty.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.IsSubmittingChangesPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when IsSubmittingChanges is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the IsSubmittingChangesProperty.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.LoadDelayPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when LoadDelay is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the LoadDelayProperty.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.LoadIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when LoadInterval is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the LoadIntervalProperty.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.LoadSizePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when LoadSize is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the LoadSizeProperty.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.PageSizePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when PageSize is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the PageSizeProperty.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.RefreshIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when RefreshInterval is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the RefreshIntervalProperty.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CancelLoad">
            <summary>
            Cancels the current load operation performed by this DomainDataSource, if any.
            </summary>
            <remarks>
            This method will cancel a <see cref="M:System.Windows.Controls.DomainDataSource.Load"/> operation already in progress. Operations canceled
            using <see cref="M:System.Windows.Controls.DomainDataSource.CancelLoad"/> will raise a <see cref="E:System.Windows.Controls.DomainDataSource.LoadedData"/> event when they complete
            with the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> flag set to <c>true</c>. If
            <see cref="P:System.Windows.Controls.DomainDataSource.IsLoadingData"/> is <c>false</c>, this method will not do anything. This
            method of cancellation differs slightly from canceling a load via the <see cref="E:System.Windows.Controls.DomainDataSource.LoadingData"/>
            event.
            </remarks>
            <seealso cref="E:System.Windows.Controls.DomainDataSource.LoadingData"/>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CancelLoadPrivate">
            <summary>
            Cancels the current load operation performed by this DomainDataSource, if any
            </summary>
            <returns>Potential exception raised by DomainContext</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CancelSubmit">
            <summary>
            Cancels the current submit operation performed by this DomainDataSource, if any.
            </summary>
            <remarks>
            This method will cancel a <see cref="M:System.Windows.Controls.DomainDataSource.SubmitChanges"/> operation already in progress. Operations
            canceled using <see cref="M:System.Windows.Controls.DomainDataSource.CancelSubmit"/> will raise a <see cref="E:System.Windows.Controls.DomainDataSource.SubmittedChanges"/> event when
            they complete with the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> flag set to <c>true</c>.
            If <see cref="P:System.Windows.Controls.DomainDataSource.IsSubmittingChanges"/> is <c>false</c>, this method will not do anything. This
            method of cancellation differs slightly from canceling a submit via the
            <see cref="E:System.Windows.Controls.DomainDataSource.SubmittingChanges"/> event.
            <para>
            Upon completion of the operation, check the <see cref="P:System.Windows.Ria.OperationBase.IsCanceled"/>
            property to determine whether or not the operation was successfully canceled. Note that cancellation
            of the operation does not guarantee state changes were prevented from happening on the server.
            </para>
            </remarks>
            <seealso cref="E:System.Windows.Controls.DomainDataSource.SubmittingChanges"/>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CheckAutoLoad(System.Boolean)">
            <summary>
            When <see cref="P:System.Windows.Controls.DomainDataSource.AutoLoad"/> is <c>true</c>, this method will call
            <see cref="M:System.Windows.Controls.DomainDataSource.ExecuteLoad(System.Boolean,System.Boolean,System.Boolean,System.Windows.Controls.LoadType)"/> asynchronously once the control has been loaded.
            If the control hasn't been loaded, set <see cref="F:System.Windows.Controls.DomainDataSource._isAutoLoadDelayed"/> to
            <c>true</c> so that we know to call this method again once the control has loaded.
            </summary>
            <param name="resetModifiedParameters">See <see cref="M:System.Windows.Controls.DomainDataSource.ExecuteLoad(System.Boolean,System.Boolean,System.Boolean,System.Windows.Controls.LoadType)"/>.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CheckFilterDescriptor(System.Windows.Data.FilterDescriptor)">
            <summary>
            Checks the validity of a FilterDescriptor instance.
            </summary>
            <param name="filterDescriptor">Instance to validate</param>
            <returns>Potential exception - most likely an ArgumentException</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CheckGroupDescriptor(System.Windows.Data.GroupDescriptor)">
            <summary>
            Checks the validity of a GroupDescriptor instance, in particular the 
            validity of its PropertyPath property.
            </summary>
            <param name="groupDescriptor">Instance to validate</param>
            <returns>Potential exception - most likely an ArgumentException</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CheckSortDescriptor(System.Windows.Data.SortDescriptor)">
            <summary>
            Checks the validity of a SortDescriptor instance, in particular the 
            validity of its PropertyPath property.
            </summary>
            <param name="sortDescriptor">Instance to validate</param>
            <returns>Potential exception - most likely an ArgumentException</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.DeferLoad">
            <summary>
            Used to prevent load operations from being triggered while
            changing multiple load characteristics.
            </summary>
            <returns>Disposible object that will trigger a load operation when disposed</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.DeferLoadFirstItems">
            <summary>
            If we're paging or using progressive load, then we will defer a load type
            that ensures the first items will be loaded upon the next load.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.DomainContext_Loaded(System.Windows.Controls.LoadedDataEventArgs,System.Windows.Controls.LoadContext)">
            <summary>
            Called when the <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/>'s load is completed.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Controls.LoadedDataEventArgs"/> that result from this load operation.</param>
            <param name="loadContext">The <see cref="T:System.Windows.Controls.LoadContext"/> associated with this load operation.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.DomainDataSource_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the Control has loaded (not when data has been loaded).  Initialize
            Auto-Load behavior once the control has been loaded.
            </summary>
            <param name="sender">The sender of the loaded event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> for this loaded event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.ExecuteLoad(System.Boolean,System.Boolean,System.Boolean,System.Windows.Controls.LoadType)">
            <summary>
            Execute a load of the specified <see cref="T:System.Windows.Controls.LoadType"/>.
            </summary>
            <param name="isAutoLoad">Whether or not this is an auto load that will be dispatched.</param>
            <param name="cancelCurrentLoad">Whether any pending loads should be canceled.</param>
            <param name="resetModifiedParameters">Whether or not to <see cref="M:System.Windows.Controls.DomainDataSource.ResetModifiedParameters"/> after the load.</param>
            <param name="loadType">The <see cref="T:System.Windows.Controls.LoadType"/> to be used for this load.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.SetBackingEntitySet(System.Type)">
            <summary>
            Set the <see cref="T:System.Windows.Ria.EntitySet"/> used by the <see cref="T:System.Windows.Controls.PagedEntityCollection"/>,
            getting it from the <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/>, using the <paramref name="entityType"/>.
            </summary>
            <param name="entityType">The <see cref="T:System.Type"/> of entity being managed through this
            <see cref="T:System.Windows.Controls.DomainDataSource"/>.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetFilterDescriptorsQuery(System.Windows.Ria.EntityQuery,System.Exception@)">
            <summary>
            Appends the query parameters that will filter the list on the server-side
            before bringing the data down.
            </summary>
            <param name="query">The query before the filter descriptions are applied.</param>
            <param name="exception">The exception that we pass up to the caller in case we encounter an issue.</param>
            <returns>The query for the load operation with the filter descriptors applied.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetQueryParameterValue(System.Reflection.ParameterInfo,System.Windows.Data.Parameter@,System.Exception@)">
            <summary>
            Returns the current value of a query parameter. 
            </summary>
            <param name="pi">ParameterInfo associated with the load method argument</param>
            <param name="parameter">Parameter associated with the load method argument if found</param>
            <param name="exception">Potential exception that occurred during the value retrieval</param>
            <returns>Parameter value to use in the load operation</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetQueryParameterValues(System.Exception@)">
            <summary>
            Returns an array of values to be used for the query parameters
            </summary>
            <param name="exception">Potential <see cref="T:System.Exception"/> that occurred during the values retrieval.</param>
            <returns>Array of <see cref="T:System.Windows.Data.Parameter"/> values to use in the load operation.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetSortDescriptorsQuery(System.Windows.Ria.EntityQuery,System.Exception@)">
            <summary>
            Appends the query parameters that will sort/group the list on the server-side
            before bringing the data down. Because we cannot actually pass in a grouping
            parameter, we just sort by the group information before sorting.
            </summary>
            <param name="query">The query before the sort descriptions are applied.</param>
            <param name="exception">The exception that we pass up to the caller in case we encounter an issue.</param>
            <returns>The query for the load operation with the sort descriptors applied.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.HandleQueryParameterChange(System.Windows.Data.Parameter)">
            <summary>
            Called when a query parameter changed (except for Value changes
            for which load operations are enqueued) or was added/removed.
            </summary>
            <param name="parameter">The query parameter.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.HandleQueryParametersCollectionChange(System.Windows.Data.Parameter,System.Windows.Data.ParameterCollection)">
            <summary>
            Called when the <see cref="P:System.Windows.Controls.DomainDataSource.QueryParameters"/> collection changes.
            </summary>
            <param name="queryParameter">parameter that was added or replaced</param>
            <param name="queryParameters">new collection when a reset action occurs</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.InitializeAutoLoad">
            <summary>
            Called once the control has been loaded and autoload can safely begin.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.InitializeParameters">
            <summary>
            Re-initializes the Parameter instances in the <see cref="P:System.Windows.Controls.DomainDataSource.QueryParameters"/>,
            <see cref="P:System.Windows.Controls.DomainDataSource.FilterDescriptors"/>, <see cref="P:System.Windows.Controls.DomainDataSource.SortDescriptors"/> and
            <see cref="P:System.Windows.Controls.DomainDataSource.GroupDescriptors"/> collections because of a <see cref="P:System.Windows.Controls.DomainDataSource.Culture"/> change for example.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.InitializeView">
            <summary>
            Sets up the internal entity collection and the paged collection view
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.InitializeParameter(System.Windows.Data.Parameter,System.Boolean)">
            <summary>
            Provides this <see cref="T:System.Windows.Controls.DomainDataSource"/> instance as the context for
            the provided <paramref name="parameter"/>'s usage.
            </summary>
            <param name="parameter">The <see cref="T:System.Windows.Data.Parameter"/> instance to initialize.</param>
            <param name="forceInit">Indicates whether the initialization needs to occur even when
            the <see cref="T:System.Windows.Controls.DomainDataSource"/> has not loaded yet.</param>
            <returns>Potential <see cref="T:System.Exception"/> thrown during the initialization.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.Load">
            <summary>
            Starts a load operation synchronously
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.LoadData(System.Windows.Controls.LoadType)">
            <summary>
            Invoke a load operation for the specified <see cref="T:System.Windows.Controls.LoadType"/>.  The <see cref="T:System.Windows.Ria.EntityQuery"/> will be
            composed and the <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/>'s Load method will be called.
            </summary>
            <remarks>
            A <see cref="E:System.Windows.Controls.DomainDataSource.LoadingData"/> event will always be raised when this method is called, regardless of success.
            </remarks>
            <param name="loadType">The type of load to be invoked.</param>
            <returns>Any exception generated during the invocation of the load.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.LoadData_Abort(System.Exception,System.Windows.Controls.LoadingDataEventArgs)">
            <summary>
            Helper for aborting the <see cref="M:System.Windows.Controls.DomainDataSource.LoadData(System.Windows.Controls.LoadType)"/> method when an exception occurs.
            <para>
            Raises the <see cref="E:System.Windows.Controls.DomainDataSource.LoadingData"/> event with a <c>null</c> <see cref="P:System.Windows.Controls.LoadingDataEventArgs.Query"/>,
            and allows for cancellation of the event.  If not canceled, then the specified
            <paramref name="exception"/> will be returned.  If canceled, then <c>null</c> will be returned.
            </para>
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/> that caused <see cref="M:System.Windows.Controls.DomainDataSource.LoadData(System.Windows.Controls.LoadType)"/> to abort.</param>
            <param name="loadingDataEventArgs">The <see cref="T:System.Windows.Controls.LoadingDataEventArgs"/> to be used in the event.
            It's <see cref="P:System.Windows.Controls.LoadingDataEventArgs.Query"/> property will be set to <c>null</c>.
            </param>
            <returns>The specified <paramref name="exception"/> if the <see cref="E:System.Windows.Controls.DomainDataSource.LoadingData"/> event
            is not canceled, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.LoadData_Callback(System.Windows.Ria.LoadOperation)">
            <summary>
            The callback used for the LoadOperation.
            </summary>
            <param name="loadOperation">The LoadOperation that has finished.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.MoveToPage(System.Int32)">
            <summary>
            Called when the paged collection view requests a new page index.
            </summary>
            <param name="pageIndex">Index of the requested page</param>
            <returns>True if an asynchronous page load was initiated</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.OnApplyTemplate">
            <summary>
            Called when a new template gets applied
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.ProcessLoadedEntities(System.Windows.Controls.LoadContext,System.Collections.Generic.IEnumerable{System.Windows.Ria.Entity})">
            <summary>
            Process the entities that resulted from a load operation, loading those entities
            into the <see cref="F:System.Windows.Controls.DomainDataSource._internalEntityCollection"/>.
            </summary>
            <param name="loadContext">The <see cref="T:System.Windows.Controls.LoadContext"/> used to perform the load operation.</param>
            <param name="entities">The <see cref="T:System.Windows.Ria.Entity"/> list that was loaded.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.PushGroupDescriptions(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Brings the group descriptors in sync with the group descriptions.
            </summary>
            <param name="e">Change notification for the group descriptions</param>
            <returns>Potential exception</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.PushGroupDescriptors(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Brings the group descriptions in sync with the group descriptors.
            </summary>
            <param name="e">Change notification for the group descriptors</param>
            <returns>Potential exception</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.PushSortDescriptions(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Brings the sort descriptors in sync with the sort descriptions.
            </summary>
            <param name="e">Change notification for the sort descriptions</param>
            <returns>Potential exception</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.PushSortDescriptors(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Brings the sort descriptions in sync with the sort descriptors.
            </summary>
            <param name="e">Change notification for the sort descriptors</param>
            <returns>Potential exception</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.RaisePageChanged(System.Windows.Controls.LoadContext,System.Int32,System.Int32)">
            <summary>
            Notify the EntityCollectionView that the page move was completed.
            </summary>
            <param name="loadContext">Load characteristics</param>
            <param name="newStartPageIndex">Final Start Page Index</param>
            <param name="newPageIndex">Final Page Index</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.RefreshLoadTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            Handles the tick event of the RefreshLoadTimer and will refresh the data
            that was previously loaded to the EntityCollectionView.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.RejectChanges">
            <summary>
            Cancels the data changes that were performed by the underlying DomainContext
            </summary>
            <remarks>This cannot be called while there is a pending transaction on the <see cref="P:System.Windows.Controls.DomainDataSource.Data"/>.</remarks>
            <exception cref="T:System.InvalidOperationException">When <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/> is <c>null</c>
            or when <see cref="P:System.Windows.Controls.DomainDataSource.Data"/> has a pending Add or Edit transaction.</exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.SubmitChanges">
            <summary>
            Starts a submit operation synchronously
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.SubmitChanges_Callback(System.Windows.Ria.SubmitOperation)">
            <summary>
            The callback used for the SubmitOperation
            </summary>
            <param name="submitOperation">The SubmitOperation that raised this callback.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.UpdateCanLoadProperty">
            <summary>
            Update the <see cref="P:System.Windows.Controls.DomainDataSource.CanLoad"/> property based on the <see cref="P:System.Windows.Controls.DomainDataSource.HasChanges"/>
            and <see cref="P:System.Windows.Controls.DomainDataSource.IsBusy"/> properties.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.UpdatePagingCounts(System.Windows.Controls.LoadedDataEventArgs,System.Windows.Controls.LoadContext,System.Int32)">
            <summary>
            Update the count properties involved in paging when a load operation has succeeded.
            </summary>
            <param name="e">The event args from the load completion.</param>
            <param name="loadContext">The context of the load that completed.</param>
            <param name="loadedEntitiesCount">The count of top-level entities that were loaded.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.ValidateFilterDescriptors">
            <summary>
            Validate all filter descriptors, setting each <see cref="P:System.Windows.Data.FilterDescriptor.Expression"/> and
            ensuring each is valid.
            </summary>
            <returns>The first potential <see cref="T:System.Exception"/> found when processing the filters,
            or <c>null</c> if all filter descriptors are valid.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.ValidateGroupDescriptors">
            <summary>
            Process all group descriptors, validating that each is valid.
            </summary>
            <returns>The first potential <see cref="T:System.Exception"/> found when processing the groups,
            or <c>null</c> if all group descriptors are valid.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.ValidateSortDescriptors">
            <summary>
            Process all sort descriptors, validating that each is valid.
            </summary>
            <returns>The first potential <see cref="T:System.Exception"/> found when processing the sorts,
            or <c>null</c> if all sort descriptors are valid.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.ViewRefreshCallback">
            <summary>
            Callback provided to the <see cref="T:System.Windows.Data.EntityCollectionView"/> for when a <see cref="M:System.ComponentModel.ICollectionView.Refresh"/> occurs.
            </summary>
            <remarks>
            This can be called either from a <see cref="M:System.ComponentModel.ICollectionView.DeferRefresh"/> disposal, or from a direct
            <see cref="M:System.ComponentModel.ICollectionView.Refresh"/> call.  A load will be invoked to refresh the data and the view.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.BuildFilterExpression(System.Globalization.CultureInfo,System.Type,System.String,System.Windows.Data.FilterOperator,System.Object,System.Boolean,System.Linq.Expressions.Expression@,System.Exception@)">
            <summary>
            Temporary debugging hook for testing filter expression generation
            </summary>
            <param name="culture">The CultureInfo to use in the filter expression.</param>
            <param name="type">The Type to use in the filter expression.</param>
            <param name="propertyPath">The property path to use in the filter expression.</param>
            <param name="filterOperator">The filter operator to use in the filter expression.</param>
            <param name="value">The value to use in the filter expression.</param>
            <param name="isCaseSensitive">Indicates whether or not to build the filter expression using case sensitivity.</param>
            <param name="filterExpression">A reference to the filter expression to update.</param>
            <param name="exception">A reference to the Exception to update if an error occurs.</param>
        </member>
        <member name="E:System.Windows.Controls.DomainDataSource.SubmittedChanges">
            <summary>
            Event raised whenever a submit operation is completed.
            </summary>
            <remarks>
            This event is raised on the completion of an asynchronous <see cref="M:System.Windows.Controls.DomainDataSource.SubmitChanges"/> operation.
            If the operation was canceled via <see cref="M:System.Windows.Controls.DomainDataSource.CancelSubmit"/>, the
            <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled"/> flag will be <c>true</c>. Also, exceptions that
            occurred during the operation will be available on <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/>.
            If the submit was canceled from the <see cref="E:System.Windows.Controls.DomainDataSource.SubmittingChanges"/> event, this event will not be
            raised. Also, if there were no changes this event will not be raised.
            </remarks>
        </member>
        <member name="E:System.Windows.Controls.DomainDataSource.LoadedData">
            <summary>
            Event raised whenever a load operation is completed.
            </summary>
            <remarks>
            This event is raised on the completion of an asynchronous <see cref="M:System.Windows.Controls.DomainDataSource.Load"/> operation. If the
            operation was canceled via <see cref="M:System.Windows.Controls.DomainDataSource.CancelLoad"/>, the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled"/>
            flag will be <c>true</c>. Also, exceptions that occurred during the operation will be available
            on <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/>. If the load was canceled from the
            <see cref="E:System.Windows.Controls.DomainDataSource.LoadingData"/> event, this event will not be raised.
            </remarks>
        </member>
        <member name="E:System.Windows.Controls.DomainDataSource.LoadingData">
            <summary>
            Event raised whenever a load operation is launched.
            </summary>
            <remarks>
            This event is raised from <see cref="M:System.Windows.Controls.DomainDataSource.Load"/> and allows a handler to cancel the load before it
            begins. When a handler sets <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c>, the load
            will be aborted and a subsequent <see cref="E:System.Windows.Controls.DomainDataSource.LoadedData"/> event will not be raised. This
            differs slightly from canceling a load via <see cref="M:System.Windows.Controls.DomainDataSource.CancelLoad"/>.
            </remarks>
            <seealso cref="M:System.Windows.Controls.DomainDataSource.CancelLoad"/>
        </member>
        <member name="E:System.Windows.Controls.DomainDataSource.SubmittingChanges">
            <summary>
            Event raised whenever a submit operation is launched.
            </summary>
            <remarks>
            This event is raised from <see cref="M:System.Windows.Controls.DomainDataSource.SubmitChanges"/> and allows a handler to cancel the submit
            before it begins. When a handler sets <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to
            <c>true</c>, the submit will be aborted and a subsequent <see cref="E:System.Windows.Controls.DomainDataSource.SubmittedChanges"/> event
            will not be raised. This differs slightly from canceling a submit via <see cref="M:System.Windows.Controls.DomainDataSource.CancelSubmit"/>.
            </remarks>
            <seealso cref="M:System.Windows.Controls.DomainDataSource.CancelSubmit"/>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.AutoLoad">
            <summary>
            Gets or sets a value indicating whether automatic load operations occur whenever
            a characteristic changes that could result in a different result set
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.CanLoad">
            <summary>
            Gets the indicator for whether or not the control can perform
            a load operation based on the present state.
            </summary>
            <value>
            <c>false</c> whenever <see cref="P:System.Windows.Controls.DomainDataSource.HasChanges"/> or <see cref="P:System.Windows.Controls.DomainDataSource.IsBusy"/>
            is <c>true</c>.  Otherwise, <c>true</c>.
            </value>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.Culture">
            <summary>
            Gets or sets the CultureInfo used for comparisons and conversions.
            </summary>
            <summary>
            Gets the <see cref="T:System.Globalization.CultureInfo"/> used for comparisons and conversions.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.Data">
            <summary>
            Gets the entities resulting from a load operation
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.DataView">
            <summary>
            Gets the collection view representing the loaded entities
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.DomainContext">
            <summary>
            Gets or sets the DomainContext instance used for executing the load and submit operations
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.FilterDescriptors">
            <summary>
            Gets or sets the collection of FilterDescriptor objects used to narrow down the result set
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.GroupDescriptors">
            <summary>
            Gets the collection of GroupDescriptor objects used to organize the items by groups
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.HasChanges">
            <summary>
            Gets a value indicating whether the items exposed by this DomainDataSource have pending changes.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.InitialLoadType">
            <summary>
            Gets the type of load operation required given the PageSize and LoadSise settings
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.IsBusy">
            <summary>
            Gets a value indicating whether the DomainDataSource is either loading data or submitting changes.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.IsLoadingData">
            <summary>
            Gets a value indicating whether the DomainDataSource is loading a result set.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.IsSubmittingChanges">
            <summary>
            Gets a value indicating whether the DomainDataSource is submitting changes
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.LoadDelay">
            <summary>
            Gets or sets the countdown before an automatic load operation is 
            launched. This countdown is applied at start up time, or when a filter value changes,
            or when a query parameter value changes. If two such changes occur within the countdown
            they are batched up and launch a single load operation.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.LoadInterval">
            <summary>
            Gets or sets the pause duration between two successive load operations in 
            progressive load usages.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.LoadSize">
            <summary>
            Gets or sets the number of items to load everytime a load operation is executed.
            When equal to 0, there is no capping and all items are loaded 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.PageSize">
            <summary>
            Gets or sets the number of items exposed by the Data property. When equal to 0, paging
            is turned off and the number of items exposed by the Data property is illimited.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.QueryName">
            <summary>
            Gets or sets the name of the query to use for loading.
            </summary>
            <remarks>
            The <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/> will be searched for a method
            that returns an <see cref="T:System.Windows.Ria.EntityQuery`1"/>, with a name
            matching what is provided to <see cref="P:System.Windows.Controls.DomainDataSource.QueryName"/>, with or
            without a "Query" suffix.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.QueryParameters">
            <summary>
            Gets the collection of <see cref="T:System.Windows.Data.Parameter"/> objects representing arguments of the
            <see cref="T:System.Windows.Ria.EntityQuery`1"/> referenced by <see cref="P:System.Windows.Controls.DomainDataSource.QueryName"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.RefreshInterval">
            <summary>
            Gets or sets the duration between two consecutive refresh load operations.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.RefreshLoadTimer">
            <summary>
            Gets a reference to the timer we keep for refreshing the loaded data. If it is null, we
            will create a new reference.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.SortDescriptors">
            <summary>
            Gets the collection of SortDescriptor objects used to sort the result set
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DomainDataSource.LoadDeferHelper">
            <summary>
            Class used to defer load operations via the DeferLoad() method
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.LoadDeferHelper.#ctor(System.Windows.Controls.DomainDataSource)">
            <summary>
            Constructor for the private LoadDeferHelper class
            </summary>
            <param name="domainDataSource">The DomainDataSource to be used with this helper class.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.LoadDeferHelper.Dispose">
            <summary>
            Called to dispose this instance
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DomainDataSource.MethodAccessStatus">
            <summary>
            Enum used to indicate success or failure when trying to locate a method through reflection
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.MethodAccessStatus.Success">
            <summary>
            Load information is gathered successfully.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.MethodAccessStatus.InsufficientInput">
            <summary>
            Insufficient input for <see cref="M:System.Windows.Controls.DomainDataSource.GetEntityQueryInformation(System.Type,System.String,System.Windows.Data.ParameterCollection,System.Reflection.MethodInfo@,System.Type@)"/> method.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.MethodAccessStatus.NameNotFound">
            <summary>
            <see cref="P:System.Windows.Controls.DomainDataSource.QueryName"/> not found.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.MethodAccessStatus.ArgumentSubset">
            <summary>
            <see cref="P:System.Windows.Controls.DomainDataSource.QueryParameters"/> match a subset of a valid <see cref="P:System.Windows.Controls.DomainDataSource.QueryName"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.MethodAccessStatus.ArgumentMismatch">
            <summary>
            <see cref="P:System.Windows.Controls.DomainDataSource.QueryParameters"/> do not match any <see cref="P:System.Windows.Controls.DomainDataSource.QueryName"/>.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.MethodAccessStatus.EntitySetNotFound">
            <summary>
            The <see cref="T:System.Windows.Ria.EntitySet`1"/> property couldn't be found
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.MethodAccessStatus.AmbiguousEntitySet">
            <summary>
            There were multiple properties returning the expected <see cref="T:System.Windows.Ria.EntitySet`1"/> type
            </summary>
        </member>
        <member name="T:System.Windows.Controls.PagedEntityCollection">
            <summary>
            Internal collection owned by the <see cref="T:System.Windows.Controls.DomainDataSource"/> and exposed to its <see cref="T:System.Windows.Data.EntityCollectionView"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollection._moveToPageCallback">
            <summary>
            Represents the MoveToPage callback to use when invoking a <see cref="M:System.Windows.Controls.PagedEntityCollection.MoveToPage(System.Int32)"/> operation.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollection._itemCount">
            <summary>
            Represents the minimum number of items known to be in the source collection.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollection._pageCount">
            <summary>
            The number of pages loaded.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollection._pageIndex">
            <summary>
            Represents the current page index.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollection._pageSize">
            <summary>
            Represents the page size.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollection._pageTracking">
            <summary>
            Map of what entities are on what page indexes.  This is used to
            maintain page affinity as the collection is modified and pages
            are navigated.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollection._raiseCollectionChangedEvents">
            <summary>
            Whether or not to raise collection changed events.  During a
            load operation, events are suppressed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollection._sourceEntitySet">
            <summary>
            Underlying entity set
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollection._startPageIndex">
            <summary>
            Represents the index of the first page of items provided by the source collection.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagedEntityCollection._totalItemCount">
            <summary>
            Represents the total number of items in the source collection, or -1 if that value is unknown.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.#ctor(System.Func{System.Int32,System.Boolean})">
            <summary>
            Default constructor, accepting a callback for when <see cref="M:System.Windows.Controls.PagedEntityCollection.MoveToPage(System.Int32)"/> is invoked.
            </summary>
            <param name="moveToPageCallback">
            The function to call when a <see cref="M:System.Windows.Controls.PagedEntityCollection.MoveToPage(System.Int32)"/> operation is invoked.
            <para>
            The <c>int</c> of the <paramref name="moveToPageCallback"/> represents the pageIndex
            parameter from the <see cref="M:System.Windows.Controls.PagedEntityCollection.MoveToPage(System.Int32)"/> method.
            </para>
            <para>
            The <c>bool</c> of the <paramref name="moveToPageCallback"/> represents the return
            value of the <see cref="M:System.Windows.Controls.PagedEntityCollection.MoveToPage(System.Int32)"/> method, indicating whether or not
            the paging operation was successfully handled.
            </para>
            </param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.MoveToPage(System.Int32)">
            <summary>
            Transmits the request for a page move.
            </summary>
            <param name="pageIndex">Requested page index</param>
            <returns>True if an asynchronous page move was initiated, False otherwise</returns>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.ClearItems">
            <summary>
            Clear the items and raise a Reset CollectionChanged event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.InsertItem(System.Int32,System.Windows.Ria.Entity)">
            <summary>
            Track what page an item is inserted to.  If inserted to the current page,
            then insert the item to the underlying collection, otherwise just record
            its existence on another page.
            </summary>
            <param name="index">The desired index for insertion.</param>
            <param name="item">The item to be inserted.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.RemoveItem(System.Int32)">
            <summary>
            Remove an item from the underlying collection and raise the CollectionChanged event.
            </summary>
            <param name="index">The index of the item to be removed.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.SetItem(System.Int32,System.Windows.Ria.Entity)">
            <summary>
            Update an item in the list and raise a CollectionChanged event.
            </summary>
            <param name="index">The index of the item to be replaced.</param>
            <param name="item">The new item.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.AddLoadedEntity(System.Windows.Ria.Entity)">
            <summary>
            Adds a loaded entity into the collection, tracking the start page index
            that was used to load the entity.
            </summary>
            <param name="loadedEntity">The entity to be added.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.BeginLoad">
            <summary>
            Indicates that a load is beginning and collection changed
            events should be suppressed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.Clear(System.Boolean)">
            <summary>
            Clear the collection, specifying whether or not it's being
            cleared for an initial load of entities.
            </summary>
            <param name="isInitialLoad">Indicates whether or not this clear
            is being done as part of an initial load of data.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.ClearPageTracking(System.Boolean)">
            <summary>
            Clear page tracking, optionally clearing the added items' page tracking.
            </summary>
            <param name="clearAddedItemTracking">Whether or not to also clear the page tracking
            for added items.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.CompleteLoad">
            <summary>
            Indicate that a load has completed, raising a collection changed notification for the Reset
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.NotifyPageChanged(System.Int32,System.Int32)">
            <summary>
            Updates the <see cref="P:System.Windows.Controls.PagedEntityCollection.StartPageIndex"/> and <see cref="P:System.Windows.Controls.PagedEntityCollection.PageIndex"/> properties.
            </summary>
            <param name="startPageIndex">Final start page index</param>
            <param name="pageIndex">Final page index</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.AddTrackedItems(System.Action{System.Windows.Ria.Entity})">
            <summary>
            Ensures that any entities that have been recorded as on the current page
            are added to the collection.  When there are tracked items that need to be
            added, the specified <paramref name="addAction"/> is used to perform the add.
            </summary>
            <param name="addAction">The action to call for each entity that needs to be added.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.GetEntityPageTracking(System.Windows.Ria.Entity)">
            <summary>
            Get the page tracking for an entity
            </summary>
            <param name="entity">The entity being tracked</param>
            <returns>A nullable int that represents the page the entity is being
            tracked against, or null if the entity is not being tracked against a page.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.HookupSourceCollectionChangeNotifications">
            <summary>
            Attaches to the source's INotifyPropertyChanged and INotifyCollectionChanged events.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.InsertItemWithoutEvents(System.Int32,System.Windows.Ria.Entity)">
            <summary>
            Insert an item without raising <see cref="E:System.Windows.Controls.PagedEntityCollection.CollectionChanged"/> events.
            </summary>
            <param name="index">The index at which to add the item.</param>
            <param name="item">The <see cref="T:System.Windows.Ria.Entity"/> to add.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.RaiseCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Notifies the consuming <see cref="T:System.Windows.Data.EntityCollectionView"/> of the provided source collection change.
            </summary>
            <param name="e">Event argument to use for the notification</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.RaiseCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Windows.Ria.Entity,System.Int32)">
            <summary>
            Notifies the consuming PagedCollectionView of a source collection change.
            </summary>
            <param name="action">Type of collection change</param>
            <param name="entity">Potential <see cref="T:System.Windows.Ria.Entity"/> affected by the change</param>
            <param name="index">Index of that potential entity</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.RaisePropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.Reset">
            <summary>
            Reset the collection, clearing all items and tracking all items in the
            source collection as added items, so that our list then contains the
            items that are being tracked that remain in the source collection.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.SourceEntitySet_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> events from the source
            <see cref="T:System.Windows.Ria.EntitySet"/>, synchronizing those changes to the local collection.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.TrackAddedItems(System.Collections.Generic.IEnumerable{System.Windows.Ria.Entity})">
            <summary>
            Tracks items that were added to the source entity set.  If an entity
            is being added after it was removed from our list, then we add it back.
            </summary>
            <param name="addedItems">The <see cref="T:System.Windows.Ria.Entity"/> items that were added to the source entity set.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.TrackEntityPage(System.Windows.Ria.Entity,System.Int32)">
            <summary>
            Track the page index that an entity is loaded or added onto
            </summary>
            <param name="entity">The <see cref="T:System.Windows.Ria.Entity"/> for which the page needs to be tracked.</param>
            <param name="trackedPageIndex">The page index for the <paramref name="entity"/> being tracked.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.TrackRemovedItems(System.Collections.Generic.IEnumerable{System.Windows.Ria.Entity})">
            <summary>
            Track items that were removed from the source entity set.  If an entity
            is being removed and it's also in our list, then we remove it.
            </summary>
            <param name="removedItems">The list of <see cref="T:System.Windows.Ria.Entity"/> items being removed from the collection.</param>
        </member>
        <member name="M:System.Windows.Controls.PagedEntityCollection.UnhookSourceCollectionChangeNotifications">
            <summary>
            Detaches from the source's INotifyPropertyChanged and INotifyCollectionChanged events.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.PagedEntityCollection.PropertyChanged">
            <summary>
            Event exposed by the INotifyPropertyChanged interface
            </summary>
        </member>
        <member name="E:System.Windows.Controls.PagedEntityCollection.CollectionChanged">
            <summary>
            Occurs when this collection has changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollection.BackingEntitySet">
            <summary>
            Gets or sets the source entity collection
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollection.IsPagingOperationPending">
            <summary>
            Gets a value indicating that paging is enabled but the data hasn't yet been loaded.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollection.ItemCount">
            <summary>
            Gets a value indicating the minimum number of items known to be in the source collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollection.PageIndex">
            <summary>
            Gets or sets the current page index
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollection.PageSize">
            <summary>
            Gets or sets the number of items to display on a page.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollection.TotalItemCount">
            <summary>
            Gets the total number of items in the source collection, 
            or -1 if that value is unknown.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.PagedEntityCollection.PageChanged">
            <summary>
            Raised when a page change has completed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollection.LoadedItemCount">
            <summary>
            Gets the count of non-new entities that are being tracked, starting with the start page index
            and ending based on our load size / page size (how many pages are loaded at once).
            <para>
            When paging is disabled, it just returns Count.
            </para>
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollection.PageCount">
            <summary>
            Gets or sets the number of pages loaded.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollection.StartPageIndex">
            <summary>
            Gets the index of the first page of items provided by the source collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagedEntityCollection.IsLastPage">
            <summary>
            Gets the total number of pages based on the <see cref="P:System.Windows.Controls.PagedEntityCollection.TotalItemCount"/>
            and the <see cref="P:System.Windows.Controls.PagedEntityCollection.PageSize"/>.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DomainDataSourceResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CancelLoadOperation">
            <summary>
              Looks up a localized string similar to load cancelling.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CancelSubmitOperation">
            <summary>
              Looks up a localized string similar to submit cancelling.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotChangeSortDescriptions">
            <summary>
              Looks up a localized string similar to The SortDescriptions collection cannot be changed while SortDescriptors changes are propagated to it..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotChangeSortDescriptors">
            <summary>
              Looks up a localized string similar to The SortDescriptors collection cannot be changed while SortDescriptions changes are propagated to it..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotEvaluateFilter">
            <summary>
              Looks up a localized string similar to A FilterDescriptor with its PropertyPath equal to &apos;{0}&apos; cannot be evaluated..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotInitializeParameter">
            <summary>
              Looks up a localized string similar to An exception occurred during the parameter&apos;s initialization: {0}.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotLoadWhenCanLoadIsFalse">
            <summary>
              Looks up a localized string similar to A load operation cannot be performed when CanLoad is false.  Controls that invoke load operations should be disabled when CanLoad is false..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotLoadWhenCanLoadIsFalse_DeferLoad">
            <summary>
              Looks up a localized string similar to DeferLoad cannot be performed when CanLoad is false.  This would result in a load operation that cannot be performed when CanLoad is false.  Controls that invoke load operations should be disabled when CanLoad is false..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotLoadWhenCanLoadIsFalse_Filtering">
            <summary>
              Looks up a localized string similar to Cannot apply or modify FilterDescriptors when CanLoad is false.  This would result in a load operation that cannot be performed when CanLoad is false.  Controls that apply filters should be disabled when CanLoad is false..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotLoadWhenCanLoadIsFalse_Grouping">
            <summary>
              Looks up a localized string similar to Cannot apply or modify grouping when CanLoad is false.  This would result in a load operation that cannot be performed when CanLoad is false.  Controls that apply grouping should be disabled when CanLoad is false.  Not that CanGroup will be false whenever CanLoad is false and this will automatically disable controls that respect the CanGroup property..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotLoadWhenCanLoadIsFalse_Paging">
            <summary>
              Looks up a localized string similar to Cannot change page when CanLoad is false.  This would result in a load operation that cannot be performed when CanLoad is false.  Controls that invoke paging should be disabled when CanLoad is false.  Note that CanChangePage will be false whenever CanLoad is false, and this will automatically disable controls that respect the CanChangePage property..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotLoadWhenCanLoadIsFalse_PropertySetter">
            <summary>
              Looks up a localized string similar to Cannot set property &apos;{0}&apos; when CanLoad is false..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotLoadWhenCanLoadIsFalse_QueryParameters">
            <summary>
              Looks up a localized string similar to QueryParameters cannot be changed when AutoLoad is true and CanLoad is false.  This would result in a load operation that cannot be performed when CanLoad is false.  Controls that invoke load operations should be disabled when CanLoad is false..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotLoadWhenCanLoadIsFalse_Refresh">
            <summary>
              Looks up a localized string similar to Refresh cannot be performed when the DomainDataSource.CanLoad property is false.  This would result in a load operation that cannot be performed when CanLoad is false.  Controls that invoke load operations should be disabled when CanLoad is false..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotLoadWhenCanLoadIsFalse_Sorting">
            <summary>
              Looks up a localized string similar to Cannot apply sorting when CanLoad is false.  This would result in a load operation that cannot be performed when CanLoad is false.  Controls that apply sorting should be disabled when CanLoad is false.  Note that CanSort will be false whenever CanLoad is false, and this will automatically disable controls that respect the CanSort property..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.DescriptorPropertyPathIsNull">
            <summary>
              Looks up a localized string similar to Cannot use a {0} with a null or empty PropertyPath property..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.DomainContextAlreadySet">
            <summary>
              Looks up a localized string similar to The DomainContext property can only be set once..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.EntityQueryMethodHasMismatchedArguments">
            <summary>
              Looks up a localized string similar to The {0} method does not have arguments that match the QueryParameters collection..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.FilterDescriptorValueIsNull">
            <summary>
              Looks up a localized string similar to Cannot use a FilterDescriptor with a null Value property..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.HasErrorMustBeTrue">
            <summary>
              Looks up a localized string similar to MarkErrorAsHandled can only be called if HasError is true..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.IncompatibleOperands">
            <summary>
              Looks up a localized string similar to Operator &apos;{0}&apos; incompatible with operand types &apos;{1}&apos; and &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.InvalidEnumArgument">
            <summary>
              Looks up a localized string similar to The value of argument &apos;{0}&apos; ({1}) is invalid for Enum type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.InvalidOperationDuringLoadOrSubmit">
            <summary>
              Looks up a localized string similar to This operation is not supported during a load or submit operation..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.InvalidTimeSpan">
            <summary>
              Looks up a localized string similar to The {0} time span must be {1}..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.ItemMustDeriveFromEntity">
            <summary>
              Looks up a localized string similar to The provided item must derive from Entity..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.LoadErrorWasNotHandled">
            <summary>
              Looks up a localized string similar to An error occurred while loading data through the &apos;{0}&apos; query on DomainContext of type &apos;{1}&apos; and the error was not handled.  If this error is expected, then you must handle the LoadedData event on the DomainDataSource and call LoadedDataEventArgs.MarkErrorAsHandled() to avoid this exception..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.LoadOperation">
            <summary>
              Looks up a localized string similar to load.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.LoadWithinDeferLoad">
            <summary>
              Looks up a localized string similar to Load() cannot be called inside a DeferLoad() transaction..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.MemberNotFound">
            <summary>
              Looks up a localized string similar to The type {0} does not expose {1} called &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.Method">
            <summary>
              Looks up a localized string similar to a method.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.MultipleEntitySetMembers">
            <summary>
              Looks up a localized string similar to The DomainContext value cannot have more than one public property of type EntitySet&lt;{0}&gt;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.NoEntitySetMember">
            <summary>
              Looks up a localized string similar to The DomainContext value must have a public property of type EntitySet&lt;{0}&gt;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.OperationAlreadyInProgress">
            <summary>
              Looks up a localized string similar to A {0} operation is already in progress on this DomainDataSource..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.OperationNeedsPropertiesSet">
            <summary>
              Looks up a localized string similar to The DomainDataSource&apos;s DomainContext and QueryName properties need to be set first..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.OperationNeedsPropertySet">
            <summary>
              Looks up a localized string similar to The {0} property needs to be set for {1} operations to succeed..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.Positive">
            <summary>
              Looks up a localized string similar to positive.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.QueryParameterNameIsEmpty">
            <summary>
              Looks up a localized string similar to The provided query parameter cannot be used because it has an empty ParameterName property..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.ReadableProperty">
            <summary>
              Looks up a localized string similar to a readable property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.RejectChangesOperation">
            <summary>
              Looks up a localized string similar to change reverting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.StrictlyPositive">
            <summary>
              Looks up a localized string similar to strictly positive.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.SubmitErrorWasNotHandled">
            <summary>
              Looks up a localized string similar to And error occurred while submitting changes on the DomainContext of type &apos;{0}&apos; and the error was not handled.  You must handle the SubmittedChanges event on the DomainDataSource and call SubmittedChangesEventArgs.MarkErrorAsHandled() to avoid this exception..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.SubmitOperation">
            <summary>
              Looks up a localized string similar to submit.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.UnderlyingPropertyIsReadOnly">
            <summary>
              Looks up a localized string similar to {0} cannot be set because the underlying property is read only..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.ValueMustBeGreaterThanOrEqualTo">
            <summary>
              Looks up a localized string similar to {0} must be greater than or equal to {1}..
            </summary>
        </member>
        <member name="T:System.Windows.Data.FilterDescriptor">
            <summary>
            Class representing a filter description
            </summary>
        </member>
        <member name="M:System.Windows.Data.FilterDescriptor.#ctor">
            <summary>
            Default parameterless FilterDescriptor constructor
            </summary>
        </member>
        <member name="M:System.Windows.Data.FilterDescriptor.#ctor(System.String,System.Windows.Data.FilterOperator,System.Object)">
            <summary>
            Constructor that creates a <see cref="T:System.Windows.Data.Parameter"/> instance and sets its
            <see cref="P:System.Windows.Data.Parameter.Value"/> property to the provided <paramref name="filterValue"/>.
            </summary>
            <param name="propertyPath">The path to be used for <see cref="P:System.Windows.Data.FilterDescriptor.PropertyPath"/>.</param>
            <param name="filterOperator">
            The <see cref="T:System.Windows.Data.FilterOperator"/> to be used for <see cref="P:System.Windows.Data.FilterDescriptor.Operator"/>.
            </param>
            <param name="filterValue">
            The value to be used by a new <see cref="T:System.Windows.Data.Parameter"/> instance.  Do not specify a
            <see cref="T:System.Windows.Data.Parameter"/>; just supply the value to be used.  A new <see cref="T:System.Windows.Data.Parameter"/>
            will be created, setting its <see cref="P:System.Windows.Data.Parameter.ParameterName"/> to <c>"Value"</c>
            and its <see cref="P:System.Windows.Data.Parameter.Value"/> to the <paramref name="filterValue"/> supplied.
            </param>
        </member>
        <member name="M:System.Windows.Data.FilterDescriptor.ResetOriginalValue">
            <summary>
            Resets the <see cref="P:System.Windows.Data.FilterDescriptor.HasOriginalValue"/> property to <c>false</c> and clears
            original values that had been stored from <see cref="M:System.Windows.Data.FilterDescriptor.StoreOriginalValue"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Data.FilterDescriptor.RestoreOriginalValue">
            <summary>
            Restores the <see cref="P:System.Windows.Data.FilterDescriptor.Operator"/> and <see cref="P:System.Windows.Data.FilterDescriptor.Value"/>.<see cref="P:System.Windows.Data.Parameter.Value"/>
            properties to the original values stored the last time <see cref="M:System.Windows.Data.FilterDescriptor.StoreOriginalValue"/> was called.
            </summary>
        </member>
        <member name="M:System.Windows.Data.FilterDescriptor.StoreOriginalValue">
            <summary>
            Stores the <see cref="P:System.Windows.Data.FilterDescriptor.Operator"/> and <see cref="P:System.Windows.Data.FilterDescriptor.Value"/>.<see cref="P:System.Windows.Data.Parameter.Value"/>
            properties as original values and sets <see cref="P:System.Windows.Data.FilterDescriptor.HasOriginalValue"/> to <c>true</c>.
            </summary>
        </member>
        <member name="E:System.Windows.Data.FilterDescriptor.PropertyChanged">
            <summary>
            INotifyPropertyChange's event
            </summary>
        </member>
        <member name="P:System.Windows.Data.FilterDescriptor.HasOriginalValue">
            <summary>
            Determines whether the <see cref="T:System.Windows.Data.FilterDescriptor"/> has an original value stored
            that could be restored through <see cref="M:System.Windows.Data.FilterDescriptor.RestoreOriginalValue"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Data.FilterDescriptor.IgnoredValue">
            <summary>
            Gets or sets the value for the right operand that turns off this FilterDescriptor
            </summary>
        </member>
        <member name="P:System.Windows.Data.FilterDescriptor.IsCaseSensitive">
            <summary>
            Gets or sets a value indicating whether the FilterDescriptor is case sensitive for string values
            </summary>
        </member>
        <member name="P:System.Windows.Data.FilterDescriptor.Operator">
            <summary>
            Gets or sets the filter operator
            </summary>
        </member>
        <member name="P:System.Windows.Data.FilterDescriptor.PropertyPath">
            <summary>
            Gets or sets the name of the property path used as the left operand
            </summary>
        </member>
        <member name="P:System.Windows.Data.FilterDescriptor.Value">
            <summary>
            Gets or sets the right operand
            </summary>
        </member>
        <member name="T:System.Windows.Data.FilterDescriptorCollection">
            <summary>
            Collection of filter descriptions that raises notification for both collection
            and item changes
            </summary>
        </member>
        <member name="M:System.Windows.Data.FilterDescriptorCollection.ClearItems">
            <summary>
            Called by the base class when all items are cleared
            </summary>
        </member>
        <member name="M:System.Windows.Data.FilterDescriptorCollection.InsertItem(System.Int32,System.Windows.Data.FilterDescriptor)">
            <summary>
            Called by the base class when an item is inserted
            </summary>
            <param name="index">The index at which to insert the <paramref name="item"/>.</param>
            <param name="item">The <see cref="T:System.Windows.Data.FilterDescriptor"/> item to insert.</param>
        </member>
        <member name="M:System.Windows.Data.FilterDescriptorCollection.RemoveItem(System.Int32)">
            <summary>
            Called by the base class when an item is removed
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:System.Windows.Data.FilterDescriptorCollection.SetItem(System.Int32,System.Windows.Data.FilterDescriptor)">
            <summary>
            Called by the base class when an item is replaced
            </summary>
            <param name="index">The index of the item to set.</param>
            <param name="item">The <see cref="T:System.Windows.Data.FilterDescriptor"/> item to set.</param>
        </member>
        <member name="E:System.Windows.Data.FilterDescriptorCollection.FilterChanged">
            <summary>
            Event raised whenever LogicalOperator value changes
            </summary>
        </member>
        <member name="P:System.Windows.Data.FilterDescriptorCollection.LogicalOperator">
            <summary>
            Gets or sets the logical operator for the filters collection: AND or OR
            </summary>
        </member>
        <member name="T:System.Windows.Data.FilterDescriptorLogicalOperator">
            <summary>
            Enumeration of logical operators for filter collections
            </summary>
        </member>
        <member name="F:System.Windows.Data.FilterDescriptorLogicalOperator.And">
            <summary>
            Filters are AND'ed
            </summary>
        </member>
        <member name="F:System.Windows.Data.FilterDescriptorLogicalOperator.Or">
            <summary>
            Filters are OR'ed
            </summary>
        </member>
        <member name="T:System.Windows.Data.FilterOperator">
            <summary>
            Operator used in FilterDescriptor class
            </summary>
        </member>
        <member name="F:System.Windows.Data.FilterOperator.IsLessThan">
            <summary>
            Left operand must be smaller than the right one
            </summary>
        </member>
        <member name="F:System.Windows.Data.FilterOperator.IsLessThanOrEqualTo">
            <summary>
            Left operand must be smaller than or equal to the right one
            </summary>
        </member>
        <member name="F:System.Windows.Data.FilterOperator.IsEqualTo">
            <summary>
            Left operand must be equal to the right one
            </summary>
        </member>
        <member name="F:System.Windows.Data.FilterOperator.IsNotEqualTo">
            <summary>
            Left operand must be different from the right one
            </summary>
        </member>
        <member name="F:System.Windows.Data.FilterOperator.IsGreaterThanOrEqualTo">
            <summary>
            Left operand must be larger than the right one
            </summary>
        </member>
        <member name="F:System.Windows.Data.FilterOperator.IsGreaterThan">
            <summary>
            Left operand must be larger than or equal to the right one
            </summary>
        </member>
        <member name="F:System.Windows.Data.FilterOperator.StartsWith">
            <summary>
            Left operand must start with the right one
            </summary>
        </member>
        <member name="F:System.Windows.Data.FilterOperator.EndsWith">
            <summary>
            Left operand must end with the right one
            </summary>
        </member>
        <member name="F:System.Windows.Data.FilterOperator.Contains">
            <summary>
            Left operand must contain the right one
            </summary>
        </member>
        <member name="F:System.Windows.Data.FilterOperator.IsContainedIn">
            <summary>
            Left operand must be contained in the right one
            </summary>
        </member>
        <member name="T:System.Windows.Data.GroupDescriptor">
            <summary>
            Describes a group criteria
            </summary>
        </member>
        <member name="M:System.Windows.Data.GroupDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Data.GroupDescriptor"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Data.GroupDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Data.GroupDescriptor"/> class.
            </summary>
            <param name="propertyPath">Populates the Value property of the underlying Parameter object</param>
        </member>
        <member name="E:System.Windows.Data.GroupDescriptor.PropertyChanged">
            <summary>
            INotifyPropertyChange's event
            </summary>
        </member>
        <member name="P:System.Windows.Data.GroupDescriptor.PropertyExpression">
            <summary>
            Gets or sets a value for the PropertyExpression
            </summary>
        </member>
        <member name="P:System.Windows.Data.GroupDescriptor.PropertyPath">
            <summary>
            Gets or sets the public property used to group
            </summary>
        </member>
        <member name="T:System.Windows.Data.GroupDescriptorCollection">
            <summary>
            Collection of group descriptions that raises notification for both collection
            and item changes
            </summary>
        </member>
        <member name="M:System.Windows.Data.GroupDescriptorCollection.ClearItems">
            <summary>
            Called by the base class when all items are cleared
            </summary>
        </member>
        <member name="M:System.Windows.Data.GroupDescriptorCollection.InsertItem(System.Int32,System.Windows.Data.GroupDescriptor)">
            <summary>
            Called by the base class when an item is inserted
            </summary>
            <param name="index">The index at which to insert the <paramref name="item"/>.</param>
            <param name="item">The <see cref="T:System.Windows.Data.GroupDescriptor"/> item to insert.</param>
        </member>
        <member name="M:System.Windows.Data.GroupDescriptorCollection.RemoveItem(System.Int32)">
            <summary>
            Called by the base class when an item is removed
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:System.Windows.Data.GroupDescriptorCollection.SetItem(System.Int32,System.Windows.Data.GroupDescriptor)">
            <summary>
            Called by the base class when an item is replaced
            </summary>
            <param name="index">The index of the item to set.</param>
            <param name="item">The <see cref="T:System.Windows.Data.GroupDescriptor"/> item to set.</param>
        </member>
        <member name="T:System.Windows.Data.ParameterCollection">
            <summary>
            Class that represents a collection of Parameter objects
            </summary>
        </member>
        <member name="M:System.Windows.Data.ParameterCollection.ClearItems">
            <summary>
            Called by the base class when all items are cleared
            </summary>
        </member>
        <member name="M:System.Windows.Data.ParameterCollection.InsertItem(System.Int32,System.Windows.Data.Parameter)">
            <summary>
            Called by the base class when an item is inserted.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:System.Windows.Data.ParameterCollection.RemoveItem(System.Int32)">
            <summary>
            Called by the base class when an item is removed.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:System.Windows.Data.ParameterCollection.SetItem(System.Int32,System.Windows.Data.Parameter)">
            <summary>
            Called by the base class when an item is replaced
            </summary>
            <param name="index">The index at which to set the item.</param>
            <param name="item">The item to set.</param>
        </member>
        <member name="T:System.Windows.Data.ParameterTypeConverter">
            <summary>
            Converts a String type to a Parameter type.
            </summary>
        </member>
        <member name="M:System.Windows.Data.ParameterTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given
            type to the type of this converter
            </summary>
            <param name="context">Conversion context</param>
            <param name="sourceType">A type that represents the type that you want to convert from</param>
            <returns>
            true if sourceType is a String type or a Parameter type that can be
            assigned from sourceType; otherwise, false
            </returns>
        </member>
        <member name="M:System.Windows.Data.ParameterTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object to a Parameter
            </summary>
            <param name="context">Conversion context</param>
            <param name="culture">Culture to use in the conversion</param>
            <param name="value">Object to convert into a Type</param>
            <returns>Result of the conversion</returns>
        </member>
        <member name="M:System.Windows.Data.ParameterTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this type converter can convert to the specified destination type
            </summary>
            <param name="context">Conversion context</param>
            <param name="destinationType">Destination type</param>
            <returns>Result of the conversion</returns>
        </member>
        <member name="M:System.Windows.Data.ParameterTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the provided value to the destination type
            </summary>
            <param name="context">Conversion context</param>
            <param name="culture">Culture to use in the conversion</param>
            <param name="value">Value to convert</param>
            <param name="destinationType">Destination type</param>
            <returns>Result of the conversion</returns>
        </member>
        <member name="T:System.Windows.Controls.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resources.ControlNotFound">
            <summary>
              Looks up a localized string similar to No control with the provided name &apos;{0}&apos; can be found..
            </summary>
        </member>
        <member name="T:System.Windows.Data.SortDescriptor">
            <summary>
            Describes a sort criteria
            </summary>
        </member>
        <member name="M:System.Windows.Data.SortDescriptor.#ctor">
            <summary>
            Default parameterless constructor
            </summary>
        </member>
        <member name="M:System.Windows.Data.SortDescriptor.#ctor(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Constructor that creates a Parameter instance and sets its
            Value property to the provided propertyPath.
            </summary>
            <param name="propertyPath">Populates the Value property of the underlying Parameter object</param>
            <param name="direction">Populates the Direction property</param>
        </member>
        <member name="M:System.Windows.Data.SortDescriptor.ResetOriginalValue">
            <summary>
            Clears the original values stored for <see cref="P:System.Windows.Data.SortDescriptor.Direction"/> and <see cref="P:System.Windows.Data.SortDescriptor.PropertyPath"/>
            and sets <see cref="P:System.Windows.Data.SortDescriptor.HasOriginalValue"/> to <c>false</c>.
            </summary>
        </member>
        <member name="M:System.Windows.Data.SortDescriptor.RestoreOriginalValue">
            <summary>
            Restores the <see cref="P:System.Windows.Data.SortDescriptor.Direction"/> and <see cref="P:System.Windows.Data.SortDescriptor.PropertyPath"/> properties
            to the original values stored during the last call to <see cref="M:System.Windows.Data.SortDescriptor.StoreOriginalValue"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Data.SortDescriptor.StoreOriginalValue">
            <summary>
            Stores the <see cref="P:System.Windows.Data.SortDescriptor.Direction"/> and <see cref="P:System.Windows.Data.SortDescriptor.PropertyPath"/> as original values
            such that <see cref="M:System.Windows.Data.SortDescriptor.RestoreOriginalValue"/> would restore those properties.
            </summary>
        </member>
        <member name="E:System.Windows.Data.SortDescriptor.PropertyChanged">
            <summary>
            INotifyPropertyChange's event
            </summary>
        </member>
        <member name="P:System.Windows.Data.SortDescriptor.Direction">
            <summary>
            Gets or sets the sort direction: Ascending or Descending
            </summary>
        </member>
        <member name="P:System.Windows.Data.SortDescriptor.HasOriginalValue">
            <summary>
            Determines whether the <see cref="T:System.Windows.Data.SortDescriptor"/> has an original value stored
            that could be restored through <see cref="M:System.Windows.Data.SortDescriptor.RestoreOriginalValue"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Data.SortDescriptor.PropertyExpression">
            <summary>
            The <see cref="T:System.Linq.Expressions.Expression"/> that results from this <see cref="T:System.Windows.Data.SortDescriptor"/> being parsed.
            </summary>
        </member>
        <member name="P:System.Windows.Data.SortDescriptor.PropertyPath">
            <summary>
            Gets or sets the public property used to sort
            </summary>
        </member>
        <member name="T:System.Windows.Data.SortDescriptorCollection">
            <summary>
            Collection of sort descriptions that raises notification for both collection
            and item changes.
            </summary>
        </member>
        <member name="M:System.Windows.Data.SortDescriptorCollection.ClearItems">
            <summary>
            Called by the base class when all items are cleared.
            </summary>
        </member>
        <member name="M:System.Windows.Data.SortDescriptorCollection.InsertItem(System.Int32,System.Windows.Data.SortDescriptor)">
            <summary>
            Called by the base class when an item is inserted.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:System.Windows.Data.SortDescriptorCollection.RemoveItem(System.Int32)">
            <summary>
            Called by the base class when an item is removed.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:System.Windows.Data.SortDescriptorCollection.SetItem(System.Int32,System.Windows.Data.SortDescriptor)">
            <summary>
            Called by the base class when an item is replaced.
            </summary>
            <param name="index">The index to set.</param>
            <param name="item">The item to set.</param>
        </member>
        <member name="T:System.Windows.Controls.SubmittedChangesEventArgs">
            <summary>
            Event arguments for a completed submit operation
            </summary>
        </member>
        <member name="M:System.Windows.Controls.SubmittedChangesEventArgs.#ctor(System.Windows.Ria.EntityChangeSet,System.Collections.Generic.IEnumerable{System.Windows.Ria.Entity},System.Exception,System.Boolean)">
            <summary>
            Public constructor
            </summary>
            <param name="changeSet">The changeset that was submitted.</param>
            <param name="entitiesInError">The list of entities that were in error.</param>
            <param name="error"><see cref="T:System.Exception"/> for the submit operation if it failed.</param>
            <param name="canceled"><c>true</c> if the submit operation was canceled, <c>false</c> otherwise.</param>
        </member>
        <member name="M:System.Windows.Controls.SubmittedChangesEventArgs.MarkErrorAsHandled">
            <summary>
            For an operation in error, this method marks the error as handled. If this method is
            not called for a failed operation, an exception will be thrown.
            </summary>
            <exception cref="T:System.InvalidOperationException"> is thrown if <see cref="P:System.Windows.Controls.SubmittedChangesEventArgs.HasError"/> <c>false</c>.</exception>
        </member>
        <member name="P:System.Windows.Controls.SubmittedChangesEventArgs.ChangeSet">
            <summary>
            Gets the <see cref="T:System.Windows.Ria.EntityChangeSet"/> that was submitted
            </summary>
        </member>
        <member name="P:System.Windows.Controls.SubmittedChangesEventArgs.EntitiesInError">
            <summary>
            Gets the entities that caused the submit operation to fail.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.SubmittedChangesEventArgs.HasError">
            <summary>
            Gets a value indicating whether the operation has failed. If
            true, inspect the Error property for details.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.SubmittedChangesEventArgs.IsErrorHandled">
            <summary>
            Gets or sets a value indicating whether the operation error has been marked as
            handled by calling <see cref="M:System.Windows.Controls.SubmittedChangesEventArgs.MarkErrorAsHandled"/>.
            </summary>
        </member>
    </members>
</doc>
