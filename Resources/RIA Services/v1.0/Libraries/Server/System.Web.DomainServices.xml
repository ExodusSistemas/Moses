<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Web.DomainServices</name>
    </assembly>
    <members>
        <member name="T:System.Web.DomainServices.DomainException">
            <summary>
            This exception indicates that an unrecoverable error has occurred 
            during the execution of a domain operation.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.DomainException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.DomainException.#ctor(System.String)">
            <summary>
            Constructor that accepts a localized exception message.
            </summary>
            <param name="message">The localized exception message.</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainException.#ctor(System.String,System.Int32)">
            <summary>
            Constructor that accepts a localized exception message and a custom error code.
            </summary>
            <param name="message">The localized exception message.</param>
            <param name="errorCode">The custom error code for the exception.</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor that accepts a localized exception message and an inner exception.
            </summary>
            <param name="message">The localized exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Constructor that accepts a localized exception message and an inner exception
            </summary>
            <param name="message">The localized exception message</param>
            <param name="errorCode">The custom error code for the exception</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor that takes serialization info
            </summary>
            <param name="info">The serialization info</param>
            <param name="context">The streaming context used for serialization</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable implementation
            </summary>
            <param name="info">The serialization info</param>
            <param name="context">The streaming context used for serialization</param>
        </member>
        <member name="P:System.Web.DomainServices.DomainException.ErrorCode">
            <summary>
            Gets or sets the custom error code for this exception. Can be any user
            defined value.
            </summary>
        </member>
        <member name="T:System.Web.Ria.Data.DomainIdentifierAttribute">
            <summary>
            A tagging attribute used to categorize a Type as being of a particular domain.
            </summary>
            <remarks>This attribute will move through the metadata pipeline, so the corresponding
            generated types will also have this attribute. This attribute also allows for specification 
            of a <see cref="P:System.Web.Ria.Data.DomainIdentifierAttribute.CodeProcessor"/> which will be used during generation of client types.
            </remarks>
            <seealso cref="P:System.Web.Ria.Data.DomainIdentifierAttribute.CodeProcessor"/>
        </member>
        <member name="M:System.Web.Ria.Data.DomainIdentifierAttribute.#ctor(System.String)">
            <summary>
            Constructor that accepts the domain identifier name.
            </summary>
            <param name="name">Name of the domain identifier. This string has no framework-level semantics.  It is entirely
            up to the application developer to decide what constitutes uniqueness or whether it is case-sensitive.
            It cannot be null or empty.</param>
        </member>
        <member name="M:System.Web.Ria.Data.DomainIdentifierAttribute.GetHashCode">
            <summary>
            Override of the default <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <remarks>This override exists to circumvent the base class implementation that uses private Reflection and cannot work in partial trust.</remarks>
            <returns>The has code.</returns>
        </member>
        <member name="M:System.Web.Ria.Data.DomainIdentifierAttribute.Equals(System.Object)">
            <summary>
            Override of <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <remarks>This override exists to circumvent the base class implementation that uses private Reflection and cannot work in partial trust.</remarks>
            <param name="obj">The object to compare to the current object.</param>
            <returns><c>true</c> if <paramref name="obj"/> is equal to the current object.</returns>
        </member>
        <member name="P:System.Web.Ria.Data.DomainIdentifierAttribute.Name">
            <summary>
            Gets the name of the domain identifier.
            </summary>
            <exception cref="T:System.InvalidOperationException"> is thrown from the getter if <see cref="P:System.Web.Ria.Data.DomainIdentifierAttribute.Name"/>
            is null or empty.</exception>
        </member>
        <member name="P:System.Web.Ria.Data.DomainIdentifierAttribute.CodeProcessor">
            <summary>
            Gets or sets the <see cref="P:System.Web.Ria.Data.DomainIdentifierAttribute.CodeProcessor"/> type
            </summary>
        </member>
        <member name="P:System.Web.Ria.Data.DomainIdentifierAttribute.TypeId">
            <summary>
            Gets a unique identifier for this DomainIdentifierAttribute.
            </summary>
        </member>
        <member name="T:System.Web.Ria.Data.ExternalReferenceAttribute">
            <summary>
            When applied to an entity association member, this attribute indicates that the framework should not
            create a corresponding EntitySet in the generated client-side code output.  Consumers of the
            client-side property will need to add a DomainContext reference to the appropriate DomainContext
            containing the external entity type.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.ValidationUtilities.CreateValidationContext(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Creates a new <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext"/> for the current object instance.
            </summary>
            <param name="instance">The object instance being validated.</param>
            <param name="parentContext">Optional context to inherit from.  May be null.</param>
            <returns>A new validation context.</returns>
        </member>
        <member name="M:System.Web.DomainServices.ValidationUtilities.TryValidateMethodCall(System.String,System.ComponentModel.DataAnnotations.ValidationContext,System.Object[],System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Determines whether it is valid to call the specified method.
            </summary>
            <remarks>
            This method evaluates all <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>s associated with the method and its parameters.  Any failure returns <c>false</c>.
            </remarks>
            <param name="methodName">The name of the method to be called</param>
            <param name="validationContext">Describes the method being tested</param>
            <param name="parameters">The parameter values to be passed to the method.  They will be validated.</param>
            <param name="validationResults">Optional collection to receive validation results for failed validations.</param>
            <returns><c>true</c> if the method is valid.</returns>
        </member>
        <member name="M:System.Web.DomainServices.ValidationUtilities.ValidateMethodCall(System.String,System.ComponentModel.DataAnnotations.ValidationContext,System.Object[])">
            <summary>
            Throws a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> if it is not valid to call the specified method.
            </summary>
            <remarks>This method evaluates all the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>s associated with the
            method and its parameters. Any failure will cause the exception to be thrown.
            </remarks>
            <param name="methodName">The name of the method to be called</param>
            <param name="validationContext">Describes the method being called.</param>
            <param name="parameters">The parameter values to be passed to the method.  They will be validated.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="validationContext"/> is null</exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"> When it is not valid to call the specified method</exception>
        </member>
        <member name="M:System.Web.DomainServices.ValidationUtilities.GetMethod(System.Object,System.String,System.Object[])">
            <summary>
            Internal helper method for getting a method from an object instance that matches
            the specified parameters.
            </summary>
            <param name="instance">Object instance on which the method will be called</param>
            <param name="methodName">The name of the method to be called</param>
            <param name="parameters">The parameter values to be passed to the method</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> from an object instance that matches
            the specified parameters.</returns>
        </member>
        <member name="M:System.Web.DomainServices.ValidationUtilities.IsBindable(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Checks whether the specified set of parameters can be passed to the specified method.
            </summary>
            <param name="method">The method to validate the set of parameters against.</param>
            <param name="parameters">The set of parameters to check.</param>
            <returns><c>true</c> if the set of parameters can be passed to the specified method.</returns>
        </member>
        <member name="M:System.Web.DomainServices.ValidationUtilities.TryValidateMethodCall(System.Reflection.MethodInfo,System.ComponentModel.DataAnnotations.ValidationContext,System.Object[],System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Determines whether it is valid to call the specified method.
            </summary>
            <remarks>
            This method evaluates all <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>s associated with the method and its parameters.  Any failure returns <c>false</c>.
            </remarks>
            <param name="method">The method to be called</param>
            <param name="validationContext">Describes the method being tested</param>
            <param name="parameters">The parameter values to be passed to the method.  They will be validated.</param>
            <param name="validationResults">Optional collection to receive validation results for failed validations.</param>
            <returns><c>true</c> if the method is valid.</returns>
        </member>
        <member name="M:System.Web.DomainServices.ValidationUtilities.GetDisplayAttribute(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Gets the DisplayAttribute that applies to a method, parameter, property, etc.
            </summary>
            <param name="member">A <see cref="T:System.Reflection.ICustomAttributeProvider"/> member to query for <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/>s.</param>
            <returns>A <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/> found or <c>null</c> if none is found</returns>
        </member>
        <member name="M:System.Web.DomainServices.Utility.IsPropertyReadOnly(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns true if the specified property is read-only by virtue of having
            an appropriately configured ReadOnlyAttribute or EditableAttribute applied.
            </summary>
            <param name="property">The property to check for editability.</param>
            <returns>True if the specified property is read-only, false otherwise.</returns>
        </member>
        <member name="M:System.Web.DomainServices.Utility.IsPropertyReadOnly(System.Reflection.PropertyInfo)">
            <summary>
            Returns true if the specified property is read-only by virtue of having
            an appropriately configured <see cref="T:System.ComponentModel.DataAnnotations.EditableAttribute"/> applied.
            </summary>
            <param name="property">The property to check for editability.</param>
            <returns><c>true</c> if the specified property is read-only; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Web.DomainServices.Utility.IsNullableType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is a <see cref="T:System.Nullable"/>
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the given type is a nullable type</returns>
        </member>
        <member name="M:System.Web.DomainServices.Utility.GetNonNullableType(System.Type)">
            <summary>
            If the given type is <see cref="T:System.Nullable"/>, returns the element type,
            otherwise simply returns the input type
            </summary>
            <param name="type">The type to test that may or may not be Nullable</param>
            <returns>Either the input type or, if it was Nullable, its element type</returns>
        </member>
        <member name="M:System.Web.DomainServices.Utility.IsPredefinedType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is a primitive type or one
            of our standard acceptable simple types, such as <see cref="T:System.String"/>,
            <see cref="T:System.Guid"/>, or one of our standard generic types whose generic
            argument is primitive or simple (e.g. Nullable, IEnumerable, IDictionary&lt;TKey,TValue&gt;).
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the type is a primitive or standard acceptable types</returns>
        </member>
        <member name="M:System.Web.DomainServices.Utility.IsPredefinedListType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is <see cref="T:System.Collections.Generic.IEnumerable`1"/> or an <see cref="T:System.Collections.IList"/> type, 
            and is either an interface, an array, or has a default constructor.
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the type is a primitive or standard acceptable types</returns>
        </member>
        <member name="M:System.Web.DomainServices.Utility.IsPredefinedDictionaryType(System.Type)">
            <summary>
            Returns <c>true</c> if <paramref name="type"/> implements <see cref="T:System.Collections.Generic.IDictionary`2"/> and
            its generic type arguments are acceptable predefined simple types.
            </summary>
            <param name="type">The type to test.</param>
            <returns><c>true</c> if the type is a <see cref="T:System.Collections.Generic.IDictionary`2"/> with supported generic type arguments.</returns>
        </member>
        <member name="M:System.Web.DomainServices.Utility.GetDictionaryGenericArgumentTypes(System.Type)">
            <summary>
            Returns an array of types that represent the generic type arguments used in <paramref name="type"/>'s
            implementation of <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="type">The type to examine.</param>
            <returns>An array of types that represent the generic type arguments used in <paramref name="type"/>'s
            implementation of <see cref="T:System.Collections.Generic.IDictionary`2"/>. Returns null if <paramref name="type"/> does 
            not implement <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
        </member>
        <member name="M:System.Web.DomainServices.Utility.IsPredefinedSimpleType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is either primitive or one of our
            standard acceptable simple types, such as <see cref="T:System.String"/>,
            <see cref="T:System.Guid"/>, etc
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the type is a primitive or standard acceptable types</returns>
        </member>
        <member name="M:System.Web.DomainServices.Utility.GetElementType(System.Type)">
            <summary>
            Returns the underlying element type starting from a given type.
            </summary>
            <remarks>
            Simple types simply return the input type.
            If the given type is an array, this method returns the array's
            element type.
            If the type is a generic type of <see cref="T:System.Collections.IEnumerable"/>, 
            or <see cref="T:System.Nullable"/>, this method returns the element
            type of the generic parameter
            </remarks>
            <param name="type"><see cref="T:System.Type"/> to examine.</param>
            <returns>The underlying element type starting from the given type</returns>
        </member>
        <member name="M:System.Web.DomainServices.Utility.GetClientType(System.Type)">
            <summary>
            Gets the type that should be used on the client for the specified type.
            </summary>
            <param name="t">The type to get the client type for.</param>
            <returns>The client type.</returns>
        </member>
        <member name="M:System.Web.DomainServices.Utility.GetClientValue(System.Type,System.Object)">
            <summary>
            Gets a value that can be used by the client.
            </summary>
            <param name="targetType">The type used by the client.</param>
            <param name="value">The value on the server.</param>
            <returns>A value that can be used by the client.</returns>
        </member>
        <member name="M:System.Web.DomainServices.Utility.GetServerValue(System.Type,System.Object)">
            <summary>
            Gets a value that can be used by the server.
            </summary>
            <param name="targetType">The type used by the server.</param>
            <param name="value">The value from the client.</param>
            <returns>A value that can be used by the server.</returns>
        </member>
        <member name="M:System.Web.DomainServices.Utility.IsByVal(System.Web.DomainServices.DomainOperationParameter)">
            <summary>
            Checks whether a parameter expects a value to be passed by-value.
            </summary>
            <param name="parameter">The parameter to check.</param>
            <returns>True if the parameter expects a by-value value.</returns>
        </member>
        <member name="M:System.Web.DomainServices.Utility.IsSerializableDataMember(System.ComponentModel.PropertyDescriptor,System.Boolean)">
            <summary>
            Returns true if the specified property is a data member that should be serialized
            </summary>
            <param name="propertyDescriptor">The property to inspect</param>
            <param name="isEntity">True if the specified property is defined on an Entity</param>
            <returns>true if the specified property is a data member that should be serialized</returns>
        </member>
        <member name="M:System.Web.DomainServices.Utility.GetSerializableProperties(System.Type,System.Boolean)">
            <summary>
            Returns the set of serializable properties for the specified Type.
            </summary>
            <param name="type">The Type to get properties for.</param>
            <param name="isEntity">True if the specified property is defined on an Entity</param>
            <returns>The set of serializable properties.</returns>
        </member>
        <member name="M:System.Web.DomainServices.Utility.DefinitionIsAssignableFrom(System.Type,System.Type)">
            <summary>
            Determines whether the generic type definition is assignable from the derived type.
            </summary>
            <remarks>
            This behaves just like <see cref="M:System.Type.IsAssignableFrom(System.Type)"/> except that it determines
            whether any generic type that can be made from the <paramref name="genericTypeDefinition"/>
            is assignable from <paramref name="derivedType"/>.
            </remarks>
            <param name="genericTypeDefinition">The generic type definition</param>
            <param name="derivedType">The type to determine assignability from</param>
            <returns>Whether the type definition is assignable from the derived type</returns>
        </member>
        <member name="M:System.Web.DomainServices.Utility.DefinitionIsAssignableFrom(System.Type,System.Type,System.Type@)">
            <summary>
            Determines whether the generic type definition is assignable from the derived type.
            </summary>
            <remarks>
            This behaves just like <see cref="M:System.Type.IsAssignableFrom(System.Type)"/> except that it determines
            whether any generic type that can be made from the <paramref name="genericTypeDefinition"/>
            is assignable from <paramref name="derivedType"/>.
            </remarks>
            <param name="genericTypeDefinition">The generic type definition</param>
            <param name="derivedType">The type to determine assignability from</param>
            <param name="genericType">The generic base class or interface implemented by the derived
            type that can be made from the <paramref name="genericTypeDefinition"/>. This value is
            null when the method return false.
            </param>
            <returns>Whether the type definition is assignable from the derived type</returns>
        </member>
        <member name="T:System.Web.DomainServices.UriEqualityComparer">
            <summary>
            This class is for comparing Uris correctly
            </summary>
        </member>
        <member name="T:System.Web.Ria.Data.OperationError">
            <summary>
            The data contract of an error that has occurred 
            during the execution of an operation on the server.
            This is sent back along with the domain operation 
            result(s) to the client.
            </summary>
        </member>
        <member name="M:System.Web.Ria.Data.OperationError.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:System.Web.Ria.Data.OperationError.#ctor(System.String,System.String)">
            <summary>
            Constructor accepting an optional localized error message
            </summary>
            <param name="message">The localized error message</param>
            <param name="sourceMemberName">The name of the member the error originated from.</param>
        </member>
        <member name="M:System.Web.Ria.Data.OperationError.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor accepting an optional localized error message and and collection 
            of the names of the members the error originated from.
            </summary>
            <param name="message">The localized message</param>
            <param name="sourceMemberNames">A collection of the names of the members the error originated from.</param>
        </member>
        <member name="M:System.Web.Ria.Data.OperationError.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Constructor accepting an optional localized error message, error code, stack trace,
            and name of the member the error originated from.
            </summary>
            <param name="message">The localized error message</param>
            <param name="errorCode">The custom error code</param>
            <param name="stackTrace">The error stack trace</param>
            <param name="sourceMemberName">The name of the member the error originated from.</param>
        </member>
        <member name="M:System.Web.Ria.Data.OperationError.#ctor(System.String,System.Int32,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor accepting an optional localized error message, error code, stack trace,
            and collection of the names of the members the error originated from.
            </summary>
            <param name="message">The localized error message</param>
            <param name="errorCode">The custom error code</param>
            <param name="stackTrace">The error stack trace</param>
            <param name="sourceMemberNames">A collection of the names of the members the error originated from.</param>
        </member>
        <member name="M:System.Web.Ria.Data.OperationError.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>The hash code for this object.</returns>
        </member>
        <member name="M:System.Web.Ria.Data.OperationError.System#IEquatable{System#Web#Ria#Data#OperationError}#Equals(System.Web.Ria.Data.OperationError)">
            <summary>
            Test the current instance against the specified instance for equality
            </summary>
            <param name="other">The OperationError to compare to</param>
            <returns>True if the instances are equal, false otherwise</returns>
        </member>
        <member name="P:System.Web.Ria.Data.OperationError.Message">
            <summary>
            Gets or sets the error message
            </summary>
        </member>
        <member name="P:System.Web.Ria.Data.OperationError.ErrorCode">
            <summary>
            Gets or sets custom error code
            </summary>
        </member>
        <member name="P:System.Web.Ria.Data.OperationError.StackTrace">
            <summary>
            Gets or sets the stack trace of the error
            </summary>
        </member>
        <member name="P:System.Web.Ria.Data.OperationError.SourceMemberNames">
            <summary>
            Gets or sets the names of the members the error originated from.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.ChangeOperation">
            <summary>
            Enumeration of the types of update operations that
            can be performed on an object.
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.ChangeOperation.None">
            <summary>
            No update to perform
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.ChangeOperation.Insert">
            <summary>
            An Insert operation
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.ChangeOperation.Update">
            <summary>
            An Update operation
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.ChangeOperation.Delete">
            <summary>
            A Delete operation
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.CodeProcessor">
            <summary>
            Base class for all <see cref="T:System.Web.DomainServices.CodeProcessor"/> implementations. By associating a <see cref="T:System.Web.DomainServices.CodeProcessor"/> Type
            with a <see cref="T:System.Web.DomainServices.DomainService"/> Type via the <see cref="T:System.Web.Ria.Data.DomainIdentifierAttribute"/>, codegen for the service
            Type can be customized.
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.CodeProcessor._codeDomProvider">
            <summary>
            Private reference to the <see cref="P:System.Web.DomainServices.CodeProcessor.CodeDomProvider"/> used during <see cref="T:System.Web.DomainServices.DomainService"/> code generation.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.CodeProcessor.#ctor(System.CodeDom.Compiler.CodeDomProvider)">
            <summary>
            Default constructor.
            </summary>
            <param name="codeDomProvider">The <see cref="P:System.Web.DomainServices.CodeProcessor.CodeDomProvider"/> used during <see cref="T:System.Web.DomainServices.DomainService"/> code generation.</param>
        </member>
        <member name="M:System.Web.DomainServices.CodeProcessor.ProcessGeneratedCode(System.Web.DomainServices.DomainServiceDescription,System.CodeDom.CodeCompileUnit,System.Collections.Generic.IDictionary{System.Type,System.CodeDom.CodeTypeDeclaration})">
            <summary>
            Invoked after code generation of the current <see cref="T:System.Web.DomainServices.DomainService"/> has completed, allowing for post processing of the <see cref="T:System.CodeDom.CodeCompileUnit"/>.
            </summary>
            <param name="domainServiceDescription">The <see cref="T:System.Web.DomainServices.DomainServiceDescription"/> describing the <see cref="T:System.Web.DomainServices.DomainService"/> currently being examined.</param>
            <param name="codeCompileUnit">The <see cref="T:System.CodeDom.CodeCompileUnit"/> that the <see cref="T:System.Web.DomainServices.DomainService"/> client code is being generated into.</param>
            <param name="typeMapping">A dictionary mapping <see cref="T:System.Web.DomainServices.DomainService"/> and related entity types to their corresponding <see cref="T:System.CodeDom.CodeTypeDeclaration"/>s.</param>
        </member>
        <member name="P:System.Web.DomainServices.CodeProcessor.CodeDomProvider">
            <summary>
            The <see cref="P:System.Web.DomainServices.CodeProcessor.CodeDomProvider"/> used during <see cref="T:System.Web.DomainServices.DomainService"/> code generation.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.ChangeSet">
            <summary>
            Represents a set of changes to be processed by a <see cref="T:System.Web.DomainServices.DomainService"/>.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.ChangeSet.#ctor(System.Collections.Generic.IEnumerable{System.Web.DomainServices.ChangeSetEntry})">
            <summary>
            Public constructor.
            </summary>
            <param name="changeSetEntries">The set of <see cref="T:System.Web.DomainServices.ChangeSetEntry"/>s this <see cref="T:System.Web.DomainServices.ChangeSet"/> represents.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="changeSetEntries"/> is null.</exception>
        </member>
        <member name="M:System.Web.DomainServices.ChangeSet.ValidateChangeSetEntries(System.Collections.Generic.IEnumerable{System.Web.DomainServices.ChangeSetEntry})">
            <summary>
            Validates that the specified entries are well formed.
            </summary>
            <param name="changeSetEntries">The changeset entries to validate.</param>
        </member>
        <member name="M:System.Web.DomainServices.ChangeSet.ValidateAssociationMap(System.Type,System.Collections.Generic.HashSet{System.Int32},System.Collections.Generic.IDictionary{System.String,System.Int32[]})">
            <summary>
            Validates the specified association map.
            </summary>
            <param name="entityType">The entity type the association is on.</param>
            <param name="idSet">The set of all unique Ids in the changeset.</param>
            <param name="associationMap">The association map to validate.</param>
        </member>
        <member name="M:System.Web.DomainServices.ChangeSet.Replace``1(``0,``0)">
            <summary>
            Replaces <paramref name="clientEntity"/> with <paramref name="returnedEntity"/> in all 
            <see cref="T:System.Web.DomainServices.ChangeSetEntry"/>s contained in the <see cref="T:System.Web.DomainServices.ChangeSet"/>.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="clientEntity">The client modified entity.</param>
            <param name="returnedEntity">The server modified entity.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="clientEntity"/> or 
            <paramref name="returnedEntity"/> is null.</exception>
            <exception cref="T:System.ArgumentException">if <paramref name="clientEntity"/> is not found in 
            the <see cref="T:System.Web.DomainServices.ChangeSet"/>'s <see cref="P:System.Web.DomainServices.ChangeSet.ChangeSetEntries"/>.</exception>
        </member>
        <member name="M:System.Web.DomainServices.ChangeSet.GetOriginal``1(``0)">
            <summary>
            Returns the original unmodified entity for the provided <paramref name="clientEntity"/>.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="clientEntity">The client modified entity.</param>
            <returns>The original unmodified entity for the provided <paramref name="clientEntity"/>.</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="clientEntity"/> is null.</exception>
            <exception cref="T:System.ArgumentException">if <paramref name="clientEntity"/> is not in the change set.</exception>
        </member>
        <member name="M:System.Web.DomainServices.ChangeSet.GetChangeOperation(System.Object)">
            <summary>
            Gets the <see cref="T:System.Web.DomainServices.ChangeOperation"/> for the specified member
            of this changeset. If the changeset doesn't contain an operation
            for the object specified, 'None' is returned.
            </summary>
            <param name="entity">The entity to get the status for.</param>
            <returns>The <see cref="T:System.Web.DomainServices.ChangeOperation"/> for the specified object.</returns>
        </member>
        <member name="M:System.Web.DomainServices.ChangeSet.GetAssociatedChanges``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            For the compositional association indicated by <paramref name="expression"/>, this 
            method returns a collection of children of that association that are in this 
            <see cref="T:System.Web.DomainServices.ChangeSet"/>. The returned collection will include all children, including
            any to be deleted as well as any that are unmodified.
            </summary>
            <typeparam name="TEntity">The parent Type to get associated changes for.</typeparam>
            <typeparam name="TResult">The Type of the association member.</typeparam>
            <param name="entity">The parent instance.</param>
            <param name="expression">Expression that refers to the compositional association member. The
            member must be marked with <see cref="T:System.Web.Ria.Data.CompositionAttribute"/>.</param>
            <returns>The collection of children for the association specified.</returns>
        </member>
        <member name="M:System.Web.DomainServices.ChangeSet.GetAssociatedChanges``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Web.DomainServices.ChangeOperation)">
            <summary>
            For the compositional association indicated by <paramref name="expression"/>, this 
            method returns a collection of children of that association that are in this 
            <see cref="T:System.Web.DomainServices.ChangeSet"/>. The returned collection will include all children, including
            any to be deleted as well as any that are unmodified.
            </summary>
            <typeparam name="TEntity">The parent Type to get associated changes for.</typeparam>
            <typeparam name="TResult">The Type of the association member.</typeparam>
            <param name="entity">The parent instance.</param>
            <param name="expression">Expression that refers to the compositional association member. The
            member must be marked with <see cref="T:System.Web.Ria.Data.CompositionAttribute"/>.</param>
            <param name="operationType">The operation type to return changes for.</param>
            <returns>The collection of children for the association specified.</returns>
        </member>
        <member name="M:System.Web.DomainServices.ChangeSet.HasChildChanges(System.Object)">
            <summary>
            Determines whether there are any changes in this changeset for
            composed children of the specified entity.
            </summary>
            <param name="entity">The entity to check.</param>
            <returns>True if there are child changes, false otherwise.</returns>
        </member>
        <member name="M:System.Web.DomainServices.ChangeSet.GetAssociatedChanges(System.Object)">
            <summary>
            Returns a map of composition members to associated child operations for the specified
            entity, caching the results.
            </summary>
            <param name="entity">The entity to get associated changes for.</param>
            <returns>The map of child changes.</returns>
        </member>
        <member name="M:System.Web.DomainServices.ChangeSet.OrderChangeset(System.Collections.Generic.IEnumerable{System.Web.DomainServices.ChangeSetEntry})">
            <summary>
            Reorders the specified changeset operations to respect compositional hierarchy ordering
            rules. For compositional hierarchies, all parent operations are ordered before operations
            on their children, recursively.
            </summary>
            <param name="changeSetEntries">The changeset operations to order.</param>
            <returns>The ordered operations.</returns>
        </member>
        <member name="M:System.Web.DomainServices.ChangeSet.OrderOperations(System.Web.DomainServices.ChangeSetEntry,System.Collections.Generic.Dictionary{System.Web.DomainServices.ChangeSetEntry,System.Collections.Generic.List{System.Web.DomainServices.ChangeSetEntry}},System.Collections.Generic.List{System.Web.DomainServices.ChangeSetEntry})">
            <summary>
            Recursively orders the specified operation and all child operations, adding them to the
            <paramref name="orderedOperations"/> list.
            </summary>
            <param name="operation">The operation to order.</param>
            <param name="operationChildMap">Map of operation to child operations.</param>
            <param name="orderedOperations">The list of ordered operations.</param>
        </member>
        <member name="M:System.Web.DomainServices.ChangeSet.Associate``2(``0,``1,System.Action{``0,``1})">
            <summary>
            Associates a given entity with a store entity.  This method is intended for use by scenarios where a
            client entity may represent a projection of one or multiple data store entities.
            </summary>
            <typeparam name="TEntity">The client entity type.</typeparam>
            <typeparam name="TStoreEntity">The data store entity type.</typeparam>
            <param name="clientEntity">The client entity.</param>
            <param name="storeEntity">The data store entity.</param>
            <param name="storeToClientTransform">The entity transform. This delegate will be invoked after the <see cref="T:System.Web.DomainServices.ChangeSet"/> has
            been successfully submitted and is intended to flow <paramref name="storeEntity"/> values back to the
            <paramref name="entity"/>.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="clientEntity"/>, <paramref name="storeEntity"/> or 
            <paramref name="storeToClientTransform"/> is null.</exception>
        </member>
        <member name="M:System.Web.DomainServices.ChangeSet.GetAssociatedEntities``2(``1)">
            <summary>
            Returns a collection of presentation model entities of the given type associated 
            with a given data store client entity.
            </summary>
            <typeparam name="TEntity">The client entity type.</typeparam>
            <typeparam name="TStoreEntity">The data store entity type.</typeparam>
            <param name="storeEntity">The data store entity.</param>
            <returns>Returns a collection of presentation model entities.</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="storeEntity"/> is null.</exception>
        </member>
        <member name="M:System.Web.DomainServices.ChangeSet.ApplyAssociatedStoreEntityTransforms">
            <summary>
            Applies all entity transformation actions registered using the <see cref="M:System.Web.DomainServices.ChangeSet.Associate``2(``0,``1,System.Action{``0,``1})"/> method.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.ChangeSet.CommitReplacedEntities">
            <summary>
            Updates the current changeset entities with the corresponding replacement entities.
            </summary>
            <seealso cref="M:System.Web.DomainServices.ChangeSet.Replace``1(``0,``0)"/>
        </member>
        <member name="M:System.Web.DomainServices.ChangeSet.GetChangeSetEntries(System.Object)">
            <summary>
            Gets a collection of <see cref="T:System.Web.DomainServices.ChangeSetEntry"/> that affect a particular entity.
            </summary>
            <param name="clientEntity">The entity that is affected in one or more <see cref="T:System.Web.DomainServices.ChangeSetEntry"/>s.</param>
            <returns>A collection of <see cref="T:System.Web.DomainServices.ChangeSetEntry"/>s.</returns>
        </member>
        <member name="P:System.Web.DomainServices.ChangeSet.ChangeSetEntries">
            <summary>
            Gets the set of <see cref="T:System.Web.DomainServices.ChangeSetEntry"/>s this <see cref="T:System.Web.DomainServices.ChangeSet"/> represents.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.ChangeSet.HasError">
            <summary>
            Gets a value indicating whether any of the <see cref="T:System.Web.DomainServices.ChangeSetEntry"/>s has an error.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.ChangeSet.EntitiesToReplace">
            <summary>
            A dictionary containing entities (key) and associated replace entities (value) as registered by
            calling <see cref="M:System.Web.DomainServices.ChangeSet.Replace``1(``0,``0)"/>.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.ChangeSet.AssociatedStoreEntities">
            <summary>
            A dictionary containing store entities (key) and a collection of associated client entities.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.ChangeSet.AssociatedEntityInfo">
            <summary>
            Tuple used to represent a client entity and its associated transformation delegate.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.ChangeSet.AssociatedEntityInfo.#ctor(System.Object,System.Action)">
            <summary>
            Default constructor.
            </summary>
            <param name="clientEntity">The model entity.</param>
            <param name="entityTransform">The entity transform.</param>
        </member>
        <member name="M:System.Web.DomainServices.ChangeSet.AssociatedEntityInfo.ApplyTransform">
            <summary>
            Invokes the entity transform delegate and unwraps any 
            <see cref="T:System.Reflection.TargetInvocationException"/> errors encountered.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.ChangeSet.AssociatedEntityInfo.ClientEntity">
            <summary>
            Gets the client entity.
            </summary>
        </member>
        <member name="T:System.Web.Ria.Data.CompositionAttribute">
            <summary>
            Attribute applied to an association member to indicate that the
            association is a compositional relationship.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.OutputCacheLocation">
            <summary>
            Specifies the valid values for controlling the location of the output-cached HTTP response for a resource.
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.OutputCacheLocation.Any">
            <summary>
            The output cache can be located on the browser client (where the request originated), on a proxy server 
            (or any other server) participating in the request, or on the server where the request was processed.
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.OutputCacheLocation.Client">
            <summary>
            The output cache is located on the browser client where the request originated.
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.OutputCacheLocation.Downstream">
            <summary>
            The output cache can be stored in any HTTP 1.1 cache-capable devices other than the origin server. This 
            includes proxy servers and the client that made the request.
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.OutputCacheLocation.Server">
            <summary>
            The output cache is located on the Web server where the request was processed.
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.OutputCacheLocation.None">
            <summary>
            The output cache is disabled for the requested page.
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.OutputCacheLocation.ServerAndClient">
            <summary>
            The output cache can be stored only at the origin server or at the requesting client. Proxy servers are not allowed to cache the response.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.DomainOperationParameter">
            <summary>
            Represents a parameter to a domain operation
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.DomainOperationParameter.#ctor(System.String,System.Type,System.ComponentModel.AttributeCollection)">
            <summary>
            Public Constructor
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="parameterType">The Type of the parameter</param>
            <param name="attributes">The set of attributes for the parameter</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainOperationParameter.#ctor(System.String,System.Type,System.ComponentModel.AttributeCollection,System.Boolean)">
            <summary>
            Public Constructor
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="parameterType">The Type of the parameter</param>   
            <param name="attributes">The set of attributes for the parameter</param>
            <param name="isOut">Indicates whether the parameter is a out parameter</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainOperationParameter.ToString">
            <summary>
            Return a textual description of the parameter.
            </summary>
            <returns>A string representation of the DomainOperationParameter.</returns>
        </member>
        <member name="P:System.Web.DomainServices.DomainOperationParameter.Name">
            <summary>
            Gets the name of the parameter
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.DomainOperationParameter.ParameterType">
            <summary>
            Gets the Type of the parameter
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.DomainOperationParameter.Attributes">
            <summary>
            Gets the set of attributes for the parameter
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.DomainOperationParameter.IsOut">
            <summary>
            Gets a value indicating whether the parameter is an out parameter
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.DomainOperationType">
            <summary>
            The type of domain operation that is being executed.
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.DomainOperationType.Query">
            <summary>
            Indicates a query is being executed.
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.DomainOperationType.Submit">
            <summary>
            Indicates a submit is being executed.
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.DomainOperationType.Invoke">
            <summary>
            Indicates an operation is being executed.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.DomainServiceDescriptionProvider">
            <summary>
            A <see cref="T:System.Web.DomainServices.DomainServiceDescriptionProvider"/> is used to create the <see cref="T:System.Web.DomainServices.DomainServiceDescription"/> for
            a <see cref="T:System.Web.DomainServices.DomainService"/>. A provider can be declaratively associated with a service using the
            <see cref="T:System.Web.DomainServices.DomainServiceDescriptionProviderAttribute"/>.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescriptionProvider.#ctor(System.Type)">
            <summary>
            Protected Constructor
            </summary>
            <param name="domainServiceType">The <see cref="T:System.Web.DomainServices.DomainService"/> Type this provider will
            create a description for.</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescriptionProvider.GetDescription(System.Web.DomainServices.DomainServiceDescription)">
            <summary>
            Get the description for the specified <see cref="T:System.Web.DomainServices.DomainService"/> Type, composing with the
            specified base description if present.
            </summary>
            <param name="baseDescription">The base description. Might be null.</param>
            <returns>The <see cref="T:System.Web.DomainServices.DomainServiceDescription"/> for the <see cref="T:System.Web.DomainServices.DomainService"/></returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescriptionProvider.CreateDescription">
            <summary>
            Factory method used to create an empty <see cref="T:System.Web.DomainServices.DomainServiceDescription"/>.
            </summary>
            <returns>A new description.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescriptionProvider.CreateDescription(System.Web.DomainServices.DomainServiceDescription)">
            <summary>
            Factory method used to create <see cref="T:System.Web.DomainServices.DomainServiceDescription"/> based on the specified description.
            </summary>
            <param name="baseDescription">The base description.</param>
            <returns>A new description based on the base description.</returns>
        </member>
        <member name="T:System.Web.DomainServices.DomainServiceDescriptionProviderAttribute">
            <summary>
            Attribute applied to a <see cref="T:System.Web.DomainServices.DomainService"/> to specify the <see cref="T:System.Web.DomainServices.DomainServiceDescriptionProvider"/>
            for the <see cref="T:System.Web.DomainServices.DomainService"/> Type.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescriptionProviderAttribute.#ctor(System.Type)">
            <summary>
            Public Constructor
            </summary>
            <param name="domainServiceDescriptionProviderType">The <see cref="T:System.Web.DomainServices.DomainServiceDescriptionProvider"/> Type</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescriptionProviderAttribute.CreateProvider(System.Type)">
            <summary>
            This method creates an instance of the <see cref="T:System.Web.DomainServices.DomainServiceDescriptionProvider"/>. Subclasses can override this
            method to provide their own construction logic.
            </summary>
            <param name="domainServiceType">The <see cref="T:System.Web.DomainServices.DomainService"/> Type to create a description provider for.</param>
            <returns>The description provider</returns>
        </member>
        <member name="P:System.Web.DomainServices.DomainServiceDescriptionProviderAttribute.DomainServiceDescriptionProviderType">
            <summary>
            Gets the <see cref="T:System.Web.DomainServices.DomainServiceDescriptionProvider"/> Type
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.DomainServiceErrorInfo">
            <summary>
            This class contains information on an unrecoverable error that
            occurred during the processing of a <see cref="T:System.Web.DomainServices.DomainService"/> operation.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceErrorInfo.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.DomainServices.DomainServiceErrorInfo"/> class.
            </summary>
            <param name="exception">The exception that occurred.</param>
        </member>
        <member name="P:System.Web.DomainServices.DomainServiceErrorInfo.Error">
            <summary>
            Gets the exception that occurred.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.DomainTypeDescriptionProvider">
            <summary>
            Custom TypeDescriptionProvider for Types exposed by a <see cref="T:System.Web.DomainServices.DomainService"/>.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.DomainTypeDescriptionProvider.ShouldRegisterForType(System.Type)">
            <summary>
            Determines whether the specified Type uses any features requiring the
            <see cref="T:System.Web.DomainServices.DomainTypeDescriptionProvider"/> to be registered.
            </summary>
            <param name="type">The type to check.</param>
            <returns>Returns <c>true</c> if the specified Type uses any features requiring the
            <see cref="T:System.Web.DomainServices.DomainTypeDescriptionProvider"/> to be registered.</returns>
        </member>
        <member name="T:System.Web.DomainServices.DomainTypeDescriptor">
            <summary>
            Custom TypeDescriptor for domain Types exposed by a <see cref="T:System.Web.DomainServices.DomainService"/>.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.MemberProjectionPropertyDescriptor">
            <summary>
            PropertyDescriptor for a member projection.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.IDomainServiceSerializationHelper">
            <summary>
            Provides a serialization helper interface for <see cref="T:System.Web.DomainServices.DomainService"/>.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.IDomainServiceSerializationHelper.GetSerializableProperties(System.Type)">
            <summary>
            Called during the result serialization process, this method returns the base set of properties
            that are candidates for serialization. Note that the collection returned may be filtered further
            by the framework.
            </summary>
            <param name="objectType">The type of the object being serialized</param>
            <returns>The base set of properties that are candidates for serialization</returns>
        </member>
        <member name="M:System.Web.DomainServices.IDomainServiceSerializationHelper.OnSerializingObject(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Called after an object has been serialized, this method can modify the serialized state as required.
            </summary>
            <param name="target">The object being serialized</param>
            <param name="state">The serialized state of the object</param>
        </member>
        <member name="M:System.Web.DomainServices.IDomainServiceSerializationHelper.OnDeserializingObject(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Called after an object has been deserialized, this method can modify the deserialized state as required.
            </summary>
            <param name="target">The object being deserialized</param>
            <param name="state">The state used to deserialize the object</param>
        </member>
        <member name="T:System.Web.DomainServices.IgnoreOperationAttribute">
            <summary>
            Attribute applied to a <see cref="T:System.Web.DomainServices.DomainService"/> method to indicate that code generators should not infer 
            a method as a domain operation.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.OutputCacheAttribute">
            <summary>
            Provides a declarative way to enable output caching.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.OutputCacheAttribute.#ctor(System.Web.DomainServices.OutputCacheLocation)">
            <summary>
            Public constructor
            </summary>
            <param name="location">The location(s) where caching can be applied.</param>
        </member>
        <member name="M:System.Web.DomainServices.OutputCacheAttribute.#ctor(System.Web.DomainServices.OutputCacheLocation,System.Int32)">
            <summary>
            Public constructor
            </summary>
            <param name="location">The location(s) where caching can be applied.</param>
            <param name="duration">The duration in seconds for which the response should be cached.</param>
        </member>
        <member name="M:System.Web.DomainServices.OutputCacheAttribute.#ctor(System.String)">
            <summary>
            Public constructor
            </summary>
            <param name="cacheProfile">The name of the cache settings.</param>
        </member>
        <member name="P:System.Web.DomainServices.OutputCacheAttribute.CacheProfile">
            <summary>
            Gets the name of the cache settings
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.OutputCacheAttribute.Duration">
            <summary>
            Gets the duration in seconds for which the response should be cached.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.OutputCacheAttribute.Location">
            <summary>
            Gets the location(s) where caching can be applied.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.OutputCacheAttribute.UseSlidingExpiration">
            <summary>
            Gets or sets whether the duration should be a sliding expiration or an absolute expiration.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.OutputCacheAttribute.VaryByHeaders">
            <summary>
            Gets or sets the headers on which a cached response is based.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.OutputCacheAttribute.SqlCacheDependencies">
            <summary>
            Gets or sets the SQL cache dependencies.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.ReflectionDomainServiceDescriptionProvider">
            <summary>
            Default reflection based description provider that implements both the attribute
            and convention based description models.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.ReflectionDomainServiceDescriptionProvider.ClassifyDomainOperation(System.Web.DomainServices.ReflectionDomainServiceDescriptionProvider.ReflectionDomainOperationEntry)">
            <summary>
            This method classifies an operation by setting its its operation type.
            </summary>
            <remarks>Domain operations are either explicitly marked with attributes, or they follow a naming/signature convention.</remarks>
            <param name="operation">The domain operation to inspect.</param>
            <returns>True if the operation is attributed or matches convention; false otherwise.</returns>
        </member>
        <member name="M:System.Web.DomainServices.ReflectionDomainServiceDescriptionProvider.TryClassifyImplicitDomainOperation(System.Web.DomainServices.ReflectionDomainServiceDescriptionProvider.ReflectionDomainOperationEntry)">
            <summary>
            Classifies a domain operation based on naming convention.
            </summary>
            <param name="operation">The domain operation to inspect.</param>
            <returns>True if the operation matches a convention; false otherwise.</returns>
        </member>
        <member name="M:System.Web.DomainServices.ReflectionDomainServiceDescriptionProvider.IsQueryMethod(System.Web.DomainServices.DomainOperationEntry)">
            <summary>
            Returns true if the specified operation should be inferred as an
            IEnumerable or singleton returning query method.
            </summary>
            <param name="operation">The operation to inspect.</param>
            <returns>True if the operation is a query method, false otherwise.</returns>
        </member>
        <member name="M:System.Web.DomainServices.ReflectionDomainServiceDescriptionProvider.IsValidCustomMethod(System.Web.DomainServices.ReflectionDomainServiceDescriptionProvider.ReflectionDomainOperationEntry)">
            <summary>
            We need to avoid false positive convention based classification of
            Custom methods. This method verifies that candidate Custom methods
            have the correct signature.
            </summary>
            <param name="operation">The operation to inspect</param>
            <returns>True if the method has a valid signature</returns>
        </member>
        <member name="M:System.Web.DomainServices.ReflectionDomainServiceDescriptionProvider.GetDomainServiceTypeAttributes(System.Type)">
            <summary>
            This method returns a collection of attributes representing attributes on the <see cref="T:System.Web.DomainServices.DomainService"/> <see cref="T:System.Type"/>.
            </summary>
            <param name="domainServiceType">The <see cref="T:System.Web.DomainServices.DomainService"/> <see cref="T:System.Type"/>.</param>
            <returns>An <see cref="T:System.ComponentModel.AttributeCollection"/> decorated on the <see cref="T:System.Type"/> directly as well as attributes surfaced from interface
            implementations.</returns>
        </member>
        <member name="M:System.Web.DomainServices.ReflectionDomainServiceDescriptionProvider.IsInvokeOperation(System.Web.DomainServices.DomainOperationEntry)">
            <summary>
            Returns true if the specified operation should be inferred as an invoke operation.
            </summary>
            <param name="operation">The operation to inspect.</param>
            <returns>True if the operation is an invoke operation, false otherwise.</returns>
        </member>
        <member name="M:System.Web.DomainServices.ReflectionDomainServiceDescriptionProvider.MergeAttributes(System.Collections.Generic.List{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Merge attributes existing on a type and interface (implemented by type).
            Attributes that allow for multiple are aggregated.  Attributes that allow single use are
            effectively overridden by class use.  Attributes that allow single use and exist on multiple
            interfaces (but not the implementing class) are merged arbitrarily.
            </summary>
            <param name="typeAttributes">DomainService type-level attributes.</param>
            <param name="interfaceAttributes">Interface type-level attributes to merge.</param>
        </member>
        <member name="T:System.Web.DomainServices.ReflectionDomainServiceDescriptionProvider.ReflectionDomainOperationEntry">
            <summary>
            Reflection based domain operation entry
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.DomainOperationEntry">
            <summary>
            Represents a domain operation method within a DomainService
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.DomainOperationEntry.#ctor(System.Type,System.String,System.Web.DomainServices.DomainOperation,System.Type,System.Collections.Generic.IEnumerable{System.Web.DomainServices.DomainOperationParameter},System.ComponentModel.AttributeCollection)">
            <summary>
            Public constructor
            </summary>
            <param name="domainServiceType">The <see cref="T:System.Web.DomainServices.DomainService"/> Type this operation is a member of.</param>
            <param name="name">The name of the operation</param>
            <param name="operationType">The operation type</param>
            <param name="returnType">The return Type of the operation</param>
            <param name="parameters">The parameter definitions for the operation</param>
            <param name="attributes">The method level attributes for the operation</param>  
        </member>
        <member name="M:System.Web.DomainServices.DomainOperationEntry.Invoke(System.Web.DomainServices.DomainService,System.Object[])">
            <summary>
            Invokes this <see cref="T:System.Web.DomainServices.DomainOperationEntry"/>.
            </summary>
            <param name="domainService">The <see cref="T:System.Web.DomainServices.DomainService"/> instance the operation is being invoked on.</param>
            <param name="parameters">The parameters to pass to the method.</param>
            <returns>The return value of the invoked method.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainOperationEntry.Invoke(System.Web.DomainServices.DomainService,System.Object[],System.Int32@)">
            <summary>
            Invokes this <see cref="T:System.Web.DomainServices.DomainOperationEntry"/>.
            </summary>
            <param name="domainService">The <see cref="T:System.Web.DomainServices.DomainService"/> instance the operation is being invoked on.</param>
            <param name="parameters">The parameters to pass to the method.</param>
            <param name="totalCount">The total number of rows for the input query without any paging applied to it.</param>
            <returns>The return value of the invoked method.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainOperationEntry.IsAuthorized(System.Security.Principal.IPrincipal)">
            <summary>
            Determines whether the specified <see cref="T:System.Security.Principal.IPrincipal"/> has sufficient authorization to invoke
            this <see cref="T:System.Web.DomainServices.DomainOperationEntry"/>.
            </summary>
            <param name="user">The <see cref="T:System.Security.Principal.IPrincipal"/> to authorize.</param>
            <returns><c>True</c> if the operation is authorized for the specified user, <c>false</c> otherwise.</returns>
            <remarks>
            This method will use the <see cref="T:System.Web.DomainServices.AuthorizationAttribute"/>s associated with this <see cref="T:System.Web.DomainServices.DomainOperationEntry"/> as well
            as any <see cref="T:System.Web.DomainServices.AuthorizationAttribute"/>s on the <see cref="T:System.Web.DomainServices.DomainService"/> itself to determine the permissions 
            necessary to invoke the operation. If these attributes are not present, no permissions are required.
            </remarks>
        </member>
        <member name="M:System.Web.DomainServices.DomainOperationEntry.ToString">
            <summary>
            Return a textual description of the operation.
            </summary>
            <returns>A string representation of the DomainOperationEntry.</returns>
        </member>
        <member name="P:System.Web.DomainServices.DomainOperationEntry.DomainServiceType">
            <summary>
            Gets the <see cref="T:System.Web.DomainServices.DomainService"/> Type this operation is a member of.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.DomainOperationEntry.Name">
            <summary>
            Gets the name of the operation
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.DomainOperationEntry.OperationAttribute">
            <summary>
            Gets the attribute that contains metadata about the operation.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.DomainOperationEntry.Attributes">
            <summary>
            Gets the attributes for the operation
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.DomainOperationEntry.ReturnType">
            <summary>
            Gets the return Type of the operation
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.DomainOperationEntry.Parameters">
            <summary>
            Gets the parameters of the operation
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.DomainOperationEntry.Operation">
            <summary>
            Gets the type of domain operation implemented by the method.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.DomainOperationEntry.HasSideEffects">
            <summary>
            Gets a value indicating whether the query method has side-effects. Only applicable to query methods.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.DomainOperationEntry.IsComposable">
            <summary>
            Gets a value indicating whether the query method allows query composition. Only applicable to query methods.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.DomainOperationEntry.AssociatedType">
            <summary>
            Returns the associated Type this DomainOperation operates on. For query methods
            this will be the element type of the return type (or the singleton return Type),
            and for all other methods this will be the Type of the first method parameter.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.ReflectionDomainServiceDescriptionProvider.ReflectionDomainOperationEntry.#ctor(System.Type,System.Reflection.MethodInfo,System.Web.DomainServices.DomainOperation)">
            <summary>
            Creates an instance of a <see cref="T:System.Web.DomainServices.ReflectionDomainServiceDescriptionProvider.ReflectionDomainOperationEntry"/>.
            </summary>
            <param name="domainServiceType">The DomainService Type the method belongs to.</param>
            <param name="methodInfo">The MethodInfo of the method.</param>
            <param name="operationType">The operation type.</param>         
        </member>
        <member name="M:System.Web.DomainServices.ReflectionDomainServiceDescriptionProvider.ReflectionDomainOperationEntry.Invoke(System.Web.DomainServices.DomainService,System.Object[])">
            <summary>
            Invokes this <see cref="T:System.Web.DomainServices.DomainOperationEntry"/>.
            </summary>
            <param name="domainService">The <see cref="T:System.Web.DomainServices.DomainService"/> instance the operation is being invoked on.</param>
            <param name="parameters">The parameters to pass to the method.</param>
            <returns>The return value of the invoked method.</returns>
        </member>
        <member name="M:System.Web.DomainServices.ReflectionDomainServiceDescriptionProvider.ReflectionDomainOperationEntry.GetAttributeCollection(System.Reflection.MethodInfo)">
            <summary>
            Returns a collection of attributes that are defined on the <paramref name="MethodInfo"/> as well as any
            underlying interface definitions.
            </summary>
            <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo"/> to return attributes for.</param>
            <returns>A collection of attributes.</returns>
        </member>
        <member name="M:System.Web.DomainServices.ReflectionDomainServiceDescriptionProvider.ReflectionDomainOperationEntry.MergeAttributes(System.Collections.Generic.List{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Merge attributes already existing on a MethodInfo with those defined at the interface level. 
            Here, we will selectively add interface attributes if they are valid and not in conflict with
            any attributes already defined on the method.
            </summary>
            <param name="methodAttributes">Method-level attributes.</param>
            <param name="interfaceAttributes">Interface method-level attributes to merge.</param>
        </member>
        <member name="P:System.Web.DomainServices.ReflectionDomainServiceDescriptionProvider.ReflectionDomainOperationEntry.IsInferred">
            <summary>
            Gets a value indicating whether this operation was inferred, or is explicitly attributed.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.ResolveAttribute">
            <summary>
            Attribute applied to a <see cref="T:System.Web.DomainServices.DomainService"/> method to indicate that it is a resolve method.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.ResolveAttribute.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.InsertAttribute">
            <summary>
            Attribute applied to a <see cref="T:System.Web.DomainServices.DomainService"/> method to indicate that it is an insert method.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.InvokeAttribute">
            <summary>
            Attribute applied to a <see cref="T:System.Web.DomainServices.DomainService"/> method to indicate that it is an invoke operation.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.InvokeAttribute.HasSideEffects">
            <summary>
            Gets or sets a value indicating whether the invoke operation has side-effects.
            </summary>
            <remarks>
            Operations with side-effects may be invoked differently by consumers of a <see cref="T:System.Web.DomainServices.DomainService"/>. For example, 
            clients that invoke a <see cref="T:System.Web.DomainServices.DomainService"/> over HTTP may use POST requests for invoke operations with side-effects, 
            while GET may be used otherwise.
            
            The value of this property is <c>true</c> by default.
            </remarks>
        </member>
        <member name="T:System.Web.DomainServices.DeleteAttribute">
            <summary>
            Attribute applied to a <see cref="T:System.Web.DomainServices.DomainService"/> method to indicate that it is a delete method.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.UpdateAttribute">
            <summary>
            Attribute applied to a <see cref="T:System.Web.DomainServices.DomainService"/> method to indicate that it is an update method.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.UpdateAttribute.UsingCustomMethod">
            <summary>
            Gets or sets a value indicating whether the method is a custom update operation.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.QueryAttribute">
            <summary>
            Attribute applied to a <see cref="T:System.Web.DomainServices.DomainService"/> method to indicate that it is a query method.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.QueryAttribute.HasSideEffects">
            <summary>
            Gets or sets a value indicating whether the query method has side-effects.
            </summary>
            <remarks>
            Queries with side-effects may be invoked differently by consumers of a <see cref="T:System.Web.DomainServices.DomainService"/>. For example, 
            clients that invoke a <see cref="T:System.Web.DomainServices.DomainService"/> over HTTP may use POST requests for queries with side-effects, 
            while GET may be used otherwise.
            </remarks>
        </member>
        <member name="P:System.Web.DomainServices.QueryAttribute.IsComposable">
            <summary>
            Gets or sets a value indicating whether the query method allows query composition.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.RequiresRoleAttribute">
            <summary>
            Identifies a set of roles that are permitted to invoke a <see cref="T:System.Web.DomainServices.DomainOperationEntry"/>.
            </summary>
            <remarks>
            This attribute is used to specify a set of roles that are permitted to invoke a domain operation.
            The type containing the domain operation may also be marked with this attribute and
            its permission requirements will be applied to all domain operations within.
            </remarks>
        </member>
        <member name="T:System.Web.DomainServices.AuthorizationAttribute">
            <summary>
            Identifies the permissions required to invoke a <see cref="T:System.Web.DomainServices.DomainOperationEntry"/>.
            </summary>
            <seealso cref="T:System.Web.DomainServices.RequiresAuthenticationAttribute"/>
            <seealso cref="T:System.Web.DomainServices.RequiresRoleAttribute"/>
        </member>
        <member name="M:System.Web.DomainServices.AuthorizationAttribute.Authorize(System.Security.Principal.IPrincipal)">
            <summary>
            Determines whether the current <see cref="T:System.Security.Principal.IPrincipal"/> has the required permissions to invoke a <see cref="T:System.Web.DomainServices.DomainOperationEntry"/>.
            </summary>
            <param name="principal">The current <see cref="T:System.Security.Principal.IPrincipal"/>.</param>
            <returns>A Boolean indicating whether or not the <paramref name="principal"/> has the required permissions.</returns>
        </member>
        <member name="F:System.Web.DomainServices.RequiresRoleAttribute._roles">
            <summary>
            The roles to which the current user must belong before the specified <see cref="T:System.Web.DomainServices.DomainOperationEntry"/> may be invoked.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.RequiresRoleAttribute.#ctor(System.String)">
            <summary>
            Public constructor.
            </summary>
            <param name="role">The role to which the current user must belong before the <see cref="T:System.Web.DomainServices.DomainOperationEntry"/> may be invoked.</param>
        </member>
        <member name="M:System.Web.DomainServices.RequiresRoleAttribute.#ctor(System.String[])">
            <summary>
            Public constructor.
            </summary>
            <param name="roles">The set of roles permitted to invoke the <see cref="T:System.Web.DomainServices.DomainOperationEntry"/>. The
            current user must be in at least one of the roles to invoke the operation.</param>
        </member>
        <member name="M:System.Web.DomainServices.RequiresRoleAttribute.Authorize(System.Security.Principal.IPrincipal)">
            <summary>
            Determines whether the current <see cref="T:System.Security.Principal.IPrincipal"/> has appropriate permissions to invoke a <see cref="T:System.Web.DomainServices.DomainOperationEntry"/>.
            </summary>
            <param name="principal">The current <see cref="T:System.Security.Principal.IPrincipal"/>.</param>
            <returns>A Boolean indicating whether or not the <paramref name="principal"/> has the required permissions.</returns>
        </member>
        <member name="M:System.Web.DomainServices.RequiresRoleAttribute.GetHashCode">
            <summary>
            Override of the default <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <remarks>This override exists to circumvent the base class implementation that uses private Reflection and cannot work in partial trust.</remarks>
            <returns>The has code.</returns>
        </member>
        <member name="M:System.Web.DomainServices.RequiresRoleAttribute.Equals(System.Object)">
            <summary>
            Override of <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <remarks>This override exists to circumvent the base class implementation that uses private Reflection and cannot work in partial trust.</remarks>
            <param name="obj">The object to compare to the current object.</param>
            <returns><c>true</c> if <paramref name="obj"/> is equal to the current object.</returns>
        </member>
        <member name="P:System.Web.DomainServices.RequiresRoleAttribute.Roles">
            <summary>
            Gets the roles permitted to invoke the operation.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.RequiresRoleAttribute.TypeId">
            <summary>
            Gets a unique identifier for this attribute.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.RequiresAuthenticationAttribute">
            <summary>
            Identifies the authentication requirements needed to invoke a <see cref="T:System.Web.DomainServices.DomainOperationEntry"/>.
            </summary>
            <remarks>
            This attribute is used to specify the permissions required to invoke a domain operation.
            The type containing the domain operation may also be marked with this attribute and its
            permission requirements will be applied to all domain operations within.
            </remarks>
        </member>
        <member name="M:System.Web.DomainServices.RequiresAuthenticationAttribute.Authorize(System.Security.Principal.IPrincipal)">
            <summary>
            Determines whether the current <see cref="T:System.Security.Principal.IPrincipal"/> meets the authentication requirements needed to invoke a <see cref="T:System.Web.DomainServices.DomainOperationEntry"/>.
            </summary>
            <param name="principal">The current <see cref="T:System.Security.Principal.IPrincipal"/>.</param>
            <returns>A Boolean indicating whether or not the <paramref name="principal"/> is authorized.</returns>
        </member>
        <member name="T:System.Web.DomainServices.DomainOperation">
            <summary>
            Enumeration of the types of operations a <see cref="T:System.Web.DomainServices.DomainService"/> can perform.
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.DomainOperation.None">
            <summary>
            Indicates that no operation is to be performed
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.DomainOperation.Query">
            <summary>
            Indicates a query operation
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.DomainOperation.Insert">
            <summary>
            Indicates an operation that inserts new data
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.DomainOperation.Update">
            <summary>
            Indicates an operation that updates existing data
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.DomainOperation.Delete">
            <summary>
            Indicates an operation that deletes existing data
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.DomainOperation.Custom">
            <summary>
            Indicates a custom domain operation that is executed in a deferred manner
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.DomainOperation.Invoke">
            <summary>
            Indicates a custom domain operation that is executed immediately upon invocation
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.DomainOperation.Resolve">
            <summary>
            Indicates an operation that resolves submit conflicts
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.DomainServiceContext">
            <summary>
            Represents the execution environment for the operations
            performed by a <see cref="T:System.Web.DomainServices.DomainService"/>.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceContext.#ctor(System.IServiceProvider,System.Web.DomainServices.DomainOperationType)">
            <summary>
            Public constructor.
            </summary>
            <param name="serviceProvider">A service provider.</param>
            <param name="operationType">The type of operation that is being executed.</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceContext.GetService(System.Type)">
            <summary>
            See <see cref="M:System.IServiceProvider.GetService(System.Type)"/>.
            When the <see cref="P:System.Web.DomainServices.DomainServiceContext.ServiceContainer"/> is in use, it will be used
            first to retrieve the requested service.  If the <see cref="P:System.Web.DomainServices.DomainServiceContext.ServiceContainer"/>
            is not being used or it cannot resolve the service, then the
            <see cref="T:System.IServiceProvider"/> provided to this <see cref="T:System.Web.DomainServices.DomainServiceContext"/>
            will be queried for the service type.
            </summary>
            <param name="serviceType">The type of the service needed.</param>
            <returns>An instance of that service or null if it is not available.</returns>
        </member>
        <member name="P:System.Web.DomainServices.DomainServiceContext.Operation">
            <summary>
            Gets the operation that is being executed.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.DomainServiceContext.OperationType">
            <summary>
            Gets the type of operation that is being executed.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.DomainServiceContext.User">
            <summary>
            The user for this context instance.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.DomainServiceContext.ServiceContainer">
            <summary>
            A <see cref="T:System.ComponentModel.Design.IServiceContainer"/> that can be used for adding,
            removing, and getting services during a domain service invocation. <see cref="M:System.Web.DomainServices.DomainServiceContext.GetService(System.Type)"/>
            will query into this container as well as the <see cref="T:System.IServiceProvider"/>
            specified in the constructor.
            </summary>
            <remarks>
            If the <see cref="T:System.IServiceProvider"/> specified to the constructor implements
            <see cref="T:System.ComponentModel.Design.IServiceContainer"/>, then it will be used as the
            <see cref="P:System.Web.DomainServices.DomainServiceContext.ServiceContainer"/>, otherwise an empty container will be initialized.
            </remarks>
        </member>
        <member name="T:System.Web.DomainServices.DomainServiceContext.DomainServiceContextServiceContainer">
            <summary>
            Private implementation of <see cref="T:System.ComponentModel.Design.IServiceContainer"/> to act
            as a default service container on <see cref="T:System.Web.DomainServices.DomainServiceContext"/>.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceContext.DomainServiceContextServiceContainer.#ctor">
            <summary>
            Constructs a new service container that does not have a parent container
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceContext.DomainServiceContextServiceContainer.#ctor(System.ComponentModel.Design.IServiceContainer)">
            <summary>
            Constructs a new service container that has a parent container, making this container
            a wrapper around the parent container.  Calls to <c>AddService</c> and <c>RemoveService</c>
            will promote to the parent container by default, unless <paramref name="promote"/> is
            specified as <c>false</c> on those calls.
            </summary>
            <param name="parentContainer">The parent container to wrap into this container.</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceContext.DomainServiceContextServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
            <summary>
            Adds the specified service to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="callback">A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.</param>
            <param name="promote"><value>true</value> to promote this request to any parent service containers; otherwise, <value>false</value>. </param>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceContext.DomainServiceContextServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
            <summary>
            Adds the specified service to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="callback">A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceContext.DomainServiceContextServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
            <summary>
            Adds the specified service to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="serviceInstance">An instance of the service type to add. This object must implement or inherit from the type indicated by the <paramref name="serviceType"/> parameter.</param>
            <param name="promote"><value>true</value> to promote this request to any parent service containers; otherwise, <value>false</value>. </param>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceContext.DomainServiceContextServiceContainer.AddService(System.Type,System.Object)">
            <summary>
            Adds the specified service to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="serviceInstance">An instance of the service type to add. This object must implement or inherit from the type indicated by the <paramref name="serviceType"/> parameter.</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceContext.DomainServiceContextServiceContainer.RemoveService(System.Type,System.Boolean)">
            <summary>
            Removes the specified service type from the service container.
            </summary>
            <param name="serviceType">The type of service to remove.</param>
            <param name="promote"><value>true</value> to promote this request to any parent service containers; otherwise, <value>false</value>. </param>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceContext.DomainServiceContextServiceContainer.RemoveService(System.Type)">
            <summary>
            Removes the specified service type from the service container.
            </summary>
            <param name="serviceType">The type of service to remove.</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceContext.DomainServiceContextServiceContainer.GetService(System.Type)">
            <summary>
            See <see cref="M:System.IServiceProvider.GetService(System.Type)"/>.
            </summary>
            <param name="serviceType">The type of the service needed.</param>
            <returns>An instance of that service or null if it is not available.</returns>
        </member>
        <member name="T:System.Web.DomainServices.DomainService">
            <summary>
            Base class for all <see cref="T:System.Web.DomainServices.DomainService"/>s.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.#ctor">
            <summary>
            Protected constructor
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.Dispose">
            <summary>
            Dispose this <see cref="T:System.Web.DomainServices.DomainService"/>.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.Initialize(System.Web.DomainServices.DomainServiceContext)">
            <summary>
            Initializes this <see cref="T:System.Web.DomainServices.DomainService"/>. <see cref="M:System.Web.DomainServices.DomainService.Initialize(System.Web.DomainServices.DomainServiceContext)"/> must be called 
            prior to invoking any operations on the <see cref="T:System.Web.DomainServices.DomainService"/> instance.
            </summary>
            <param name="context">The <see cref="T:System.Web.DomainServices.DomainServiceContext"/> for this <see cref="T:System.Web.DomainServices.DomainService"/>
            instance. Overrides must call the base method.</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.Query(System.Web.DomainServices.QueryDescription,System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult}@,System.Int32@)">
            <summary>
            Performs the query operation indicated by the specified <see cref="T:System.Web.DomainServices.QueryDescription"/>
            and returns the results. If the query returns a singleton, it should still be returned
            as an <see cref="T:System.Collections.IEnumerable"/> containing the single result.
            </summary>
            <param name="queryDescription">The description of the query to perform.</param>
            <param name="validationErrors">Output parameter that will contain any validation errors encountered. If no validation
            errors are encountered, this will be set to <c>null</c>.</param>
            <param name="totalCount">Returns the total number of rows based on the specified query, but without 
            any paging applied to it.</param>
            <returns>The query results. May be null if there are no query results.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.Invoke(System.Web.DomainServices.DomainOperationEntry,System.Object[],System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult}@)">
            <summary>
            Invokes the specified invoke operation.
            </summary>
            <param name="operation">The operation to invoke.</param>
            <param name="parameters">The parameters to pass to the method.</param>
            <param name="validationErrors">An output parameter collection to which any validation errors 
            will be added. This will be set to <c>null</c> if no validation errors are encountered.</param>
            <returns>The return value of the invocation.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.Submit(System.Web.DomainServices.ChangeSet)">
            <summary>
            Performs the operations indicated by the specified <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/> by invoking
            the corresponding domain operations for each.
            </summary>
            <param name="changeSet">The changeset to submit</param>
            <returns>True if the submit was successful, false otherwise.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.ValidateOperations(System.Collections.Generic.IEnumerable{System.Web.DomainServices.ChangeSetEntry},System.Web.DomainServices.DomainServiceDescription)">
            <summary>
            Performs object, method and property validation and set any recoverable
            errors encountered on the given <see cref="T:System.Web.DomainServices.ChangeSetEntry"/> list
            </summary>
            <param name="operations">The list of operations to validate.</param>
            <param name="domainServiceDescription">The <see cref="T:System.Web.DomainServices.DomainServiceDescription"/> for the operation being validated.</param>
            <returns><c>true</c> if all the operations in the specified list are valid.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.Count``1(System.Linq.IQueryable{``0})">
            <summary>
            Gets the number of rows in an <see cref="T:System.Linq.IQueryable`1"/>. <see cref="T:System.Web.DomainServices.DomainService"/>s should 
            override this method to implement support for total-counts of paged result-sets. Overrides shouldn't 
            call the base method.
            </summary>
            <typeparam name="T">The element <see cref="T:System.Type"/> of the query.</typeparam>
            <param name="query">The query for which the count should be returned.</param>
            <returns>The total number of rows if total-counts are supported; -1 if it's not.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.Dispose(System.Boolean)">
            <summary>
            Disposes this <see cref="T:System.Web.DomainServices.DomainService"/>.
            </summary>
            <param name="disposing">True if we're currently disposing.</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.AuthorizeChangeSet(System.Web.DomainServices.ChangeSet)">
            <summary>
            Verifies the user is authorized to submit the specified <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/>.
            </summary>
            <param name="changeSet">The <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/> to authorize.</param>
            <returns>True if the <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/> is authorized, false otherwise.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.ValidateChangeSet(System.Web.DomainServices.ChangeSet)">
            <summary>
            This method validates the entire <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/> prior to calling <see cref="M:System.Web.DomainServices.DomainService.ExecuteChangeSet(System.Web.DomainServices.ChangeSet)"/>.
            Any errors should be set on the individual <see cref="T:System.Web.DomainServices.ChangeSetEntry"/>s in the <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/>.
            </summary>
            <param name="changeSet">The <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/> to validate.</param>
            <returns><c>True</c> if all operations in the <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/> passed validation, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.ExecuteChangeSet(System.Web.DomainServices.ChangeSet)">
            <summary>
            This method invokes the <see cref="T:System.Web.DomainServices.DomainOperationEntry"/> for each operation in the <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/>.
            </summary>
            <param name="changeSet">The <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/> to execute.</param>
            <returns>True if the <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/> was processed successfully, false otherwise.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.ResolveChangeSet(System.Web.DomainServices.ChangeSet)">
            <summary>
            This method is called to resolve concurrency conflicts if one or more operations in the <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/> resulted in conflicts.
            If this <see cref="T:System.Web.DomainServices.DomainService"/> has Resolve methods for the entity types in conflict, this method will invoke the resolve
            method for each. If all conflicts were resolved, this method will attempt a single resubmit. Override this method
            to implement different resolve strategies, for example, attempting multiple resubmits.
            </summary>
            <param name="changeSet">The <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/> being processed.</param>
            <returns>Returns <c>true</c> if all conflicts were successfully resolved and the resubmit succeeded, <c>false</c> otherwise</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.Resolve(System.Object,System.Object,System.Object,System.Web.DomainServices.ResolveOption)">
            <summary>
            This method resolves the conflicts for a single entity. The base implementation performs no resolution and
            returns false. Override this method to support data source specific conflict resolution.
            </summary>
            <param name="current">The entity with the current values.</param>
            <param name="original">The entity with the original values.</param>
            <param name="store">The entity with current store values.</param>
            <param name="resolveOption"><see cref="T:System.Web.DomainServices.ResolveOption"/> to use to resolve the conflicts.</param>
            <returns><c>True</c> if the conflicts were successfully resolved, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.OnError(System.Web.DomainServices.DomainServiceErrorInfo)">
            <summary>
            This method is called whenever an unrecoverable error occurs during
            the processing of a <see cref="T:System.Web.DomainServices.DomainService"/> operation.
            Override this method to perform exception logging, or to inspect
            server errors before results are sent back to the client.
            </summary>
            <param name="errorInfo">Information on the error that occurred.</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.PersistChangeSet(System.Web.DomainServices.ChangeSet)">
            <summary>
            This method is called to finalize changes after all the operations in the specified <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/>
            have been invoked. This method should commit the changes as necessary to the data source.
            Any errors should be set on the individual <see cref="T:System.Web.DomainServices.ChangeSetEntry"/>s in the <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/>.
            </summary>
            <param name="changeSet">The <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/> to persist.</param>
            <returns>True if the <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/> was persisted successfully, false otherwise.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.ResolveOperations(System.Web.DomainServices.ChangeSet)">
            <summary>
            For all operations in the changeset, validate that the operation exists, and
            set the operation entry.
            </summary>
            <param name="changeSet">The changeset to process.</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.ConvertMethodParameters(System.Web.DomainServices.DomainOperationEntry,System.Object[])">
            <summary>
            Process parameter values and attempt to convert them to the types 
            defined by the method signature. On successful completion, the
            <paramref name="parameterValues"/> collection will contain the 
            the converted values.
            </summary>
            <param name="method"><see cref="T:System.Web.DomainServices.DomainOperationEntry"/> that defines the 
            expected parameter types.</param>
            <param name="parameterValues">The raw parameter values.</param>
            <exception cref="T:System.InvalidOperationException">is thrown if the number 
            of parameter values provided does not match the number of method 
            parameter arguments.</exception>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.GetCustomMethodParams(System.Web.DomainServices.DomainOperationEntry,System.Object,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Returns the properly converted and configured parameter array for the specified object and
            parameter values. This is formed by using the <paramref name="entity"/> as the first argument,
            then adding the rest of the invocation parameters from the client.
            </summary>
            <remarks>
            The <paramref name="entity"/> passed to the method will either be the original client modified entity as
            contained in the operation or a new associated entity if a user called the <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/> Replace
            method prior to invoking this operation.
            </remarks>
            <param name="customMethodEntry">The custom method operation entry.</param>
            <param name="entity">The object the custom method is invoked on.</param>
            <param name="parameters">The raw custom method parameters.</param>
            <returns>Returns an array of custom method call parameters.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.PersistChangeSetInternal(System.Web.DomainServices.ChangeSet)">
            <summary>
            This method invokes the user overridable <see cref="M:System.Web.DomainServices.DomainService.PersistChangeSet(System.Web.DomainServices.ChangeSet)"/> method wrapping the call
            with the appropriate exception handling logic. All framework calls to <see cref="M:System.Web.DomainServices.DomainService.PersistChangeSet(System.Web.DomainServices.ChangeSet)"/>
            must go through this method. Some data sources have their own validation hook points,
            so if a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> is thrown at that level, we want to capture it.
            </summary>
            <param name="changeSet">The <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/> to submit</param>
            <returns>True if the <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/> was persisted successfully, false otherwise.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.EnsureInitialized">
            <summary>
            Ensures the <see cref="T:System.Web.DomainServices.DomainService"/> has been initialized.
            </summary>
            <exception cref="T:System.InvalidOperationException">if this service instance hasn't been initialized.</exception>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.ValidateMethodPermissions(System.Web.DomainServices.DomainOperationEntry)">
            <summary>
            Validate the permissions for the specified method. If the authorization check
            fails, an <see cref="T:System.UnauthorizedAccessException"/> will be thrown.
            </summary>
            <param name="method">The method to validate.</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.InvokeCudOperations(System.Web.DomainServices.ChangeSet)">
            <summary>
            Invokes all CUD operations in the <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/>.
            </summary>
            <param name="changeSet">The <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/> containing CUD operations to invoke.</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.InvokeCustomOperations(System.Web.DomainServices.ChangeSet)">
            <summary>
            Invokes all Custom operations in the <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/>.
            </summary>
            <param name="changeSet">The <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/> containing Custom operations to invoke.</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.InvokeDomainOperationEntry(System.Web.DomainServices.DomainOperationEntry,System.Object[],System.Web.DomainServices.ChangeSetEntry)">
            <summary>
            Invokes the given <see cref="T:System.Web.DomainServices.DomainOperationEntry"/>. If a non-recoverable exception
            is encountered during the invocation, the exception is
            re-thrown. Otherwise, the error is appended to the operation's
            errors list.
            </summary>
            <param name="domainOperationEntry">The domain operation entry to invoke.</param>
            <param name="parameters">The parameters to invoke domain operation entry with.</param>
            <param name="operation">The <see cref="T:System.Web.DomainServices.ChangeSetEntry"/> object associated with the domain operation entry for logging errors (if any).</param>
            <returns>The result of the <see cref="T:System.Web.DomainServices.DomainOperationEntry"/>.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.ValidateMethodCall(System.Web.DomainServices.DomainOperationEntry,System.Object[],System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Validates a method call.
            </summary>
            <param name="method">The method to validate.</param>
            <param name="parameters">The parameters to pass to the method.</param>
            <param name="validationResults">The collection to which we can append validation results.</param>
            <returns><c>true</c> if the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.TryValidateOperation(System.Web.DomainServices.DomainOperationEntry,System.ComponentModel.DataAnnotations.ValidationContext,System.Object[],System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Validates the specified method, returning any validation errors
            </summary>
            <param name="operation">The operation to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="parameters">The parameter values.</param>
            <param name="validationResults">Collection of ValidationResults to accumulate into.</param>
            <returns><c>True</c> if the method is valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.ValidateReadOnlyProperties(System.Object,System.Object,System.Collections.Generic.List{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Validates that none of the read-only properties have changed.
            </summary>
            <remarks>
            A property can be marked as read-only with either a
            <see cref="T:System.ComponentModel.DataAnnotations.EditableAttribute"/> where <see cref="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowEdit"/>
            is <c>false</c>.
            </remarks>
            <param name="currentEntity">The current entity.</param>
            <param name="originalEntity">The original entity.</param>
            <param name="validationErrors">The list of validation errors to append new validation errors to.</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.CompareValues(System.Type,System.Object,System.Object)">
            <summary>
            Compares two values and returns <c>true</c> if the values are equal, <c>false</c> otherwise.
            </summary>
            <param name="elementType">The type of values to compare.</param>
            <param name="originalValue">The original value.</param>
            <param name="currentValue">The current value.</param>
            <returns><c>true</c> if the values are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.CompareSequences(System.Type,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Compares two sequences and returns <c>true</c> if the sequences are equal, <c>false</c> otherwise.
            </summary>
            <param name="elementType">The type of elements in the sequence.</param>
            <param name="originalSequence">The original sequence.</param>
            <param name="currentSequence">The current sequence.</param>
            <returns><c>true</c> if the sequences are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:System.Web.DomainServices.DomainService.Factory">
            <summary>
            Gets or sets the <see cref="T:System.Web.DomainServices.IDomainServiceFactory"/> used to create new <see cref="T:System.Web.DomainServices.DomainService"/> instances.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.DomainService.ServiceDescription">
            <summary>
            Gets the <see cref="T:System.Web.DomainServices.DomainServiceDescription"/> for this <see cref="T:System.Web.DomainServices.DomainService"/>.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.DomainService.ServiceContext">
            <summary>
            Gets the active <see cref="T:System.Web.DomainServices.DomainServiceContext"/> for this <see cref="T:System.Web.DomainServices.DomainService"/>.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.DomainService.ChangeSet">
            <summary>
            Gets the current <see cref="P:System.Web.DomainServices.DomainService.ChangeSet"/>. Returns null if no change operations are being performed.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.DomainService.DefaultDomainServiceFactory">
            <summary>
            Default <see cref="T:System.Web.DomainServices.IDomainServiceFactory"/> implementation.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.IDomainServiceFactory">
            <summary>
            Provides an interface for <see cref="T:System.Web.DomainServices.DomainService"/> factory implementations.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.IDomainServiceFactory.CreateDomainService(System.Type,System.Web.DomainServices.DomainServiceContext)">
            <summary>
            Creates a new <see cref="T:System.Web.DomainServices.DomainService"/> instance.
            </summary>
            <param name="domainServiceType">The <see cref="T:System.Type"/> of <see cref="T:System.Web.DomainServices.DomainService"/> to create.</param>
            <param name="context">The current <see cref="T:System.Web.DomainServices.DomainServiceContext"/>.</param>
            <returns>A <see cref="T:System.Web.DomainServices.DomainService"/> instance.</returns>
        </member>
        <member name="M:System.Web.DomainServices.IDomainServiceFactory.ReleaseDomainService(System.Web.DomainServices.DomainService)">
            <summary>
            Releases an existing <see cref="T:System.Web.DomainServices.DomainService"/> instance.
            </summary>
            <param name="domainService">The <see cref="T:System.Web.DomainServices.DomainService"/> instance to release.</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.DefaultDomainServiceFactory.CreateDomainService(System.Type,System.Web.DomainServices.DomainServiceContext)">
            <summary>
            Creates a new <see cref="T:System.Web.DomainServices.DomainService"/> instance.
            </summary>
            <param name="domainServiceType">The <see cref="T:System.Type"/> of <see cref="T:System.Web.DomainServices.DomainService"/> to create.</param>
            <param name="context">The current <see cref="T:System.Web.DomainServices.DomainServiceContext"/>.</param>
            <returns>A <see cref="T:System.Web.DomainServices.DomainService"/> instance.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.DefaultDomainServiceFactory.ReleaseDomainService(System.Web.DomainServices.DomainService)">
            <summary>
            Releases an existing <see cref="T:System.Web.DomainServices.DomainService"/> instance.
            </summary>
            <param name="domainService">A <see cref="T:System.Web.DomainServices.DomainService"/> instance to release.</param>
        </member>
        <member name="T:System.Web.DomainServices.DomainService.KeyValueComparer`2">
            <summary>
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used to compare <see cref="T:System.Collections.Generic.KeyValuePair`2"/> instances.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.KeyValueComparer`2.Equals(System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether two <see cref="T:System.Collections.Generic.KeyValuePair`2"/> instances are equal.
            </summary>
            <param name="x">The first <see cref="T:System.Collections.Generic.KeyValuePair`2"/> instance to compare.</param>
            <param name="y">The second <see cref="T:System.Collections.Generic.KeyValuePair`2"/> instance to compare.</param>
            <returns><c>true</c> if the specified objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainService.KeyValueComparer`2.GetHashCode(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Gets a hash code for the specified <see cref="T:System.Collections.Generic.KeyValuePair`2"/> instance.
            </summary>
            <param name="obj">The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> for which a hash code is to be returned.</param>
            <returns>Returns a hash code for the specified <see cref="T:System.Collections.Generic.KeyValuePair`2"/> instance.</returns>
        </member>
        <member name="T:System.Web.DomainServices.DomainServiceDescription">
            <summary>
            This class encapsulates information about a <see cref="T:System.Web.DomainServices.DomainService"/>
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.#ctor(System.Type)">
            <summary>
            Constructs a description for the specified <see cref="T:System.Web.DomainServices.DomainService"/> Type.
            </summary>
            <param name="domainServiceType">The Type of the DomainService</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.#ctor(System.Web.DomainServices.DomainServiceDescription)">
            <summary>
            Constructs a description based on the specified <see cref="T:System.Web.DomainServices.DomainServiceDescription"/>.
            </summary>
            <param name="baseDescription">The base <see cref="T:System.Web.DomainServices.DomainServiceDescription"/></param>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.AddOperation(System.Web.DomainServices.DomainOperationEntry)">
            <summary>
            Add the specified operation to this description.
            </summary>
            <param name="operation">The operation to add.</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.GetQueryMethod(System.String)">
            <summary>
            Returns the <see cref="T:System.Web.DomainServices.DomainService"/> query method of the specified name
            </summary>
            <param name="queryName">The name of the query </param>
            <returns>DomainOperationEntry for the specified query name</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.GetInvokeOperation(System.String)">
            <summary>
            Returns the <see cref="T:System.Web.DomainServices.DomainService"/> invoke operation of the specified name.
            </summary>
            <param name="operationName">The name of the operation</param>
            <returns><see cref="T:System.Web.DomainServices.DomainOperationEntry"/> for the specified operation name.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.GetCustomMethod(System.Type,System.String)">
            <summary>
            Returns the <see cref="T:System.Web.DomainServices.DomainService"/> custom method of the specified name associated with a given entity type
            </summary>
            <param name="entityType">entity type the custom method is associated with</param>
            <param name="methodName">name of the custom method</param>
            <returns>DomainOperationEntry for the custom method if found, null otherwise</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.GetCustomMethods(System.Type)">
            <summary>
            Returns the collection of custom methods defined for the given entity type on the corresponding <see cref="T:System.Web.DomainServices.DomainService"/>
            </summary>
            <param name="entityType">The entity type associated with the custom methods that are to be retrieved</param>
            <returns>The collection of custom methods defined for the given entity type</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.GetSubmitMethod(System.Type,System.Web.DomainServices.DomainOperation)">
            <summary>
            Gets the submit method for the specified entity type and <see cref="T:System.Web.DomainServices.DomainOperation"/>
            </summary>
            <param name="entityType">The entity type</param>
            <param name="operation">The <see cref="T:System.Web.DomainServices.DomainOperation"/> type to get the method for. Must be
            Insert, Update, Delete or Resolve.</param>
            <returns>The method if it exists, otherwise null</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.GetParentAssociations(System.Type)">
            <summary>
            If the specified Type is the child of a compositional relationship
            this method returns all the compositional associations that compose the
            Type.
            </summary>
            <param name="entityType">The Type to check.</param>
            <returns>Collection of <see cref="T:System.ComponentModel.PropertyDescriptor"/>s for each parent association. May be empty.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.GetSerializationType(System.Type)">
            <summary>
            For the specified type, this method returns the corresponding
            Type exposed by the DomainService, taking inheritance into account.
            </summary>
            <remarks>Any serialization or other framework operations operating on
            entity Types should call into this method to get the correct Type
            definition to operate on.</remarks>
            <param name="entityType">The Type of the object.</param>
            <returns>The corresponding entity type exposed by the DomainService, or null
            if the specified type is not an entity Type.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.GetDescription(System.Type)">
            <summary>
            Returns the <see cref="T:System.Web.DomainServices.DomainServiceDescription"/> for the specified <see cref="T:System.Web.DomainServices.DomainService"/> Type.
            </summary>
            <param name="domainServiceType">The Type of domain service to get description for</param>
            <returns>The description for the specified domain service type</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.Initialize">
            <summary>
            Validate and initialize the description. Initialize should be called before the description
            is used. Only descriptions that have been created manually need to be initialized. Descriptions
            returned by the framework are already initialized.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.IsKnownEntityType(System.Type)">
            <summary>
            Checks whether the specified type is a known entity type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>true if the type is a known entity type; false otherwise.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.CheckInvalidUpdate">
            <summary>
            Verifies that the description is still in an uninitialized state. A description
            can only be modified/configured before it has been initialized.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.EnsureInitialized">
            <summary>
            Call this method to ensure that the description is initialized.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.CreateDescription(System.Type)">
            <summary>
            Create the base reflection based description, then call all DomainDescriptionProviders in the inheritance
            hierarchy allowing each of them to replace or modify the description as needed.
            </summary>
            <param name="domainServiceType">The DomainService Type.</param>
            <returns>The description</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.RegisterCustomTypeDescriptors(System.Type,System.Type)">
            <summary>
            Register any custom TypeDescriptionProviders requested via the MetadataProviderAttribute
            applied to the DomainService Type for the specified entity type
            </summary>
            <param name="domainServiceType">The Type of the DomainService</param>
            <param name="entityType">The entity type for which we should register the custom descriptors</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.IsValidEntityType(System.Type,System.String@)">
            <summary>
            Determines whether a given type may be used as an entity type.
            </summary>
            <param name="type">The type to test</param>
            <param name="errorMessage">If this method returns <c>false</c>, the error message</param>
            <returns><c>true</c> if the type can legally be used as an entity</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.AddEntityType(System.Type)">
            <summary>
            Recursively add the specified entity and all entities in its Include graph
            to our list of all entities, and register an associated metadata type descriptor
            for each.
            </summary>
            <param name="entityType">type of entity to add</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.ValidateEntityTypes">
            <summary>
            Validate all entity types exposed by this provider.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.ValidateComposedTypeOperations(System.Type)">
            <summary>
            Ensures that for composed Types, if they have explicit update operations the
            correct corresponding operations are supported on all parent Types.
            </summary>
            <param name="entityType">The entity type to validate</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.ValidateEntityAssociations(System.Type,System.ComponentModel.PropertyDescriptorCollection)">
            <summary>
            This method validates the association attributes for the specified entity type
            </summary>
            <param name="entityType">Type of entity to validate its association attributes for</param>
            <param name="entityProperties">collection of entity property descriptors</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.AddQueryMethod(System.Web.DomainServices.DomainOperationEntry)">
            <summary>
            Add a Query method to this domain service.
            </summary>
            <param name="method"><see cref="T:System.Web.DomainServices.DomainOperationEntry"/> for the method to be added</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.AddSubmitMethod(System.Web.DomainServices.DomainOperationEntry)">
            <summary>
            Add a CUD method to this domain service.
            </summary>
            <param name="method"><see cref="T:System.Web.DomainServices.DomainOperationEntry"/> for the method to be added</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.AddCustomMethod(System.Web.DomainServices.DomainOperationEntry)">
            <summary>
            Add a Custom method to this domain service. The first param is assumed to be the entity,
            all other params should be one of the predefined types
            </summary>
            <param name="method">the custom method to be added</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.AddInvokeOperation(System.Web.DomainServices.DomainOperationEntry)">
            <summary>
            Add an invoke operation to this domain service. All params have to be either of one of the
            predefined types, or of an entity type defined on the provider.
            </summary>
            <param name="method">the invoke operationto be added</param>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.IsEntityOrPredefinedType(System.Type)">
            <summary>
            Checks if the given type is an entity type defined on the associated domain service, or one of the predefined types
            </summary>
            <param name="type">type to check</param>
            <returns>true if the given type is an entity type or one of the predefined types</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.IsOperationSupported(System.Type,System.Web.DomainServices.DomainOperation)">
            <summary>
            Determines whether the specified change operation is supported for the specified Type.
            If the Type is the child of one or more composition relationships, operation support
            takes parent support into account.
            </summary>
            <param name="entityType">The entity Type to check.</param>
            <param name="operationType">The operation Type to check. Must be one of the
            change operation types Insert, Update or Delete.</param>
            <returns><c>True</c> if the operation is supported, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Web.DomainServices.DomainServiceDescription.IsOperationSupportedInternal(System.Type,System.Web.DomainServices.DomainOperation,System.Boolean,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Recursive helper for <see cref="M:System.Web.DomainServices.DomainServiceDescription.IsOperationSupported(System.Type,System.Web.DomainServices.DomainOperation)"/>. This method checks support
            for the type directly, then checks composing parents as well.
            </summary>
            <param name="entityType">The entity Type to check.</param>
            <param name="operationType">The operation Type to check.</param>
            <param name="isParent">True if the check should use compositional parent rules.</param>
            <param name="visited">Visited map used during recursion.</param>
            <returns><c>True</c> if the operation is supported, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:System.Web.DomainServices.DomainServiceDescription.DomainServiceType">
            <summary>
            Gets the Type of the <see cref="T:System.Web.DomainServices.DomainService"/>
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.DomainServiceDescription.EntityTypes">
            <summary>
            Gets the Entity types exposed by the <see cref="T:System.Web.DomainServices.DomainService"/>
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.DomainServiceDescription.DomainOperationEntries">
            <summary>
            Gets the collection of <see cref="P:System.Web.DomainServices.DomainServiceDescription.DomainOperationEntries"/> for the DomainService
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.DomainServiceDescription.Attributes">
            <summary>
            Gets or sets a collection of attributes representing attributes on the <see cref="T:System.Web.DomainServices.DomainService"/> Type.
            </summary>
            <remarks>This includes attributes decorated on the Type directly as well as attributes surfaced 
            from implemented interfaces.</remarks>
        </member>
        <member name="T:System.Web.DomainServices.ChangeSetEntry">
            <summary>
            Represents a domain operation to be performed on an entity.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.ChangeSetEntry.#ctor">
            <summary>
            Constructs an instance of <see cref="T:System.Web.DomainServices.ChangeSetEntry"/>
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.ChangeSetEntry.#ctor(System.Int32,System.Object,System.Object,System.Web.DomainServices.DomainOperation)">
            <summary>
            Constructs an instance of <see cref="T:System.Web.DomainServices.ChangeSetEntry"/>
            </summary>
            <param name="id">The client Id for the entity.</param>
            <param name="entity">The entity.</param>
            <param name="originalEntity">The original entity. May be null.</param>
            <param name="operation">The operation type.</param>
        </member>
        <member name="P:System.Web.DomainServices.ChangeSetEntry.HasError">
            <summary>
            Gets a value indicating whether validation errors or conflicts were encountered 
            during processing of the property.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.ChangeSetEntry.HasConflict">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Web.DomainServices.ChangeSetEntry"/> contains conflicts.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.ChangeSetEntry.Entity">
            <summary>
            Gets or sets the <see cref="P:System.Web.DomainServices.ChangeSetEntry.Entity"/> being operated on
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.ChangeSetEntry.Id">
            <summary>
            Gets or sets the client ID for the entity
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.ChangeSetEntry.HasMemberChanges">
            <summary>
            Gets or sets a value indicating whether the entity for
            this operation has property modifications.
            <remarks>Note that even if OriginalEntity hasn't been
            set, in the case of entities using a timestamp field
            for concurrency, the entity may still be modified. This
            flag allows us to distinguish that case from an Update
            operation that represents a custom method invocation only.</remarks>
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.ChangeSetEntry.Operation">
            <summary>
            Gets or sets the <see cref="T:System.Web.DomainServices.DomainOperation"/> to be performed on the entity.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.ChangeSetEntry.EntityActions">
            <summary>
            Gets or sets the custom methods invoked on the entity, as a set
            of method name / parameter pairs.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.ChangeSetEntry.OriginalEntity">
            <summary>
            Gets or sets the original state of the entity being operated on
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.ChangeSetEntry.StoreEntity">
            <summary>
            Gets or sets the state of the entity in the store
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.ChangeSetEntry.ValidationErrors">
            <summary>
            Gets or sets the validation errors encountered during the processing of the operation. 
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.ChangeSetEntry.ConflictMembers">
            <summary>
            Gets or sets the collection of members in conflict. The StoreEntity property
            contains the current store value for each property.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.ChangeSetEntry.IsDeleteConflict">
            <summary>
            Gets or sets whether the conflict is a delete conflict.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.ChangeSetEntry.Associations">
            <summary>
            Gets or sets the collection of entity IDs representing the entities for
            each association
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.ChangeSetEntry.OriginalAssociations">
            <summary>
            Gets or sets the collection of entity IDs representing the entities for
            each association of the OriginalEntity
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.ChangeSetEntry.DomainOperationEntry">
            <summary>
            Gets or sets the <see cref="P:System.Web.DomainServices.ChangeSetEntry.DomainOperationEntry"/> for the operation. May be
            null if the operation is for a composed Type that doesn't have an explicit
            operation defined.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.ExcludeAttribute">
            <summary>
            Indicates that an entity member should not exist in the code generated 
            client view of the entity, and that the value should never be sent to
            the client.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.IncludeAttribute">
            <summary>
            When applied to an entity association, this attribute indicates that the association should be
            part of any code generated client entities, and that any related entities should be included when
            serializing results to the client. Note that it is up to the query method to make sure the associated
            entities are actually loaded. This attribute can also be used to specify member projections.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.IncludeAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.IncludeAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor used to specify a member projection.
            </summary>
            <param name="path">Dotted path specifying the navigation path from the member this attribute
            is applied to, to the member to be projected. The projected member must be a scalar.</param>
            <param name="memberName">The member name that will be code generated for the projected member.</param>
        </member>
        <member name="M:System.Web.DomainServices.IncludeAttribute.GetHashCode">
            <summary>
            Override of the default <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <remarks>This override exists to circumvent the base class implementation that uses private Reflection and cannot work in partial trust.</remarks>
            <returns>The has code.</returns>
        </member>
        <member name="M:System.Web.DomainServices.IncludeAttribute.Equals(System.Object)">
            <summary>
            Override of <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <remarks>This override exists to circumvent the base class implementation that uses private Reflection and cannot work in partial trust.</remarks>
            <param name="obj">The object to compare to the current object.</param>
            <returns><c>true</c> if <paramref name="obj"/> is equal to the current object.</returns>
        </member>
        <member name="M:System.Web.DomainServices.IncludeAttribute.IsAttributeValid(System.String@)">
            <summary>
            Determines whether the current attribute instance is properly formed
            </summary>
            <param name="errorMessage">Error message returned to describe problem (null if no problem)</param>
            <returns><c>true</c> means it's valid</returns>
        </member>
        <member name="M:System.Web.DomainServices.IncludeAttribute.ThrowIfAttributeNotValid">
            <summary>
            Throws InvalidOperationException is anything is wrong with the attribute
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.IncludeAttribute.IsProjection">
            <summary>
            Gets a value indicating whether this attribute specifies a member projection
            </summary>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is invalid.</exception>
        </member>
        <member name="P:System.Web.DomainServices.IncludeAttribute.Path">
            <summary>
            Gets the member projection path
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.IncludeAttribute.MemberName">
            <summary>
            Gets the name of the destination member for the projection 
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.IncludeAttribute.TypeId">
            <summary>
            Gets a unique identifier for this attribute.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.MetadataProviderAttribute">
            <summary>
            Apply this attribute to a <see cref="T:System.Web.DomainServices.DomainService"/> to specify one or more custom <see cref="T:System.ComponentModel.TypeDescriptionProvider"/> Types
            that should be registered for all entity types exposed by the <see cref="T:System.Web.DomainServices.DomainService"/>. This attribute can also be subclassed
            to provide a factory method for custom <see cref="T:System.ComponentModel.TypeDescriptionProvider"/>s that require additional construction parameters.
            See the <see cref="M:System.Web.DomainServices.MetadataProviderAttribute.CreateProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)"/> method for details.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.MetadataProviderAttribute.#ctor(System.Type)">
            <summary>
            Public constructor
            </summary>
            <param name="typeDescriptionProviderType">Type of the custom TypeDescriptionProvider that should be registered.
            Must derive from TypeDescriptionProvider.</param>
        </member>
        <member name="M:System.Web.DomainServices.MetadataProviderAttribute.CreateProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
            <summary>
            This method creates an instance of the <see cref="T:System.ComponentModel.TypeDescriptionProvider"/>. Subclasses can override this
            method to provide their own construction logic.
            </summary>
            <param name="existingProvider">The existing <see cref="T:System.ComponentModel.TypeDescriptionProvider"/> for the Type the returned
            provider will be registered for.</param>
            <param name="domainServiceType">The <see cref="T:System.Web.DomainServices.DomainService"/> Type metadata is being provided for.</param>
            <returns>The <see cref="T:System.ComponentModel.TypeDescriptionProvider"/> instance.</returns>
        </member>
        <member name="M:System.Web.DomainServices.MetadataProviderAttribute.GetHashCode">
            <summary>
            Override of the default <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <remarks>This override exists to circumvent the base class implementation that uses private Reflection and cannot work in partial trust.</remarks>
            <returns>The has code.</returns>
        </member>
        <member name="M:System.Web.DomainServices.MetadataProviderAttribute.Equals(System.Object)">
            <summary>
            Override of <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <remarks>This override exists to circumvent the base class implementation that uses private Reflection and cannot work in partial trust.</remarks>
            <param name="obj">The object to compare to the current object.</param>
            <returns><c>true</c> if <paramref name="obj"/> is equal to the current object.</returns>
        </member>
        <member name="P:System.Web.DomainServices.MetadataProviderAttribute.TypeDescriptionProviderType">
            <summary>
            Gets the Type of the TypeDescriptionProvider
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.MetadataProviderAttribute.TypeId">
            <summary>
            Gets a unique identifier for this attribute.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.QueryDescription">
            <summary>
            Represents a query operation to be processed by a <see cref="T:System.Web.DomainServices.DomainService"/>
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.QueryDescription.#ctor(System.Web.DomainServices.DomainOperationEntry)">
            <summary>
            Public constructor
            </summary>
            <param name="domainOperationEntry">The query operation to be processed</param>
        </member>
        <member name="M:System.Web.DomainServices.QueryDescription.#ctor(System.Web.DomainServices.DomainOperationEntry,System.Object[])">
            <summary>
            Public constructor
            </summary>
            <param name="domainOperationEntry">The query operation to be processed</param>
            <param name="parameterValues">Parameter values for the method if it requires any</param>
        </member>
        <member name="M:System.Web.DomainServices.QueryDescription.#ctor(System.Web.DomainServices.DomainOperationEntry,System.Object[],System.Linq.IQueryable)">
            <summary>
            Public constructor
            </summary>
            <param name="domainOperationEntry">The query operation to be processed</param>
            <param name="parameterValues">Parameter values for the method if it requires any</param>
            <param name="query">The query to compose over the results</param>
        </member>
        <member name="P:System.Web.DomainServices.QueryDescription.Method">
            <summary>
            Gets the query operation to be processed
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.QueryDescription.ParameterValues">
            <summary>
            Gets the parameter values for the method if it requires any
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.QueryDescription.Query">
            <summary>
            Gets The query to compose over the results
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.ResolveOption">
            <summary>
            Enumeration of conflict resolution policies
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.ResolveOption.MergeIntoCurrent">
            <summary>
            Merge the current store values into the current values, retaining any
            updated values, but overwriting any unmodified values.
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.ResolveOption.KeepCurrent">
            <summary>
            Retain the current values, overwriting any store values in conflict.
            </summary>
        </member>
        <member name="F:System.Web.DomainServices.ResolveOption.RefreshCurrent">
            <summary>
            Discard the current values including any updated values, replacing them
            with the current store values.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.ChangeSet_Associate_EntityNotFoundInChangeSet">
            <summary>
              Looks up a localized string similar to The client entity does not exist in the ChangeSet..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.ChangeSet_ChangeSetEntryNotFound">
            <summary>
              Looks up a localized string similar to The specified entity does not exist in the ChangeSet..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.ChangeSet_ChildHasMultipleParents">
            <summary>
              Looks up a localized string similar to Invalid change-set : Entity for operation &apos;{0}&apos; has multiple parents..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.ChangeSet_InvalidMemberExpression">
            <summary>
              Looks up a localized string similar to The member expression specified is invalid..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.ChangeSet_Replace_EntityTypesNotSame">
            <summary>
              Looks up a localized string similar to Cannot replace entity of type &apos;{0}&apos; with entity of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.Composition_ParentsMustSupportDelete">
            <summary>
              Looks up a localized string similar to Composed Type &apos;{0}&apos; can only have a Delete method if all of its parent Types also support Update or Delete..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.Composition_ParentsMustSupportInsert">
            <summary>
              Looks up a localized string similar to Composed Type &apos;{0}&apos; can only have an Insert method if all of its parent Types also support Update or Insert..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.Composition_ParentsMustSupportUpdate">
            <summary>
              Looks up a localized string similar to Composed Type &apos;{0}&apos; can only have an Update method if all of its parent Types also support Update..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.DomainOperationEntry_Access_Denied">
            <summary>
              Looks up a localized string similar to Access denied to DomainOperationEntry &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.DomainOperationEntry_ArgumentCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to The argument &apos;{0}&apos; cannot be null or empty..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.DomainOperationEntryOverload_NotSupported">
            <summary>
              Looks up a localized string similar to An overload of the method &apos;{0}&apos; was already defined. DomainOperationEntry overloads are not supported..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.DomainService_AlreadyInitialized">
            <summary>
              Looks up a localized string similar to This DomainService has already been initialized..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.DomainService_DuplicateCUDMethod">
            <summary>
              Looks up a localized string similar to The domain operation entry named &apos;{0}&apos; provides redundant functionality. Another method named &apos;{1}&apos; already exists..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.DomainService_Factory_InvalidDomainServiceType">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not a valid DomainService type..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.DomainService_InvalidDomainOperationEntry">
            <summary>
              Looks up a localized string similar to This DomainService does not support operation &apos;{0}&apos; for entity &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.DomainService_InvalidInheritance">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is a direct or indirect subclass of Type &apos;{1}&apos;. DomainServices cannot return a Type that is a subclass of another Type returned from the same DomainService..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.DomainService_InvalidMetadataProviderType">
            <summary>
              Looks up a localized string similar to Invalid TypeDescriptionProvider &apos;{0}&apos; specified. TypeDescriptionProvider Types registered as metadata providers must derive from TypeDescriptionProvider, must be non-abstract, and cannot be generic Type definitions..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.DomainService_InvalidTDPConstructor">
            <summary>
              Looks up a localized string similar to The TypeDescriptionProvider &apos;{0}&apos; specified does not provide a public constructor of one of the supported signatures..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.DomainService_InvalidType">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not a valid domain service type. Domain service types must be concrete and non-generic..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.DomainService_NotInitialized">
            <summary>
              Looks up a localized string similar to This DomainService has not been initialized..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.DomainServiceContextServiceContainer_ItemAlreadyExists">
            <summary>
              Looks up a localized string similar to A service of type &apos;{0}&apos; already exists in the container..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.DomainServiceDescription_IncompatibleOperationParentType">
            <summary>
              Looks up a localized string similar to The operation &apos;{0}&apos; cannot be added to this DomainServiceDescription for Type &apos;{1}&apos; because the operation&apos;s DomainServiceType is &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.DomainServiceDescription_InvalidCompositionMember">
            <summary>
              Looks up a localized string similar to CompositionAttribute cannot be applied to member &apos;{0}.{1}&apos;. CompositionAttribute can only be applied to members marked with AssociationAttribute..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.DomainServiceDescription_InvalidUpdate">
            <summary>
              Looks up a localized string similar to Modifications cannot be made to a DomainServiceDescription once it has been initialized..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.DomainServiceDescription_SingletonQueryMethodCannotCompose">
            <summary>
              Looks up a localized string similar to Query operation &apos;{0}&apos; cannot be marked composable since its return Type &apos;{1}&apos; does not implement IEnumerable of T..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.DomainServiceDescription_Uninitialized">
            <summary>
              Looks up a localized string similar to This DomainServiceDescription hasn&apos;t been initialized. Initialize must be called before the description can be used..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.DomainServiceDescriptionProviderAttribute_MissingConstructor">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not have a constructor with a single parameter of type System.Type..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.Entity_Property_Is_ReadOnly">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; property is read-only but was changed by the client..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.EntityTypes_Cannot_Be_Abstract">
            <summary>
              Looks up a localized string similar to Entity types cannot be abstract..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.EntityTypes_Cannot_Be_Collections">
            <summary>
              Looks up a localized string similar to Entity types cannot be a collection type..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.EntityTypes_Cannot_Be_Generic">
            <summary>
              Looks up a localized string similar to Entity types cannot be generic..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.EntityTypes_Cannot_Be_Nullable">
            <summary>
              Looks up a localized string similar to Entity types cannot be nullable..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.EntityTypes_Cannot_Be_Primitives">
            <summary>
              Looks up a localized string similar to Entity types cannot be a primitive type or a simple type like string or Guid..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.EntityTypes_Must_Be_Public">
            <summary>
              Looks up a localized string similar to Entity types must be public..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.EntityTypes_Must_Have_Default_Constructor">
            <summary>
              Looks up a localized string similar to Entity types must have a default constructor..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.FailedToConvertValue">
            <summary>
              Looks up a localized string similar to Failed to convert value of type &apos;{0}&apos; to type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.IncorrectParameterType">
            <summary>
              Looks up a localized string similar to Incorrect parameter type &apos;{0}&apos; for parameter &apos;{1}&apos;. Expected type is &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.Invalid_Entity_Property">
            <summary>
              Looks up a localized string similar to Entity &apos;{0}&apos; has a property &apos;{1}&apos; with an unsupported type..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.Invalid_Entity_Type">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not a valid entity type.  {1}.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.Invalid_Include_Invalid_Entity">
            <summary>
              Looks up a localized string similar to The property &apos;{0}&apos; in entity type &apos;{1}&apos; cannot be marked with the IncludeAttribute because &apos;{2}&apos; is not a valid entity type.  {3}.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.Invalid_Method">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; does not contain a public method named &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidAssociation_IsFKInvalid">
            <summary>
              Looks up a localized string similar to Association named &apos;{0}&apos; defined on entity type &apos;{1}&apos; is invalid: one and only one side of the association must have IsForeignKey set to true..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidAssociation_NameCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to Association defined on property &apos;{0}&apos; of entity &apos;{1}&apos; is invalid: Name cannot be null or empty..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidAssociation_NonUniqueAssociationName">
            <summary>
              Looks up a localized string similar to Association name &apos;{0}&apos; defined on entity type &apos;{1}&apos; is not unique..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidAssociation_OtherKeyNotFound">
            <summary>
              Looks up a localized string similar to Association named &apos;{0}&apos; defined on entity type &apos;{1}&apos; is invalid: OtherKey property named &apos;{2}&apos; cannot be found on entity type &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidAssociation_StringCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to Association named &apos;{0}&apos; defined on entity type &apos;{1}&apos; is invalid: {2} cannot be null or empty..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidAssociation_ThisKeyNotFound">
            <summary>
              Looks up a localized string similar to Association named &apos;{0}&apos; defined on entity type &apos;{1}&apos; is invalid: ThisKey property named &apos;{2}&apos; cannot be found..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidChangeSet">
            <summary>
              Looks up a localized string similar to Invalid ChangeSet : {0}.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidChangeSet_AssociatedIdNotInChangeset">
            <summary>
              Looks up a localized string similar to Id &apos;{0}&apos; specified for association member  &apos;{0}.{1}&apos; is invalid..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidChangeSet_AssociatedIdsCannotBeNull">
            <summary>
              Looks up a localized string similar to Associated Ids for member &apos;{0}.{1}&apos; cannot be null..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidChangeSet_DuplicateId">
            <summary>
              Looks up a localized string similar to Id must be unique for each entry..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidChangeSet_InvalidAssociationMember">
            <summary>
              Looks up a localized string similar to Association member &apos;{0}.{1}&apos; specified in the ChangeSet does not exist or is not marked with AssociationAttribute..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidChangeSet_MustBeSameType">
            <summary>
              Looks up a localized string similar to Entity and OriginalEntity must be of the same Type..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidChangeSet_NullEntity">
            <summary>
              Looks up a localized string similar to Entity cannot be null..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidCustomMethod_MethodCannotBeParameterless">
            <summary>
              Looks up a localized string similar to Custom methods must contain at least one parameter..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidDomainMethod_ParamMustBeEntity">
            <summary>
              Looks up a localized string similar to Parameter &apos;{0}&apos; of domain method &apos;{1}&apos; must be an entity type exposed by the DomainService, either directly via a query operation, or indirectly via an included association..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidDomainOperationEntry_InvalidQueryOperationReturnType">
            <summary>
              Looks up a localized string similar to Invalid return Type &apos;{0}&apos; for query method &apos;{1}&apos;. Query methods must have a return Type that implements IEnumerable of T or must return a singleton..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidDomainOperationEntry_NonQueryMustReturnVoid">
            <summary>
              Looks up a localized string similar to DomainOperationEntry &apos;{0}&apos; does not represent a Query operation so it must not return a value..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidDomainOperationEntry_ParamMustBeByVal">
            <summary>
              Looks up a localized string similar to Parameter &apos;{1}&apos; of domain operation entry &apos;{0}&apos; should be by-value..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidDomainOperationEntry_ParamMustBeSimple">
            <summary>
              Looks up a localized string similar to Parameter &apos;{1}&apos; of domain operation entry &apos;{0}&apos; must be one of the predefined serializable types..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidDomainOperationEntry_ParamTypeMustBeEntity">
            <summary>
              Looks up a localized string similar to The type(s) of parameter(s) used in domain operation entry &apos;{0}&apos; should be used in one of the Query methods..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidDomainOperationEntryType">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid DomainOperation type for a DomainOperationEntry..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidDomainOperationType">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid DomainOperation type for a ChangeSetEntry..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidExternal_NonAssociationMember">
            <summary>
              Looks up a localized string similar to Invalid External specification for member &apos;{0}.{1}&apos;. ExternalReferenceAttribute can only be specified on members with the AssociationAttribute applied..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidInclude_NonAssociationMember">
            <summary>
              Looks up a localized string similar to Invalid Include specification for member &apos;{0}.{1}&apos;. Non-projection includes can only be specified on members with the AssociationAttribute applied..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidInsertUpdateDeleteMethod_IncorrectParameterLength">
            <summary>
              Looks up a localized string similar to Domain operation entry &apos;{0}&apos; must take exactly one parameter..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidInvokeOperation_ParameterTypeMustBeEntityOrSimple">
            <summary>
              Looks up a localized string similar to Operation named &apos;{0}&apos; does not conform to the required signature. Parameter types must be an entity type or one of the predefined serializable types..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidInvokeOperation_ReturnTypeMustBeSimple">
            <summary>
              Looks up a localized string similar to Operation named &apos;{0}&apos; does not conform to the required signature. Return types must be one of the predefined serializable types..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidMemberProjection_EmptyMemberName">
            <summary>
              Looks up a localized string similar to Invalid member projection specification : member name cannot be empty..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidMemberProjection_EmptyPath">
            <summary>
              Looks up a localized string similar to Invalid member projection specification : path cannot be empty..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidMemberProjection_InvalidProjectedType">
            <summary>
              Looks up a localized string similar to Invalid member projection specification : The type of member &apos;{0}.{1}&apos; projected from member &apos;{2}.{3}&apos; is not one of the predefined serializable types..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidMemberProjection_Path">
            <summary>
              Looks up a localized string similar to Invalid member projection specification : Projection path &apos;{0}&apos; is invalid for member &apos;{1}.{2}&apos;. Please verify that the &apos;Path&apos; value specified in the IncludeAttribute on this member is correct. .
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidOperationExceptionType">
            <summary>
              Looks up a localized string similar to The specified exception type &apos;{0}&apos; is not one of the expected types..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidResolveMethod_IncorrectParameterLength">
            <summary>
              Looks up a localized string similar to Domain operation entry &apos;{0}&apos; must take exactly four parameters..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidResolveMethod_InvalidParameterTypes">
            <summary>
              Looks up a localized string similar to Resolve method named &apos;{0}&apos; does not conform to the required signature. The first three parameters must be of the same entity type. The last parameter must be of Boolean type..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidResolveMethod_ReturnTypeMustBeBool">
            <summary>
              Looks up a localized string similar to Resolve method named &apos;{0}&apos; must have a Boolean return type..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidResolveMethod_UpdateOrDeleteNotDefined">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; used in domain operation entry &apos;{1}&apos; must be associated with at least an Update method or a Delete method..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.InvalidType">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not derive from &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.MemberNotAComposition">
            <summary>
              Looks up a localized string similar to Member &apos;{0}.{1}&apos; is not an compositional association member marked with CompositionAttribute..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.MemberNotAnAssociation">
            <summary>
              Looks up a localized string similar to Member &apos;{0}.{1}&apos; is not an association member marked with AssociationAttribute..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.Method_Parameter_Count_Wrong">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; requires {1} parameters..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.RequiresRoleAttribute_MustSpecifyRole">
            <summary>
              Looks up a localized string similar to One or more roles must be specified..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.ValidationUtilities_AmbiguousMatch">
            <summary>
              Looks up a localized string similar to Ambiguous match for method &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.ValidationUtilities_ContextInstance_CannotBeNull">
            <summary>
              Looks up a localized string similar to ValidationContext.ObjectInstance cannot be null..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.ValidationUtilities_MethodNotFound">
            <summary>
              Looks up a localized string similar to Method &apos;{0}.{1}&apos; accepting {2} parameter(s) of type(s) ({3}) could not be found..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Resource.ValidationUtilities_MethodNotFound_ZeroParams">
            <summary>
              Looks up a localized string similar to Method &apos;{0}.{1}&apos; accepting zero parameters could not be found..
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.Linq.QueryComposer">
            <summary>
            Used to compose two separate queries into a single query
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.Linq.QueryComposer.Compose(System.Linq.IQueryable,System.Linq.IQueryable)">
            <summary>
            Composes the specified query with the source provided.
            </summary>
            <param name="source">The root or source query</param>
            <param name="query">The query to compose</param>
            <returns>The composed query</returns>
        </member>
        <member name="M:System.Web.DomainServices.Linq.QueryComposer.TryComposeWithoutPaging(System.Linq.IQueryable,System.Linq.IQueryable@)">
            <summary>
            Inspects the specified query and if the query has any paging operators
            at the end of it (either a single Take or a Skip/Take) the underlying
            query w/o the Skip/Take is returned.
            </summary>
            <param name="query">The query to inspect.</param>
            <param name="countQuery">The resulting count query. Null if there is no paging.</param>
            <returns>True if a count query is returned, false otherwise.</returns>
        </member>
        <member name="T:System.Web.DomainServices.Linq.QueryComposer.QueryRebaser">
            <summary>
            Class used to insert a specified query source into another separate
            query, effectively "rebasing" the query source.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.Linq.QueryComposer.QueryRebaser.Rebase(System.Linq.IQueryable,System.Linq.IQueryable)">
            <summary>
            Rebase the specified query to the specified source
            </summary>
            <param name="source">The query source</param>
            <param name="query">The query to rebase</param>
            <returns>Returns the edited query.</returns>
        </member>
    </members>
</doc>
