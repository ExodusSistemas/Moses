<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Web.DomainServices.LinqToSql</name>
    </assembly>
    <members>
        <member name="T:System.Web.DomainServices.TypeDescriptionContextBase">
            <summary>
            Base class for LTS and EF type description contexts
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.TypeDescriptionContextBase.MakeUniqueName(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Given a suggested name and a collection of existing names, this method
            creates a unique name by appending a numerix suffix as required.
            </summary>
            <param name="suggested">The desired name</param>
            <param name="existing">Collection of existing names</param>
            <returns>The unique name</returns>
        </member>
        <member name="M:System.Web.DomainServices.TypeDescriptionContextBase.FormatMemberList(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Comma delimits the specified member name collection
            </summary>
            <param name="members">A collection of members.</param>
            <returns>A comma delimited list of member names.</returns>
        </member>
        <member name="T:System.Web.DomainServices.TypeDescriptorBase">
            <summary>
            CustomTypeDescriptor base type shared by LINQ To SQL and LINQ To Entities
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.TypeDescriptorBase.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
            <summary>
            Main constructor that accepts the parent custom type descriptor
            </summary>
            <param name="parent">The parent custom type descriptor.</param>
        </member>
        <member name="M:System.Web.DomainServices.TypeDescriptorBase.GetProperties">
            <summary>
            Override of the <see cref="M:System.ComponentModel.CustomTypeDescriptor.GetProperties"/> to obtain the list
            of properties for this type.
            </summary>
            <remarks>
            This method is overridden so that it can merge this class's parent attributes with those
            it infers from the DAL-specific attributes.
            </remarks>
            <returns>A list of properties for this type</returns>
        </member>
        <member name="M:System.Web.DomainServices.TypeDescriptorBase.CreateAdditionalProperties(System.Collections.Generic.ICollection{System.ComponentModel.PropertyDescriptor})">
            <summary>
            Creates additional properties.
            </summary>
            <param name="existingProperties">Currently known set of properties</param>
            <returns>A collection of new synthesized properties that must be added to the list of known properties</returns>
        </member>
        <member name="M:System.Web.DomainServices.TypeDescriptorBase.GetEntityMemberAttributes(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Abstract method specific DAL implementations must override to return the
            list of RIA <see cref="T:System.Attribute"/>s implied by their DAL-specific attributes
            </summary>
            <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor"/> to examine.</param>
            <returns>A list of RIA attributes implied by the DAL specific attributes</returns>
        </member>
        <member name="T:System.Web.DomainServices.Providers.DataContextExtensions">
            <summary>
            DataContext extension methods useful to LinqToSqlDomainService authors
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.Providers.DataContextExtensions.IsAttached(System.Data.Linq.ITable,System.Object)">
            <summary>
            Extension method used to determine if the specified entity is currently attached
            </summary>
            <param name="table">The entity table</param>
            <param name="entity">The entity to check</param>
            <returns>True if the entity is currently attached, false otherwise</returns>
        </member>
        <member name="T:System.Web.DomainServices.Providers.LinqToSqlDomainService`1">
            <summary>
            Base class for DomainServices operating on LINQ To SQL data models
            </summary>
            <typeparam name="TContext">Type of DomainContext to instantiate the LinqToSqlDomainService with</typeparam>
        </member>
        <member name="M:System.Web.DomainServices.Providers.LinqToSqlDomainService`1.#ctor">
            <summary>
            Protected constructor
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.Providers.LinqToSqlDomainService`1.Count``1(System.Linq.IQueryable{``0})">
            <summary>
            Gets the number of rows in an <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="T">The element Type of the query.</typeparam>
            <param name="query">The query for which the count should be returned.</param>
            <returns>The total number of rows.</returns>
        </member>
        <member name="M:System.Web.DomainServices.Providers.LinqToSqlDomainService`1.Dispose(System.Boolean)">
            <summary>
            See <see cref="T:System.IDisposable"/>
            </summary>
            <param name="disposing">A <see cref="T:System.Boolean"/> indicating whether or not the instance is being disposed.</param>
        </member>
        <member name="M:System.Web.DomainServices.Providers.LinqToSqlDomainService`1.PersistChangeSet(System.Web.DomainServices.ChangeSet)">
            <summary>
            This method is called to finalize changes after all the operations in the specified changeset
            have been invoked. All changes are committed to the DataContext, and any resulting optimistic
            concurrency errors are processed.
            </summary>
            <param name="changeSet">The <see cref="T:System.Web.DomainServices.ChangeSet"/> to submit</param>
            <returns><c>true</c> if the <see cref="T:System.Web.DomainServices.ChangeSet"/> was persisted successfully, <c>false</c> otherwise.</returns>
            <exception cref="T:System.InvalidOperationException"> if a <see cref="T:System.Data.Linq.ChangeConflictException"/> exception
            is thrown as we submit changes and the source of change conflicts are not contained in the
            current <see cref="T:System.Web.DomainServices.ChangeSet"/>.</exception>
        </member>
        <member name="M:System.Web.DomainServices.Providers.LinqToSqlDomainService`1.ProcessConcurrencyErrors(System.Data.Linq.ChangeConflictException)">
            <summary>
            Apply all conflict info to the changeset entries.
            </summary>
            <param name="ex">The concurrency exception</param>
        </member>
        <member name="M:System.Web.DomainServices.Providers.LinqToSqlDomainService`1.Resolve(System.Object,System.Object,System.Object,System.Web.DomainServices.ResolveOption)">
            <summary>
            This method resolves the conflicts for a single entity.
            </summary>
            <param name="current">The entity with current values</param>
            <param name="original">The entity with original values</param>
            <param name="store">The entity with current store values</param>
            <param name="resolveOption">The <see cref="T:System.Web.DomainServices.ResolveOption"/> to use to resolve the conflicts</param>
            <returns>True if the conflicts were successfully resolved, false otherwise</returns>
        </member>
        <member name="M:System.Web.DomainServices.Providers.LinqToSqlDomainService`1.CreateDataContext">
            <summary>
            Creates and returns the DataContext instance that will be used by this service.
            </summary>
            <returns>The DomainContext</returns>
        </member>
        <member name="P:System.Web.DomainServices.Providers.LinqToSqlDomainService`1.DataContext">
            <summary>
            Gets the DataContext for this service
            </summary>
            <value>This property always gets the current DataContext.  If it has not yet been created,
            it will create one.
            </value>
        </member>
        <member name="T:System.Web.DomainServices.Providers.LinqToSqlMetadataProviderAttribute">
            <summary>
            Attribute applied to a <see cref="T:System.Web.DomainServices.DomainService"/> that exposes LINQ to SQL mapped
            Types.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.Providers.LinqToSqlMetadataProviderAttribute.#ctor">
            <summary>
            Default constructor. Using this constructor, the Type of the LINQ to SQL
            DataContext will be inferred from the <see cref="T:System.Web.DomainServices.DomainService"/> the
            attribute is applied to.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.Providers.LinqToSqlMetadataProviderAttribute.#ctor(System.Type)">
            <summary>
            Constructs an attribute for the specified LINQ to SQL
            DataContext Type.
            </summary>
            <param name="dataContextType">The LINQ to SQL DataContext Type.</param>
        </member>
        <member name="M:System.Web.DomainServices.Providers.LinqToSqlMetadataProviderAttribute.CreateProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
            <summary>
            This method creates an instance of the <see cref="T:System.ComponentModel.TypeDescriptionProvider"/>.
            </summary>
            <param name="existingProvider">The existing <see cref="T:System.ComponentModel.TypeDescriptionProvider"/> for the Type the returned
            provider will be registered for.</param>
            <param name="domainServiceType">The <see cref="T:System.Web.DomainServices.DomainService"/> Type metadata is being provided for.</param>
            <returns>The <see cref="T:System.ComponentModel.TypeDescriptionProvider"/> instance.</returns>
        </member>
        <member name="M:System.Web.DomainServices.Providers.LinqToSqlMetadataProviderAttribute.GetContextType(System.Type)">
            <summary>
            Extracts the context type from the specified <paramref name="domainServiceType"/>.
            </summary>
            <param name="domainServiceType">A LINQ to SQL domain service type.</param>
            <returns>The type of the data context.</returns>
        </member>
        <member name="P:System.Web.DomainServices.Providers.LinqToSqlMetadataProviderAttribute.DataContextType">
            <summary>
            The LINQ to SQL DataContext Type.
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.Providers.LinqToSqlTypeDescriptionContext">
            <summary>
            Class that provides the basic metadata interface to a LINQ To SQL data context.
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.Providers.LinqToSqlTypeDescriptionContext.#ctor(System.Type)">
            <summary>
            Constructor that creates a metadata context for the specified LINQ To SQL domain service type
            </summary>
            <param name="dataContextType">The DataContext type</param>
        </member>
        <member name="M:System.Web.DomainServices.Providers.LinqToSqlTypeDescriptionContext.CreateAssociationAttribute(System.Data.Linq.Mapping.MetaDataMember)">
            <summary>
            Returns an AssociationAttribute for the specified association member
            </summary>
            <param name="member">The metadata member corresponding to the association member</param>
            <returns>The Association attribute</returns>
        </member>
        <member name="M:System.Web.DomainServices.Providers.LinqToSqlTypeDescriptionContext.GetAssociationName(System.Data.Linq.Mapping.MetaAssociation)">
            <summary>
            Returns a unique association name for the specified MetaAssociation
            </summary>
            <param name="metaAssociation">A <see cref="T:System.Data.Linq.Mapping.MetaAssociation"/>.</param>
            <returns>A <see cref="T:System.String"/> containing the association name.</returns>
        </member>
        <member name="P:System.Web.DomainServices.Providers.LinqToSqlTypeDescriptionContext.MetaModel">
            <summary>
            Gets the MetaModel containing the metadata
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.Providers.LinqToSqlTypeDescriptionProvider">
            <summary>
            TypeDescriptionProvider for LINQ To SQL
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.Providers.LinqToSqlTypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider,System.Type,System.Type)">
            <summary>
            Constructor that accepts a metadata context to use when generating custom type descriptors
            </summary>
            <param name="existingProvider">The parent TDP instance</param>
            <param name="domainServiceType">The DomainService Type exposing the entity Types this provider will be registered for</param>
            <param name="dataContextType">The DataContext Type that exposes the Types this provider will be registered for</param>
        </member>
        <member name="M:System.Web.DomainServices.Providers.LinqToSqlTypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
            <summary>
            Returns a custom type descriptor for the specified entity type
            </summary>
            <param name="objectType">Type of object for which we need the descriptor</param>
            <param name="instance">Instance of that object (alternate way to ask for information)</param>
            <returns>a custom type descriptor for the specified entity type</returns>
        </member>
        <member name="T:System.Web.DomainServices.Providers.LinqToSqlTypeDescriptor">
            <summary>
            CustomTypeDescriptor for LINQ To SQL entities
            </summary>
        </member>
        <member name="M:System.Web.DomainServices.Providers.LinqToSqlTypeDescriptor.#ctor(System.Web.DomainServices.Providers.LinqToSqlTypeDescriptionContext,System.Data.Linq.Mapping.MetaType,System.ComponentModel.ICustomTypeDescriptor)">
            <summary>
            Constructor that takes the metadata context, a metadata type and a parent custom type descriptor
            </summary>
            <param name="typeDescriptionContext">The <see cref="T:System.Web.DomainServices.Providers.LinqToSqlTypeDescriptionContext"/> context.</param>
            <param name="metaType">The <see cref="T:System.Data.Linq.Mapping.MetaType"/> type.</param>
            <param name="parent">The parent custom type descriptor.</param>
        </member>
        <member name="M:System.Web.DomainServices.Providers.LinqToSqlTypeDescriptor.GetEntityMemberAttributes(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns a collection of all the <see cref="T:System.Attribute"/>s we infer from the metadata associated
            with the metadata member corresponding to the given property descriptor
            </summary>
            <param name="propertyDescriptor">A <see cref="T:System.ComponentModel.PropertyDescriptor"/>.</param>
            <returns>A collection of attributes inferred from metadata in the given descriptor.</returns>
        </member>
        <member name="M:System.Web.DomainServices.Providers.LinqToSqlTypeDescriptor.InferStringLengthAttribute(System.String,System.Collections.Generic.List{System.Attribute})">
            <summary>
            Parse the DbType to determine whether a StringLengthAttribute should be added.
            </summary>
            <param name="dbType">The DbType from the MetaDataMember.</param>
            <param name="attributes">The list of attributes to append to.</param>
        </member>
        <member name="P:System.Web.DomainServices.Providers.LinqToSqlTypeDescriptor.TypeDescriptionContext">
            <summary>
            Gets the metadata context
            </summary>
        </member>
        <member name="T:System.Web.DomainServices.Providers.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Providers.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Providers.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Providers.Resource.InvalidMetadataProviderSpecification">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot be applied to DomainService Type &apos;{1}&apos; because &apos;{1}&apos; does not derive from &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.DomainServices.Providers.Resource.LinqToSqlDomainService_ChangeConflictException_EntityNotFound">
            <summary>
              Looks up a localized string similar to A &apos;{0}&apos; was raised and one or more entities in conflict were not contained in the current ChangeSet..
            </summary>
        </member>
    </members>
</doc>
