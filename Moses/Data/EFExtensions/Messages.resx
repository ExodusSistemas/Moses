<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AmbiguousEntitySet" xml:space="preserve">
    <value>More than one entity set supports the given element type '{0}'. You must specify an entity set.</value>
  </data>
  <data name="AttachedEntityHasWrongType" xml:space="preserve">
    <value>The given type argument to does not match the type of an entity found in the state manager.</value>
  </data>
  <data name="CannotDetermineMetadataForRelatedEnd" xml:space="preserve">
    <value>Unable to retrieve metadata for related end.</value>
  </data>
  <data name="DeletingFromWrongSet" xml:space="preserve">
    <value>Attempting to delete an entity belonging to a different set.</value>
  </data>
  <data name="EmptyArgument" xml:space="preserve">
    <value>Argument is empty.</value>
  </data>
  <data name="IncompatibleReader" xml:space="preserve">
    <value>The given reader is incompatible with the current materializer. Create a different materializer for this reader.</value>
  </data>
  <data name="InvalidOptimizerType" xml:space="preserve">
    <value>The given type must implement '{0}' and have a default constructor.</value>
  </data>
  <data name="InvalidSourceEntity" xml:space="preserve">
    <value>Source entity did not contribute the given reference.</value>
  </data>
  <data name="NoEntitySet" xml:space="preserve">
    <value>No entity set was found supporting the given element type '{0}'.</value>
  </data>
  <data name="OperationRequiresObjectQuery" xml:space="preserve">
    <value>The argument must be an instance of System.Data.Objects.ObjectQuery'1.</value>
  </data>
  <data name="OptimizedExpressionUnavailable" xml:space="preserve">
    <value>An optimized expression cannot be produced before results have been materialized.</value>
  </data>
  <data name="SimpleKeyOnly" xml:space="preserve">
    <value>This method is only supported for non-compound reference keys</value>
  </data>
  <data name="UnableToCreateDefaultMaterializeDelegate" xml:space="preserve">
    <value>Unable to build a default materialization delegate for this type. Initialize a materializer with a specific delegate definition.</value>
  </data>
  <data name="UnableToFindMetadataForType" xml:space="preserve">
    <value>Unable to find EDM metadata for the given CLR type '{0}'.</value>
  </data>
  <data name="UnableToGetBindingList" xml:space="preserve">
    <value>The given query does not support binding lists.</value>
  </data>
  <data name="UnexpectedKeyCount" xml:space="preserve">
    <value>Unexpected number of key values given.</value>
  </data>
  <data name="UnknownEntityContainer" xml:space="preserve">
    <value>Unable to find specified entity container '{0}'.</value>
  </data>
  <data name="UnknownEntitySet" xml:space="preserve">
    <value>Unable to find specified entity set '{0}'.</value>
  </data>
  <data name="UntrackedEntity" xml:space="preserve">
    <value>Entity is not tracked by the current object context.</value>
  </data>
</root>